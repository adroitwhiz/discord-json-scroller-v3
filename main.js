/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../node_modules/discord-markdown/index.js":
/*!*************************************************!*\
  !*** ../node_modules/discord-markdown/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const markdown = __webpack_require__(/*! simple-markdown */ \"../node_modules/simple-markdown/simple-markdown.js\");\n\nconst highlight = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'highlight.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\nfunction htmlTag(tagName, content, attributes, isClosed = true, state = {}) {\n  if (typeof isClosed === 'object') {\n    state = isClosed;\n    isClosed = true;\n  }\n\n  if (!attributes) attributes = {};\n  if (attributes.class && state.cssModuleNames) attributes.class = attributes.class.split(' ').map(cl => state.cssModuleNames[cl] || cl).join(' ');\n  let attributeString = '';\n\n  for (let attr in attributes) {\n    // Removes falsy attributes\n    if (Object.prototype.hasOwnProperty.call(attributes, attr) && attributes[attr]) attributeString += ` ${markdown.sanitizeText(attr)}=\"${markdown.sanitizeText(attributes[attr])}\"`;\n  }\n\n  let unclosedTag = `<${tagName}${attributeString}>`;\n  if (isClosed) return unclosedTag + content + `</${tagName}>`;\n  return unclosedTag;\n}\n\nmarkdown.htmlTag = htmlTag;\nconst rules = {\n  blockQuote: Object.assign({}, markdown.defaultRules.blockQuote, {\n    match: function (source, state, prevSource) {\n      return !/^$|\\n *$/.test(prevSource) || state.inQuote ? null : /^( *>>> ([\\s\\S]*))|^( *> [^\\n]*(\\n *> [^\\n]*)*\\n?)/.exec(source);\n    },\n    parse: function (capture, parse, state) {\n      const all = capture[0];\n      const isBlock = Boolean(/^ *>>> ?/.exec(all));\n      const removeSyntaxRegex = isBlock ? /^ *>>> ?/ : /^ *> ?/gm;\n      const content = all.replace(removeSyntaxRegex, '');\n      return {\n        content: parse(content, Object.assign({}, state, {\n          inQuote: true\n        })),\n        type: 'blockQuote'\n      };\n    }\n  }),\n  codeBlock: Object.assign({}, markdown.defaultRules.codeBlock, {\n    match: markdown.inlineRegex(/^```(([a-z0-9-]+?)\\n+)?\\n*([^]+?)\\n*```/i),\n    parse: function (capture, parse, state) {\n      return {\n        lang: (capture[2] || '').trim(),\n        content: capture[3] || '',\n        inQuote: state.inQuote || false\n      };\n    },\n    html: (node, output, state) => {\n      let code;\n      if (node.lang && highlight.getLanguage(node.lang)) code = highlight.highlight(node.lang, node.content, true); // Discord seems to set ignoreIllegals: true\n\n      if (code && state.cssModuleNames) // Replace classes in hljs output\n        code.value = code.value.replace(/<span class=\"([a-z0-9-_ ]+)\">/gi, (str, m) => str.replace(m, m.split(' ').map(cl => state.cssModuleNames[cl] || cl).join(' ')));\n      return htmlTag('pre', htmlTag('code', code ? code.value : markdown.sanitizeText(node.content), {\n        class: `hljs${code ? ' ' + code.language : ''}`\n      }, state), null, state);\n    }\n  }),\n  newline: markdown.defaultRules.newline,\n  escape: markdown.defaultRules.escape,\n  autolink: Object.assign({}, markdown.defaultRules.autolink, {\n    parse: capture => {\n      return {\n        content: [{\n          type: 'text',\n          content: capture[1]\n        }],\n        target: capture[1]\n      };\n    },\n    html: (node, output, state) => {\n      return htmlTag('a', output(node.content, state), {\n        href: markdown.sanitizeUrl(node.target)\n      }, state);\n    }\n  }),\n  url: Object.assign({}, markdown.defaultRules.url, {\n    parse: capture => {\n      return {\n        content: [{\n          type: 'text',\n          content: capture[1]\n        }],\n        target: capture[1]\n      };\n    },\n    html: (node, output, state) => {\n      return htmlTag('a', output(node.content, state), {\n        href: markdown.sanitizeUrl(node.target)\n      }, state);\n    }\n  }),\n  em: Object.assign({}, markdown.defaultRules.em, {\n    parse: function (capture, parse, state) {\n      const parsed = markdown.defaultRules.em.parse(capture, parse, Object.assign({}, state, {\n        inEmphasis: true\n      }));\n      return state.inEmphasis ? parsed.content : parsed;\n    }\n  }),\n  strong: markdown.defaultRules.strong,\n  u: markdown.defaultRules.u,\n  strike: Object.assign({}, markdown.defaultRules.del, {\n    match: markdown.inlineRegex(/^~~([\\s\\S]+?)~~(?!_)/)\n  }),\n  inlineCode: Object.assign({}, markdown.defaultRules.inlineCode, {\n    match: source => markdown.defaultRules.inlineCode.match.regex.exec(source),\n    html: function (node, output, state) {\n      return htmlTag('code', markdown.sanitizeText(node.content.trim()), null, state);\n    }\n  }),\n  text: Object.assign({}, markdown.defaultRules.text, {\n    match: source => /^[\\s\\S]+?(?=[^0-9A-Za-z\\s\\u00c0-\\uffff-]|\\n\\n|\\n|\\w+:\\S|$)/.exec(source),\n    html: function (node, output, state) {\n      if (state.escapeHTML) return markdown.sanitizeText(node.content);\n      return node.content;\n    }\n  }),\n  emoticon: {\n    order: markdown.defaultRules.text.order,\n    match: source => /^(¯\\\\_\\(ツ\\)_\\/¯)/.exec(source),\n    parse: function (capture) {\n      return {\n        type: 'text',\n        content: capture[1]\n      };\n    },\n    html: function (node, output, state) {\n      return output(node.content, state);\n    }\n  },\n  br: Object.assign({}, markdown.defaultRules.br, {\n    match: markdown.anyScopeRegex(/^\\n/)\n  }),\n  spoiler: {\n    order: 0,\n    match: source => /^\\|\\|([\\s\\S]+?)\\|\\|/.exec(source),\n    parse: function (capture, parse, state) {\n      return {\n        content: parse(capture[1], state)\n      };\n    },\n    html: function (node, output, state) {\n      return htmlTag('span', output(node.content, state), {\n        class: 'd-spoiler'\n      }, state);\n    }\n  }\n};\nconst discordCallbackDefaults = {\n  user: node => '@' + markdown.sanitizeText(node.id),\n  channel: node => '#' + markdown.sanitizeText(node.id),\n  role: node => '&' + markdown.sanitizeText(node.id),\n  everyone: () => '@everyone',\n  here: () => '@here'\n};\nconst rulesDiscord = {\n  discordUser: {\n    order: markdown.defaultRules.strong.order,\n    match: source => /^<@!?([0-9]*)>/.exec(source),\n    parse: function (capture) {\n      return {\n        id: capture[1]\n      };\n    },\n    html: function (node, output, state) {\n      return htmlTag('span', state.discordCallback.user(node), {\n        class: 'd-mention d-user'\n      }, state);\n    }\n  },\n  discordChannel: {\n    order: markdown.defaultRules.strong.order,\n    match: source => /^<#?([0-9]*)>/.exec(source),\n    parse: function (capture) {\n      return {\n        id: capture[1]\n      };\n    },\n    html: function (node, output, state) {\n      return htmlTag('span', state.discordCallback.channel(node), {\n        class: 'd-mention d-channel'\n      }, state);\n    }\n  },\n  discordRole: {\n    order: markdown.defaultRules.strong.order,\n    match: source => /^<@&([0-9]*)>/.exec(source),\n    parse: function (capture) {\n      return {\n        id: capture[1]\n      };\n    },\n    html: function (node, output, state) {\n      return htmlTag('span', state.discordCallback.role(node), {\n        class: 'd-mention d-role'\n      }, state);\n    }\n  },\n  discordEmoji: {\n    order: markdown.defaultRules.strong.order,\n    match: source => /^<(a?):(\\w+):(\\d+)>/.exec(source),\n    parse: function (capture) {\n      return {\n        animated: capture[1] === \"a\",\n        name: capture[2],\n        id: capture[3]\n      };\n    },\n    html: function (node, output, state) {\n      return htmlTag('img', '', {\n        class: `d-emoji${node.animated ? ' d-emoji-animated' : ''}`,\n        src: `https://cdn.discordapp.com/emojis/${node.id}.${node.animated ? 'gif' : 'png'}`,\n        alt: `:${node.name}:`\n      }, false, state);\n    }\n  },\n  discordEveryone: {\n    order: markdown.defaultRules.strong.order,\n    match: source => /^@everyone/.exec(source),\n    parse: function () {\n      return {};\n    },\n    html: function (node, output, state) {\n      return htmlTag('span', state.discordCallback.everyone(node), {\n        class: 'd-mention d-user'\n      }, state);\n    }\n  },\n  discordHere: {\n    order: markdown.defaultRules.strong.order,\n    match: source => /^@here/.exec(source),\n    parse: function () {\n      return {};\n    },\n    html: function (node, output, state) {\n      return htmlTag('span', state.discordCallback.here(node), {\n        class: 'd-mention d-user'\n      }, state);\n    }\n  }\n};\nObject.assign(rules, rulesDiscord);\nconst rulesDiscordOnly = Object.assign({}, rulesDiscord, {\n  text: Object.assign({}, markdown.defaultRules.text, {\n    match: source => /^[\\s\\S]+?(?=[^0-9A-Za-z\\s\\u00c0-\\uffff-]|\\n\\n|\\n|\\w+:\\S|$)/.exec(source),\n    html: function (node, output, state) {\n      if (state.escapeHTML) return markdown.sanitizeText(node.content);\n      return node.content;\n    }\n  })\n});\nconst rulesEmbed = Object.assign({}, rules, {\n  link: markdown.defaultRules.link\n});\nconst parser = markdown.parserFor(rules);\nconst htmlOutput = markdown.outputFor(rules, 'html');\nconst parserDiscord = markdown.parserFor(rulesDiscordOnly);\nconst htmlOutputDiscord = markdown.outputFor(rulesDiscordOnly, 'html');\nconst parserEmbed = markdown.parserFor(rulesEmbed);\nconst htmlOutputEmbed = markdown.outputFor(rulesEmbed, 'html');\n/**\r\n * Parse markdown and return the HTML output\r\n * @param {String} source Source markdown content\r\n * @param {Object} [options] Options for the parser\r\n * @param {Boolean} [options.embed=false] Parse as embed content\r\n * @param {Boolean} [options.escapeHTML=true] Escape HTML in the output\r\n * @param {Boolean} [options.discordOnly=false] Only parse Discord-specific stuff (such as mentions)\r\n * @param {Object} [options.discordCallback] Provide custom handling for mentions and emojis\r\n * @param {Object} [options.cssModuleNames] An object mapping css classes to css module classes\r\n */\n\nfunction toHTML(source, options, customParser, customHtmlOutput) {\n  if ((customParser || customHtmlOutput) && (!customParser || !customHtmlOutput)) throw new Error('You must pass both a custom parser and custom htmlOutput function, not just one');\n  options = Object.assign({\n    embed: false,\n    escapeHTML: true,\n    discordOnly: false,\n    discordCallback: {}\n  }, options || {});\n  let _parser = parser;\n  let _htmlOutput = htmlOutput;\n\n  if (customParser) {\n    _parser = customParser;\n    _htmlOutput = customHtmlOutput;\n  } else if (options.discordOnly) {\n    _parser = parserDiscord;\n    _htmlOutput = htmlOutputDiscord;\n  } else if (options.embed) {\n    _parser = parserEmbed;\n    _htmlOutput = htmlOutputEmbed;\n  }\n\n  const state = {\n    inline: true,\n    inQuote: false,\n    inEmphasis: false,\n    escapeHTML: options.escapeHTML,\n    cssModuleNames: options.cssModuleNames || null,\n    discordCallback: Object.assign({}, discordCallbackDefaults, options.discordCallback)\n  };\n  return _htmlOutput(_parser(source, state), state);\n}\n\nmodule.exports = {\n  parser: source => parser(source, {\n    inline: true\n  }),\n  htmlOutput,\n  toHTML,\n  rules,\n  rulesDiscordOnly,\n  rulesEmbed,\n  markdownEngine: markdown,\n  htmlTag\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/discord-markdown/index.js\n");

/***/ }),

/***/ "../node_modules/preact/compat/dist/compat.module.js":
/*!***********************************************************!*\
  !*** ../node_modules/preact/compat/dist/compat.module.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useCallback\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useCallback),\n/* harmony export */   \"useContext\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useContext),\n/* harmony export */   \"useDebugValue\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useDebugValue),\n/* harmony export */   \"useEffect\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useEffect),\n/* harmony export */   \"useErrorBoundary\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useErrorBoundary),\n/* harmony export */   \"useImperativeHandle\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle),\n/* harmony export */   \"useLayoutEffect\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect),\n/* harmony export */   \"useMemo\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useMemo),\n/* harmony export */   \"useReducer\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useReducer),\n/* harmony export */   \"useRef\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useRef),\n/* harmony export */   \"useState\": () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useState),\n/* harmony export */   \"createElement\": () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_1__.createElement),\n/* harmony export */   \"createContext\": () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_1__.createContext),\n/* harmony export */   \"createRef\": () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_1__.createRef),\n/* harmony export */   \"Fragment\": () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_1__.Fragment),\n/* harmony export */   \"Component\": () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_1__.Component),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"version\": () => (/* binding */ ln),\n/* harmony export */   \"Children\": () => (/* binding */ k),\n/* harmony export */   \"render\": () => (/* binding */ z),\n/* harmony export */   \"hydrate\": () => (/* binding */ B),\n/* harmony export */   \"unmountComponentAtNode\": () => (/* binding */ sn),\n/* harmony export */   \"createPortal\": () => (/* binding */ I),\n/* harmony export */   \"createFactory\": () => (/* binding */ fn),\n/* harmony export */   \"cloneElement\": () => (/* binding */ an),\n/* harmony export */   \"isValidElement\": () => (/* binding */ cn),\n/* harmony export */   \"findDOMNode\": () => (/* binding */ hn),\n/* harmony export */   \"PureComponent\": () => (/* binding */ E),\n/* harmony export */   \"memo\": () => (/* binding */ g),\n/* harmony export */   \"forwardRef\": () => (/* binding */ x),\n/* harmony export */   \"unstable_batchedUpdates\": () => (/* binding */ pn),\n/* harmony export */   \"StrictMode\": () => (/* binding */ vn),\n/* harmony export */   \"Suspense\": () => (/* binding */ L),\n/* harmony export */   \"SuspenseList\": () => (/* binding */ F),\n/* harmony export */   \"lazy\": () => (/* binding */ D),\n/* harmony export */   \"__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\": () => (/* binding */ Q),\n/* harmony export */   \"unstable_ImmediatePriority\": () => (/* binding */ X),\n/* harmony export */   \"unstable_UserBlockingPriority\": () => (/* binding */ nn),\n/* harmony export */   \"unstable_NormalPriority\": () => (/* binding */ tn),\n/* harmony export */   \"unstable_LowPriority\": () => (/* binding */ en),\n/* harmony export */   \"unstable_IdlePriority\": () => (/* binding */ rn),\n/* harmony export */   \"unstable_runWithPriority\": () => (/* binding */ un),\n/* harmony export */   \"unstable_now\": () => (/* binding */ on)\n/* harmony export */ });\n/* harmony import */ var preact_hooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact/hooks */ \"../node_modules/preact/hooks/dist/hooks.module.js\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n\n\n\n\n\nfunction C(n, t) {\n  for (var e in t) n[e] = t[e];\n\n  return n;\n}\n\nfunction S(n, t) {\n  for (var e in n) if (\"__source\" !== e && !(e in t)) return !0;\n\n  for (var r in t) if (\"__source\" !== r && n[r] !== t[r]) return !0;\n\n  return !1;\n}\n\nfunction E(n) {\n  this.props = n;\n}\n\nfunction g(n, t) {\n  function e(n) {\n    var e = this.props.ref,\n        r = e == n.ref;\n    return !r && e && (e.call ? e(null) : e.current = null), t ? !t(this.props, n) || !r : S(this.props, n);\n  }\n\n  function r(t) {\n    return this.shouldComponentUpdate = e, (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(n, t);\n  }\n\n  return r.displayName = \"Memo(\" + (n.displayName || n.name) + \")\", r.prototype.isReactComponent = !0, r.__f = !0, r;\n}\n\n(E.prototype = new preact__WEBPACK_IMPORTED_MODULE_1__.Component()).isPureReactComponent = !0, E.prototype.shouldComponentUpdate = function (n, t) {\n  return S(this.props, n) || S(this.state, t);\n};\nvar w = preact__WEBPACK_IMPORTED_MODULE_1__.options.__b;\n\npreact__WEBPACK_IMPORTED_MODULE_1__.options.__b = function (n) {\n  n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), w && w(n);\n};\n\nvar R = \"undefined\" != typeof Symbol && Symbol.for && Symbol.for(\"react.forward_ref\") || 3911;\n\nfunction x(n) {\n  function t(t, e) {\n    var r = C({}, t);\n    return delete r.ref, n(r, (e = t.ref || e) && (\"object\" != typeof e || \"current\" in e) ? e : null);\n  }\n\n  return t.$$typeof = R, t.render = t, t.prototype.isReactComponent = t.__f = !0, t.displayName = \"ForwardRef(\" + (n.displayName || n.name) + \")\", t;\n}\n\nvar N = function (n, t) {\n  return null == n ? null : (0,preact__WEBPACK_IMPORTED_MODULE_1__.toChildArray)((0,preact__WEBPACK_IMPORTED_MODULE_1__.toChildArray)(n).map(t));\n},\n    k = {\n  map: N,\n  forEach: N,\n  count: function (n) {\n    return n ? (0,preact__WEBPACK_IMPORTED_MODULE_1__.toChildArray)(n).length : 0;\n  },\n  only: function (n) {\n    var t = (0,preact__WEBPACK_IMPORTED_MODULE_1__.toChildArray)(n);\n    if (1 !== t.length) throw \"Children.only\";\n    return t[0];\n  },\n  toArray: preact__WEBPACK_IMPORTED_MODULE_1__.toChildArray\n},\n    A = preact__WEBPACK_IMPORTED_MODULE_1__.options.__e;\n\npreact__WEBPACK_IMPORTED_MODULE_1__.options.__e = function (n, t, e) {\n  if (n.then) for (var r, u = t; u = u.__;) if ((r = u.__c) && r.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), r.__c(n, t);\n  A(n, t, e);\n};\n\nvar O = preact__WEBPACK_IMPORTED_MODULE_1__.options.unmount;\n\nfunction L() {\n  this.__u = 0, this.t = null, this.__b = null;\n}\n\nfunction U(n) {\n  var t = n.__.__c;\n  return t && t.__e && t.__e(n);\n}\n\nfunction D(n) {\n  var t, e, r;\n\n  function u(u) {\n    if (t || (t = n()).then(function (n) {\n      e = n.default || n;\n    }, function (n) {\n      r = n;\n    }), r) throw r;\n    if (!e) throw t;\n    return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(e, u);\n  }\n\n  return u.displayName = \"Lazy\", u.__f = !0, u;\n}\n\nfunction F() {\n  this.u = null, this.o = null;\n}\n\npreact__WEBPACK_IMPORTED_MODULE_1__.options.unmount = function (n) {\n  var t = n.__c;\n  t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), O && O(n);\n}, (L.prototype = new preact__WEBPACK_IMPORTED_MODULE_1__.Component()).__c = function (n, t) {\n  var e = t.__c,\n      r = this;\n  null == r.t && (r.t = []), r.t.push(e);\n\n  var u = U(r.__v),\n      o = !1,\n      i = function () {\n    o || (o = !0, e.__R = null, u ? u(l) : l());\n  };\n\n  e.__R = i;\n\n  var l = function () {\n    if (! --r.__u) {\n      if (r.state.__e) {\n        var n = r.state.__e;\n\n        r.__v.__k[0] = function n(t, e, r) {\n          return t && (t.__v = null, t.__k = t.__k && t.__k.map(function (t) {\n            return n(t, e, r);\n          }), t.__c && t.__c.__P === e && (t.__e && r.insertBefore(t.__e, t.__d), t.__c.__e = !0, t.__c.__P = r)), t;\n        }(n, n.__c.__P, n.__c.__O);\n      }\n\n      var t;\n\n      for (r.setState({\n        __e: r.__b = null\n      }); t = r.t.pop();) t.forceUpdate();\n    }\n  },\n      f = !0 === t.__h;\n\n  r.__u++ || f || r.setState({\n    __e: r.__b = r.__v.__k[0]\n  }), n.then(i, i);\n}, L.prototype.componentWillUnmount = function () {\n  this.t = [];\n}, L.prototype.render = function (n, t) {\n  if (this.__b) {\n    if (this.__v.__k) {\n      var e = document.createElement(\"div\"),\n          r = this.__v.__k[0].__c;\n\n      this.__v.__k[0] = function n(t, e, r) {\n        return t && (t.__c && t.__c.__H && (t.__c.__H.__.forEach(function (n) {\n          \"function\" == typeof n.__c && n.__c();\n        }), t.__c.__H = null), null != (t = C({}, t)).__c && (t.__c.__P === r && (t.__c.__P = e), t.__c = null), t.__k = t.__k && t.__k.map(function (t) {\n          return n(t, e, r);\n        })), t;\n      }(this.__b, e, r.__O = r.__P);\n    }\n\n    this.__b = null;\n  }\n\n  var u = t.__e && (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(preact__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, n.fallback);\n  return u && (u.__h = null), [(0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(preact__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, t.__e ? null : n.children), u];\n};\n\nvar M = function (n, t, e) {\n  if (++e[1] === e[0] && n.o.delete(t), n.props.revealOrder && (\"t\" !== n.props.revealOrder[0] || !n.o.size)) for (e = n.u; e;) {\n    for (; e.length > 3;) e.pop()();\n\n    if (e[1] < e[0]) break;\n    n.u = e = e[2];\n  }\n};\n\nfunction T(n) {\n  return this.getChildContext = function () {\n    return n.context;\n  }, n.children;\n}\n\nfunction j(n) {\n  var t = this,\n      e = n.i;\n  t.componentWillUnmount = function () {\n    (0,preact__WEBPACK_IMPORTED_MODULE_1__.render)(null, t.l), t.l = null, t.i = null;\n  }, t.i && t.i !== e && t.componentWillUnmount(), n.__v ? (t.l || (t.i = e, t.l = {\n    nodeType: 1,\n    parentNode: e,\n    childNodes: [],\n    appendChild: function (n) {\n      this.childNodes.push(n), t.i.appendChild(n);\n    },\n    insertBefore: function (n, e) {\n      this.childNodes.push(n), t.i.appendChild(n);\n    },\n    removeChild: function (n) {\n      this.childNodes.splice(this.childNodes.indexOf(n) >>> 1, 1), t.i.removeChild(n);\n    }\n  }), (0,preact__WEBPACK_IMPORTED_MODULE_1__.render)((0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(T, {\n    context: t.context\n  }, n.__v), t.l)) : t.l && t.componentWillUnmount();\n}\n\nfunction I(n, t) {\n  return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(j, {\n    __v: n,\n    i: t\n  });\n}\n\n(F.prototype = new preact__WEBPACK_IMPORTED_MODULE_1__.Component()).__e = function (n) {\n  var t = this,\n      e = U(t.__v),\n      r = t.o.get(n);\n  return r[0]++, function (u) {\n    var o = function () {\n      t.props.revealOrder ? (r.push(u), M(t, n, r)) : u();\n    };\n\n    e ? e(o) : o();\n  };\n}, F.prototype.render = function (n) {\n  this.u = null, this.o = new Map();\n  var t = (0,preact__WEBPACK_IMPORTED_MODULE_1__.toChildArray)(n.children);\n  n.revealOrder && \"b\" === n.revealOrder[0] && t.reverse();\n\n  for (var e = t.length; e--;) this.o.set(t[e], this.u = [1, 0, this.u]);\n\n  return n.children;\n}, F.prototype.componentDidUpdate = F.prototype.componentDidMount = function () {\n  var n = this;\n  this.o.forEach(function (t, e) {\n    M(n, e, t);\n  });\n};\n\nvar W = \"undefined\" != typeof Symbol && Symbol.for && Symbol.for(\"react.element\") || 60103,\n    P = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,\n    V = function (n) {\n  return (\"undefined\" != typeof Symbol && \"symbol\" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n);\n};\n\nfunction z(n, t, e) {\n  return null == t.__k && (t.textContent = \"\"), (0,preact__WEBPACK_IMPORTED_MODULE_1__.render)(n, t), \"function\" == typeof e && e(), n ? n.__c : null;\n}\n\nfunction B(n, t, e) {\n  return (0,preact__WEBPACK_IMPORTED_MODULE_1__.hydrate)(n, t), \"function\" == typeof e && e(), n ? n.__c : null;\n}\n\npreact__WEBPACK_IMPORTED_MODULE_1__.Component.prototype.isReactComponent = {}, [\"componentWillMount\", \"componentWillReceiveProps\", \"componentWillUpdate\"].forEach(function (n) {\n  Object.defineProperty(preact__WEBPACK_IMPORTED_MODULE_1__.Component.prototype, n, {\n    configurable: !0,\n    get: function () {\n      return this[\"UNSAFE_\" + n];\n    },\n    set: function (t) {\n      Object.defineProperty(this, n, {\n        configurable: !0,\n        writable: !0,\n        value: t\n      });\n    }\n  });\n});\nvar H = preact__WEBPACK_IMPORTED_MODULE_1__.options.event;\n\nfunction Z() {}\n\nfunction Y() {\n  return this.cancelBubble;\n}\n\nfunction $() {\n  return this.defaultPrevented;\n}\n\npreact__WEBPACK_IMPORTED_MODULE_1__.options.event = function (n) {\n  return H && (n = H(n)), n.persist = Z, n.isPropagationStopped = Y, n.isDefaultPrevented = $, n.nativeEvent = n;\n};\n\nvar q,\n    G = {\n  configurable: !0,\n  get: function () {\n    return this.class;\n  }\n},\n    J = preact__WEBPACK_IMPORTED_MODULE_1__.options.vnode;\n\npreact__WEBPACK_IMPORTED_MODULE_1__.options.vnode = function (n) {\n  var t = n.type,\n      e = n.props,\n      r = e;\n\n  if (\"string\" == typeof t) {\n    for (var u in r = {}, e) {\n      var o = e[u];\n      \"value\" === u && \"defaultValue\" in e && null == o || (\"defaultValue\" === u && \"value\" in e && null == e.value ? u = \"value\" : \"download\" === u && !0 === o ? o = \"\" : /ondoubleclick/i.test(u) ? u = \"ondblclick\" : /^onchange(textarea|input)/i.test(u + t) && !V(e.type) ? u = \"oninput\" : /^on(Ani|Tra|Tou|BeforeInp)/.test(u) ? u = u.toLowerCase() : P.test(u) ? u = u.replace(/[A-Z0-9]/, \"-$&\").toLowerCase() : null === o && (o = void 0), r[u] = o);\n    }\n\n    \"select\" == t && r.multiple && Array.isArray(r.value) && (r.value = (0,preact__WEBPACK_IMPORTED_MODULE_1__.toChildArray)(e.children).forEach(function (n) {\n      n.props.selected = -1 != r.value.indexOf(n.props.value);\n    })), \"select\" == t && null != r.defaultValue && (r.value = (0,preact__WEBPACK_IMPORTED_MODULE_1__.toChildArray)(e.children).forEach(function (n) {\n      n.props.selected = r.multiple ? -1 != r.defaultValue.indexOf(n.props.value) : r.defaultValue == n.props.value;\n    })), n.props = r;\n  }\n\n  t && e.class != e.className && (G.enumerable = \"className\" in e, null != e.className && (r.class = e.className), Object.defineProperty(r, \"className\", G)), n.$$typeof = W, J && J(n);\n};\n\nvar K = preact__WEBPACK_IMPORTED_MODULE_1__.options.__r;\n\npreact__WEBPACK_IMPORTED_MODULE_1__.options.__r = function (n) {\n  K && K(n), q = n.__c;\n};\n\nvar Q = {\n  ReactCurrentDispatcher: {\n    current: {\n      readContext: function (n) {\n        return q.__n[n.__c].props.value;\n      }\n    }\n  }\n},\n    X = 1,\n    nn = 2,\n    tn = 3,\n    en = 4,\n    rn = 5;\n\nfunction un(n, t) {\n  return t();\n}\n\nvar on = \"object\" == typeof performance && \"function\" == typeof performance.now ? performance.now.bind(performance) : function () {\n  return Date.now();\n},\n    ln = \"16.8.0\";\n\nfunction fn(n) {\n  return preact__WEBPACK_IMPORTED_MODULE_1__.createElement.bind(null, n);\n}\n\nfunction cn(n) {\n  return !!n && n.$$typeof === W;\n}\n\nfunction an(n) {\n  return cn(n) ? preact__WEBPACK_IMPORTED_MODULE_1__.cloneElement.apply(null, arguments) : n;\n}\n\nfunction sn(n) {\n  return !!n.__k && ((0,preact__WEBPACK_IMPORTED_MODULE_1__.render)(null, n), !0);\n}\n\nfunction hn(n) {\n  return n && (n.base || 1 === n.nodeType && n) || null;\n}\n\nvar pn = function (n, t) {\n  return n(t);\n},\n    vn = preact__WEBPACK_IMPORTED_MODULE_1__.Fragment;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  useState: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useState,\n  useReducer: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useReducer,\n  useEffect: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useEffect,\n  useLayoutEffect: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect,\n  useRef: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useRef,\n  useImperativeHandle: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle,\n  useMemo: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useMemo,\n  useCallback: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useCallback,\n  useContext: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useContext,\n  useDebugValue: preact_hooks__WEBPACK_IMPORTED_MODULE_0__.useDebugValue,\n  version: \"16.8.0\",\n  Children: k,\n  render: z,\n  hydrate: B,\n  unmountComponentAtNode: sn,\n  createPortal: I,\n  createElement: preact__WEBPACK_IMPORTED_MODULE_1__.createElement,\n  createContext: preact__WEBPACK_IMPORTED_MODULE_1__.createContext,\n  createFactory: fn,\n  cloneElement: an,\n  createRef: preact__WEBPACK_IMPORTED_MODULE_1__.createRef,\n  Fragment: preact__WEBPACK_IMPORTED_MODULE_1__.Fragment,\n  isValidElement: cn,\n  findDOMNode: hn,\n  Component: preact__WEBPACK_IMPORTED_MODULE_1__.Component,\n  PureComponent: E,\n  memo: g,\n  forwardRef: x,\n  unstable_batchedUpdates: pn,\n  StrictMode: preact__WEBPACK_IMPORTED_MODULE_1__.Fragment,\n  Suspense: L,\n  SuspenseList: F,\n  lazy: D,\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: Q\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/preact/compat/dist/compat.module.js\n");

/***/ }),

/***/ "../node_modules/preact/dist/preact.module.js":
/*!****************************************************!*\
  !*** ../node_modules/preact/dist/preact.module.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ N),\n/* harmony export */   \"hydrate\": () => (/* binding */ O),\n/* harmony export */   \"createElement\": () => (/* binding */ a),\n/* harmony export */   \"h\": () => (/* binding */ a),\n/* harmony export */   \"Fragment\": () => (/* binding */ y),\n/* harmony export */   \"createRef\": () => (/* binding */ h),\n/* harmony export */   \"isValidElement\": () => (/* binding */ l),\n/* harmony export */   \"Component\": () => (/* binding */ p),\n/* harmony export */   \"cloneElement\": () => (/* binding */ S),\n/* harmony export */   \"createContext\": () => (/* binding */ q),\n/* harmony export */   \"toChildArray\": () => (/* binding */ w),\n/* harmony export */   \"options\": () => (/* binding */ n)\n/* harmony export */ });\nvar n,\n    l,\n    u,\n    i,\n    t,\n    o,\n    r = {},\n    f = [],\n    e = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n\nfunction c(n, l) {\n  for (var u in l) n[u] = l[u];\n\n  return n;\n}\n\nfunction s(n) {\n  var l = n.parentNode;\n  l && l.removeChild(n);\n}\n\nfunction a(n, l, u) {\n  var i,\n      t,\n      o,\n      r = arguments,\n      f = {};\n\n  for (o in l) \"key\" == o ? i = l[o] : \"ref\" == o ? t = l[o] : f[o] = l[o];\n\n  if (arguments.length > 3) for (u = [u], o = 3; o < arguments.length; o++) u.push(r[o]);\n  if (null != u && (f.children = u), \"function\" == typeof n && null != n.defaultProps) for (o in n.defaultProps) void 0 === f[o] && (f[o] = n.defaultProps[o]);\n  return v(n, f, i, t, null);\n}\n\nfunction v(l, u, i, t, o) {\n  var r = {\n    type: l,\n    props: u,\n    key: i,\n    ref: t,\n    __k: null,\n    __: null,\n    __b: 0,\n    __e: null,\n    __d: void 0,\n    __c: null,\n    __h: null,\n    constructor: void 0,\n    __v: null == o ? ++n.__v : o\n  };\n  return null != n.vnode && n.vnode(r), r;\n}\n\nfunction h() {\n  return {\n    current: null\n  };\n}\n\nfunction y(n) {\n  return n.children;\n}\n\nfunction p(n, l) {\n  this.props = n, this.context = l;\n}\n\nfunction d(n, l) {\n  if (null == l) return n.__ ? d(n.__, n.__.__k.indexOf(n) + 1) : null;\n\n  for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;\n\n  return \"function\" == typeof n.type ? d(n) : null;\n}\n\nfunction _(n) {\n  var l, u;\n\n  if (null != (n = n.__) && null != n.__c) {\n    for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) {\n      n.__e = n.__c.base = u.__e;\n      break;\n    }\n\n    return _(n);\n  }\n}\n\nfunction k(l) {\n  (!l.__d && (l.__d = !0) && u.push(l) && !b.__r++ || t !== n.debounceRendering) && ((t = n.debounceRendering) || i)(b);\n}\n\nfunction b() {\n  for (var n; b.__r = u.length;) n = u.sort(function (n, l) {\n    return n.__v.__b - l.__v.__b;\n  }), u = [], n.some(function (n) {\n    var l, u, i, t, o, r;\n    n.__d && (o = (t = (l = n).__v).__e, (r = l.__P) && (u = [], (i = c({}, t)).__v = t.__v + 1, I(r, t, i, l.__n, void 0 !== r.ownerSVGElement, null != t.__h ? [o] : null, u, null == o ? d(t) : o, t.__h), T(u, t), t.__e != o && _(t)));\n  });\n}\n\nfunction m(n, l, u, i, t, o, e, c, s, a) {\n  var h,\n      p,\n      _,\n      k,\n      b,\n      m,\n      w,\n      A = i && i.__k || f,\n      P = A.length;\n\n  for (u.__k = [], h = 0; h < l.length; h++) if (null != (k = u.__k[h] = null == (k = l[h]) || \"boolean\" == typeof k ? null : \"string\" == typeof k || \"number\" == typeof k || \"bigint\" == typeof k ? v(null, k, null, null, k) : Array.isArray(k) ? v(y, {\n    children: k\n  }, null, null, null) : k.__b > 0 ? v(k.type, k.props, k.key, null, k.__v) : k)) {\n    if (k.__ = u, k.__b = u.__b + 1, null === (_ = A[h]) || _ && k.key == _.key && k.type === _.type) A[h] = void 0;else for (p = 0; p < P; p++) {\n      if ((_ = A[p]) && k.key == _.key && k.type === _.type) {\n        A[p] = void 0;\n        break;\n      }\n\n      _ = null;\n    }\n    I(n, k, _ = _ || r, t, o, e, c, s, a), b = k.__e, (p = k.ref) && _.ref != p && (w || (w = []), _.ref && w.push(_.ref, null, k), w.push(p, k.__c || b, k)), null != b ? (null == m && (m = b), \"function\" == typeof k.type && null != k.__k && k.__k === _.__k ? k.__d = s = g(k, s, n) : s = x(n, k, _, A, b, s), a || \"option\" !== u.type ? \"function\" == typeof u.type && (u.__d = s) : n.value = \"\") : s && _.__e == s && s.parentNode != n && (s = d(_));\n  }\n\n  for (u.__e = m, h = P; h--;) null != A[h] && (\"function\" == typeof u.type && null != A[h].__e && A[h].__e == u.__d && (u.__d = d(i, h + 1)), L(A[h], A[h]));\n\n  if (w) for (h = 0; h < w.length; h++) z(w[h], w[++h], w[++h]);\n}\n\nfunction g(n, l, u) {\n  var i, t;\n\n  for (i = 0; i < n.__k.length; i++) (t = n.__k[i]) && (t.__ = n, l = \"function\" == typeof t.type ? g(t, l, u) : x(u, t, t, n.__k, t.__e, l));\n\n  return l;\n}\n\nfunction w(n, l) {\n  return l = l || [], null == n || \"boolean\" == typeof n || (Array.isArray(n) ? n.some(function (n) {\n    w(n, l);\n  }) : l.push(n)), l;\n}\n\nfunction x(n, l, u, i, t, o) {\n  var r, f, e;\n  if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || t != o || null == t.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(t), r = null;else {\n    for (f = o, e = 0; (f = f.nextSibling) && e < i.length; e += 2) if (f == t) break n;\n\n    n.insertBefore(t, o), r = o;\n  }\n  return void 0 !== r ? r : t.nextSibling;\n}\n\nfunction A(n, l, u, i, t) {\n  var o;\n\n  for (o in u) \"children\" === o || \"key\" === o || o in l || C(n, o, null, u[o], i);\n\n  for (o in l) t && \"function\" != typeof l[o] || \"children\" === o || \"key\" === o || \"value\" === o || \"checked\" === o || u[o] === l[o] || C(n, o, l[o], u[o], i);\n}\n\nfunction P(n, l, u) {\n  \"-\" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? \"\" : \"number\" != typeof u || e.test(l) ? u : u + \"px\";\n}\n\nfunction C(n, l, u, i, t) {\n  var o;\n\n  n: if (\"style\" === l) {\n    if (\"string\" == typeof u) n.style.cssText = u;else {\n      if (\"string\" == typeof i && (n.style.cssText = i = \"\"), i) for (l in i) u && l in u || P(n.style, l, \"\");\n      if (u) for (l in u) i && u[l] === i[l] || P(n.style, l, u[l]);\n    }\n  } else if (\"o\" === l[0] && \"n\" === l[1]) o = l !== (l = l.replace(/Capture$/, \"\")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? i || n.addEventListener(l, o ? H : $, o) : n.removeEventListener(l, o ? H : $, o);else if (\"dangerouslySetInnerHTML\" !== l) {\n    if (t) l = l.replace(/xlink[H:h]/, \"h\").replace(/sName$/, \"s\");else if (\"href\" !== l && \"list\" !== l && \"form\" !== l && \"tabIndex\" !== l && \"download\" !== l && l in n) try {\n      n[l] = null == u ? \"\" : u;\n      break n;\n    } catch (n) {}\n    \"function\" == typeof u || (null != u && (!1 !== u || \"a\" === l[0] && \"r\" === l[1]) ? n.setAttribute(l, u) : n.removeAttribute(l));\n  }\n}\n\nfunction $(l) {\n  this.l[l.type + !1](n.event ? n.event(l) : l);\n}\n\nfunction H(l) {\n  this.l[l.type + !0](n.event ? n.event(l) : l);\n}\n\nfunction I(l, u, i, t, o, r, f, e, s) {\n  var a,\n      v,\n      h,\n      d,\n      _,\n      k,\n      b,\n      g,\n      w,\n      x,\n      A,\n      P = u.type;\n\n  if (void 0 !== u.constructor) return null;\n  null != i.__h && (s = i.__h, e = u.__e = i.__e, u.__h = null, r = [e]), (a = n.__b) && a(u);\n\n  try {\n    n: if (\"function\" == typeof P) {\n      if (g = u.props, w = (a = P.contextType) && t[a.__c], x = a ? w ? w.props.value : a.__ : t, i.__c ? b = (v = u.__c = i.__c).__ = v.__E : (\"prototype\" in P && P.prototype.render ? u.__c = v = new P(g, x) : (u.__c = v = new p(g, x), v.constructor = P, v.render = M), w && w.sub(v), v.props = g, v.state || (v.state = {}), v.context = x, v.__n = t, h = v.__d = !0, v.__h = []), null == v.__s && (v.__s = v.state), null != P.getDerivedStateFromProps && (v.__s == v.state && (v.__s = c({}, v.__s)), c(v.__s, P.getDerivedStateFromProps(g, v.__s))), d = v.props, _ = v.state, h) null == P.getDerivedStateFromProps && null != v.componentWillMount && v.componentWillMount(), null != v.componentDidMount && v.__h.push(v.componentDidMount);else {\n        if (null == P.getDerivedStateFromProps && g !== d && null != v.componentWillReceiveProps && v.componentWillReceiveProps(g, x), !v.__e && null != v.shouldComponentUpdate && !1 === v.shouldComponentUpdate(g, v.__s, x) || u.__v === i.__v) {\n          v.props = g, v.state = v.__s, u.__v !== i.__v && (v.__d = !1), v.__v = u, u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function (n) {\n            n && (n.__ = u);\n          }), v.__h.length && f.push(v);\n          break n;\n        }\n\n        null != v.componentWillUpdate && v.componentWillUpdate(g, v.__s, x), null != v.componentDidUpdate && v.__h.push(function () {\n          v.componentDidUpdate(d, _, k);\n        });\n      }\n      v.context = x, v.props = g, v.state = v.__s, (a = n.__r) && a(u), v.__d = !1, v.__v = u, v.__P = l, a = v.render(v.props, v.state, v.context), v.state = v.__s, null != v.getChildContext && (t = c(c({}, t), v.getChildContext())), h || null == v.getSnapshotBeforeUpdate || (k = v.getSnapshotBeforeUpdate(d, _)), A = null != a && a.type === y && null == a.key ? a.props.children : a, m(l, Array.isArray(A) ? A : [A], u, i, t, o, r, f, e, s), v.base = u.__e, u.__h = null, v.__h.length && f.push(v), b && (v.__E = v.__ = null), v.__e = !1;\n    } else null == r && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = j(i.__e, u, i, t, o, r, f, s);\n\n    (a = n.diffed) && a(u);\n  } catch (l) {\n    u.__v = null, (s || null != r) && (u.__e = e, u.__h = !!s, r[r.indexOf(e)] = null), n.__e(l, u, i);\n  }\n}\n\nfunction T(l, u) {\n  n.__c && n.__c(u, l), l.some(function (u) {\n    try {\n      l = u.__h, u.__h = [], l.some(function (n) {\n        n.call(u);\n      });\n    } catch (l) {\n      n.__e(l, u.__v);\n    }\n  });\n}\n\nfunction j(n, l, u, i, t, o, e, c) {\n  var a,\n      v,\n      h,\n      y,\n      p = u.props,\n      d = l.props,\n      _ = l.type,\n      k = 0;\n  if (\"svg\" === _ && (t = !0), null != o) for (; k < o.length; k++) if ((a = o[k]) && (a === n || (_ ? a.localName == _ : 3 == a.nodeType))) {\n    n = a, o[k] = null;\n    break;\n  }\n\n  if (null == n) {\n    if (null === _) return document.createTextNode(d);\n    n = t ? document.createElementNS(\"http://www.w3.org/2000/svg\", _) : document.createElement(_, d.is && d), o = null, c = !1;\n  }\n\n  if (null === _) p === d || c && n.data === d || (n.data = d);else {\n    if (o = o && f.slice.call(n.childNodes), v = (p = u.props || r).dangerouslySetInnerHTML, h = d.dangerouslySetInnerHTML, !c) {\n      if (null != o) for (p = {}, y = 0; y < n.attributes.length; y++) p[n.attributes[y].name] = n.attributes[y].value;\n      (h || v) && (h && (v && h.__html == v.__html || h.__html === n.innerHTML) || (n.innerHTML = h && h.__html || \"\"));\n    }\n\n    if (A(n, d, p, t, c), h) l.__k = [];else if (k = l.props.children, m(n, Array.isArray(k) ? k : [k], l, u, i, t && \"foreignObject\" !== _, o, e, n.firstChild, c), null != o) for (k = o.length; k--;) null != o[k] && s(o[k]);\n    c || (\"value\" in d && void 0 !== (k = d.value) && (k !== n.value || \"progress\" === _ && !k) && C(n, \"value\", k, p.value, !1), \"checked\" in d && void 0 !== (k = d.checked) && k !== n.checked && C(n, \"checked\", k, p.checked, !1));\n  }\n  return n;\n}\n\nfunction z(l, u, i) {\n  try {\n    \"function\" == typeof l ? l(u) : l.current = u;\n  } catch (l) {\n    n.__e(l, i);\n  }\n}\n\nfunction L(l, u, i) {\n  var t, o, r;\n\n  if (n.unmount && n.unmount(l), (t = l.ref) && (t.current && t.current !== l.__e || z(t, null, u)), i || \"function\" == typeof l.type || (i = null != (o = l.__e)), l.__e = l.__d = void 0, null != (t = l.__c)) {\n    if (t.componentWillUnmount) try {\n      t.componentWillUnmount();\n    } catch (l) {\n      n.__e(l, u);\n    }\n    t.base = t.__P = null;\n  }\n\n  if (t = l.__k) for (r = 0; r < t.length; r++) t[r] && L(t[r], u, i);\n  null != o && s(o);\n}\n\nfunction M(n, l, u) {\n  return this.constructor(n, u);\n}\n\nfunction N(l, u, i) {\n  var t, o, e;\n  n.__ && n.__(l, u), o = (t = \"function\" == typeof i) ? null : i && i.__k || u.__k, e = [], I(u, l = (!t && i || u).__k = a(y, null, [l]), o || r, r, void 0 !== u.ownerSVGElement, !t && i ? [i] : o ? null : u.firstChild ? f.slice.call(u.childNodes) : null, e, !t && i ? i : o ? o.__e : u.firstChild, t), T(e, l);\n}\n\nfunction O(n, l) {\n  N(n, l, O);\n}\n\nfunction S(n, l, u) {\n  var i,\n      t,\n      o,\n      r = arguments,\n      f = c({}, n.props);\n\n  for (o in l) \"key\" == o ? i = l[o] : \"ref\" == o ? t = l[o] : f[o] = l[o];\n\n  if (arguments.length > 3) for (u = [u], o = 3; o < arguments.length; o++) u.push(r[o]);\n  return null != u && (f.children = u), v(n.type, f, i || n.key, t || n.ref, null);\n}\n\nfunction q(n, l) {\n  var u = {\n    __c: l = \"__cC\" + o++,\n    __: n,\n    Consumer: function (n, l) {\n      return n.children(l);\n    },\n    Provider: function (n) {\n      var u, i;\n      return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function () {\n        return i;\n      }, this.shouldComponentUpdate = function (n) {\n        this.props.value !== n.value && u.some(k);\n      }, this.sub = function (n) {\n        u.push(n);\n        var l = n.componentWillUnmount;\n\n        n.componentWillUnmount = function () {\n          u.splice(u.indexOf(n), 1), l && l.call(n);\n        };\n      }), n.children;\n    }\n  };\n  return u.Provider.__ = u.Consumer.contextType = u;\n}\n\nn = {\n  __e: function (n, l) {\n    for (var u, i, t; l = l.__;) if ((u = l.__c) && !u.__) try {\n      if ((i = u.constructor) && null != i.getDerivedStateFromError && (u.setState(i.getDerivedStateFromError(n)), t = u.__d), null != u.componentDidCatch && (u.componentDidCatch(n), t = u.__d), t) return u.__E = u;\n    } catch (l) {\n      n = l;\n    }\n\n    throw n;\n  },\n  __v: 0\n}, l = function (n) {\n  return null != n && void 0 === n.constructor;\n}, p.prototype.setState = function (n, l) {\n  var u;\n  u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = c({}, this.state), \"function\" == typeof n && (n = n(c({}, u), this.props)), n && c(u, n), null != n && this.__v && (l && this.__h.push(l), k(this));\n}, p.prototype.forceUpdate = function (n) {\n  this.__v && (this.__e = !0, n && this.__h.push(n), k(this));\n}, p.prototype.render = y, u = [], i = \"function\" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, b.__r = 0, o = 0;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb25zdGFudHMuanM/YzRmNSIsIndlYnBhY2s6Ly8vLi9vcHRpb25zLmpzP2M5ZmEiLCJ3ZWJwYWNrOi8vLy4vY3JlYXRlLWVsZW1lbnQuanM/ZTZmOCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnQuanM/MDNhZCIsIndlYnBhY2s6Ly8vLi9jcmVhdGUtY29udGV4dC5qcz83MzRhIiwid2VicGFjazovLy8uL3V0aWwuanM/OTQxNSIsIndlYnBhY2s6Ly8vLi9kaWZmL2NoaWxkcmVuLmpzPzU5NTUiLCJ3ZWJwYWNrOi8vLy4vZGlmZi9wcm9wcy5qcz9mZjI4Iiwid2VicGFjazovLy8uL2RpZmYvaW5kZXguanM/YjIwYiIsIndlYnBhY2s6Ly8vLi9yZW5kZXIuanM/YjdmMyIsIndlYnBhY2s6Ly8vLi9jbG9uZS1lbGVtZW50LmpzPzk4MzUiLCJ3ZWJwYWNrOi8vLy4vZGlmZi9jYXRjaC1lcnJvci5qcz80MmEwIl0sIm5hbWVzIjpbIm9wdGlvbnMiLCJpc1ZhbGlkRWxlbWVudCIsInJlcmVuZGVyUXVldWUiLCJkZWZlciIsInByZXZEZWJvdW5jZSIsImkiLCJFTVBUWV9PQkoiLCJFTVBUWV9BUlIiLCJJU19OT05fRElNRU5TSU9OQUwiLCJhc3NpZ24iLCJvYmoiLCJwcm9wcyIsInJlbW92ZU5vZGUiLCJub2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjaGlsZHJlbiIsImtleSIsInJlZiIsIm5vcm1hbGl6ZWRQcm9wcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInB1c2giLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJjcmVhdGVWTm9kZSIsIm9yaWdpbmFsIiwidm5vZGUiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZVJlZiIsImN1cnJlbnQiLCJGcmFnbWVudCIsIkNvbXBvbmVudCIsImNvbnRleHQiLCJnZXREb21TaWJsaW5nIiwiY2hpbGRJbmRleCIsImluZGV4T2YiLCJzaWJsaW5nIiwidXBkYXRlUGFyZW50RG9tUG9pbnRlcnMiLCJjaGlsZCIsImJhc2UiLCJlbnF1ZXVlUmVuZGVyIiwiYyIsInByb2Nlc3MiLCJkZWJvdW5jZVJlbmRlcmluZyIsInF1ZXVlIiwic29ydCIsImEiLCJiIiwic29tZSIsImNvbXBvbmVudCIsImNvbW1pdFF1ZXVlIiwib2xkVk5vZGUiLCJvbGREb20iLCJwYXJlbnREb20iLCJkaWZmIiwib3duZXJTVkdFbGVtZW50IiwiY29tbWl0Um9vdCIsImRpZmZDaGlsZHJlbiIsInJlbmRlclJlc3VsdCIsIm5ld1BhcmVudFZOb2RlIiwib2xkUGFyZW50Vk5vZGUiLCJnbG9iYWxDb250ZXh0IiwiaXNTdmciLCJleGNlc3NEb21DaGlsZHJlbiIsImlzSHlkcmF0aW5nIiwiaiIsImNoaWxkVk5vZGUiLCJuZXdEb20iLCJmaXJzdENoaWxkRG9tIiwicmVmcyIsIm9sZENoaWxkcmVuIiwib2xkQ2hpbGRyZW5MZW5ndGgiLCJBcnJheSIsImlzQXJyYXkiLCJyZW9yZGVyQ2hpbGRyZW4iLCJwbGFjZUNoaWxkIiwidmFsdWUiLCJ1bm1vdW50IiwiYXBwbHlSZWYiLCJ0bXAiLCJ0b0NoaWxkQXJyYXkiLCJvdXQiLCJuZXh0RG9tIiwic2liRG9tIiwib3V0ZXIiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZGlmZlByb3BzIiwiZG9tIiwibmV3UHJvcHMiLCJvbGRQcm9wcyIsImh5ZHJhdGUiLCJzZXRQcm9wZXJ0eSIsInNldFN0eWxlIiwic3R5bGUiLCJ0ZXN0IiwibmFtZSIsIm9sZFZhbHVlIiwidXNlQ2FwdHVyZSIsIm8iLCJjc3NUZXh0IiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwic2xpY2UiLCJfbGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50UHJveHlDYXB0dXJlIiwiZXZlbnRQcm94eSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCJuZXdWTm9kZSIsImlzTmV3Iiwib2xkU3RhdGUiLCJzbmFwc2hvdCIsImNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbiIsInByb3ZpZGVyIiwiY29tcG9uZW50Q29udGV4dCIsIm5ld1R5cGUiLCJjb250ZXh0VHlwZSIsInByb3RvdHlwZSIsInJlbmRlciIsImRvUmVuZGVyIiwic3ViIiwic3RhdGUiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJmb3JFYWNoIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImdldENoaWxkQ29udGV4dCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiZGlmZkVsZW1lbnROb2RlcyIsImRpZmZlZCIsInJvb3QiLCJjYiIsImNhbGwiLCJvbGRIdG1sIiwibmV3SHRtbCIsIm5vZGVUeXBlIiwibG9jYWxOYW1lIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsImlzIiwiZGF0YSIsImNoaWxkTm9kZXMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImF0dHJpYnV0ZXMiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiY2hlY2tlZCIsInBhcmVudFZOb2RlIiwic2tpcFJlbW92ZSIsInIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInRoaXMiLCJyZXBsYWNlTm9kZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjb250ZXh0SWQiLCJDb25zdW1lciIsImNvbnRleHRWYWx1ZSIsIlByb3ZpZGVyIiwic3VicyIsImN0eCIsIl9wcm9wcyIsIm9sZCIsInNwbGljZSIsImVycm9yIiwiY3RvciIsImhhbmRsZWQiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwidXBkYXRlIiwiY2FsbGJhY2siLCJzIiwiZm9yY2VVcGRhdGUiLCJQcm9taXNlIiwidGhlbiIsImJpbmQiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUNXREEsQ0RYQztBQUFBLElFa0dNQyxDRmxHTjtBQUFBLElHMEtIQyxDSDFLRztBQUFBLElHa0xEQyxDSGxMQztBQUFBLElHZ01IQyxDSGhNRztBQUFBLElJRUlDLENKRko7QUFBQSxJQUFNQyxJQUFZLEVBQWxCO0FBQUEsSUFDTUMsSUFBWSxFQURsQjtBQUFBLElBRU1DLElBQXFCLG1FQUYzQjs7QUtPQSxTQUFTQyxDQUFULENBQWdCQyxDQUFoQixFQUFxQkMsQ0FBckIsRUFBcUJBO0FBQUFBLE9BRXRCLElBQUlOLENBRmtCTSxJQUViQSxDQUZhQSxFQUVORCxFQUFJTCxDQUFKSyxJQUFTQyxFQUFNTixDQUFOTSxDQUFURDs7QUFBZUw7QUFVOUI7O0FBQUEsU0FBU08sQ0FBVCxDQUFvQkMsQ0FBcEIsRUFBb0JBO0FBQUFBLE1BQ3RCQyxJQUFhRCxFQUFLQyxVQURJRDtBQUV0QkMsT0FBWUEsRUFBV0MsV0FBWEQsQ0FBdUJELENBQXZCQyxDQUFaQTtBSFhMOztBQUFBLFNBQWdCRSxDQUFoQixDQUE4QkMsQ0FBOUIsRUFBb0NOLENBQXBDLEVBQTJDTyxDQUEzQyxFQUEyQ0E7QUFBM0MsTUFFRUMsQ0FGRjtBQUFBLE1BR0VDLENBSEY7QUFBQSxNQUlFZixDQUpGO0FBQUEsTUFJRUEsYUFKRjtBQUFBLE1BQ0tnQixJQUFrQixFQUR2Qjs7QUFDdUIsT0FJakJoQixDQUppQixJQUlaTSxDQUpZLEVBS1osU0FBTE4sQ0FBSyxHQUFPYyxJQUFNUixFQUFNTixDQUFOTSxDQUFiLEdBQ0ssU0FBTE4sQ0FBSyxHQUFPZSxJQUFNVCxFQUFNTixDQUFOTSxDQUFiLEdBQ1RVLEVBQWdCaEIsQ0FBaEJnQixJQUFxQlYsRUFBTU4sQ0FBTk0sQ0FGakI7O0FBRXVCTixNQUc3QmlCLFVBQVVDLE1B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Z0IsRUYvSmRGLEVFdUtBRyxJQUNhLHFCQUFYMEwsT0FBVyxHQUNmQSxRQUFRL0QsU0FBUitELENBQWtCQyxJQUFsQkQsQ0FBdUJFLElBQXZCRixDQUE0QkEsUUFBUUcsT0FBUkgsRUFBNUJBLENBRGUsR0FFZkksVUYxS0VqTSxFRXFOTjZDLFFBQXlCLENGck5uQjdDLEVHVEtLLElBQUksQ0hTVEwiLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC5tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRU1QVFlfT0JKID0ge307XG5leHBvcnQgY29uc3QgRU1QVFlfQVJSID0gW107XG5leHBvcnQgY29uc3QgSVNfTk9OX0RJTUVOU0lPTkFMID0gL2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtcbiIsImltcG9ydCB7IF9jYXRjaEVycm9yIH0gZnJvbSAnLi9kaWZmL2NhdGNoLWVycm9yJztcblxuLyoqXG4gKiBUaGUgYG9wdGlvbmAgb2JqZWN0IGNhbiBwb3RlbnRpYWxseSBjb250YWluIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICogdGhhdCBhcmUgY2FsbGVkIGR1cmluZyB2YXJpb3VzIHN0YWdlcyBvZiBvdXIgcmVuZGVyZXIuIFRoaXMgaXMgdGhlXG4gKiBmb3VuZGF0aW9uIG9uIHdoaWNoIGFsbCBvdXIgYWRkb25zIGxpa2UgYHByZWFjdC9kZWJ1Z2AsIGBwcmVhY3QvY29tcGF0YCxcbiAqIGFuZCBgcHJlYWN0L2hvb2tzYCBhcmUgYmFzZWQgb24uIFNlZSB0aGUgYE9wdGlvbnNgIHR5cGUgaW4gYGludGVybmFsLmQudHNgXG4gKiBmb3IgYSBmdWxsIGxpc3Qgb2YgYXZhaWxhYmxlIG9wdGlvbiBob29rcyAobW9zdCBlZGl0b3JzL0lERXMgYWxsb3cgeW91IHRvXG4gKiBjdHJsK2NsaWNrIG9yIGNtZCtjbGljayBvbiBtYWMgdGhlIHR5cGUgZGVmaW5pdGlvbiBiZWxvdykuXG4gKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuT3B0aW9uc31cbiAqL1xuY29uc3Qgb3B0aW9ucyA9IHtcblx0X2NhdGNoRXJyb3IsXG5cdF92bm9kZUlkOiAwXG59O1xuXG5leHBvcnQgZGVmYXVsdCBvcHRpb25zO1xuIiwiaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gdmlydHVhbCBub2RlICh1c2VkIGZvciBKU1gpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudFxuICogY29uc3RydWN0b3IgZm9yIHRoaXMgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGwgfCB1bmRlZmluZWR9IFtwcm9wc10gVGhlIHByb3BlcnRpZXMgb2YgdGhlIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4nKS5Db21wb25lbnRDaGlsZHJlbj59IFtjaGlsZHJlbl0gVGhlIGNoaWxkcmVuIG9mIHRoZSB2aXJ0dWFsIG5vZGVcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG5cdGxldCBub3JtYWxpemVkUHJvcHMgPSB7fSxcblx0XHRrZXksXG5cdFx0cmVmLFxuXHRcdGk7XG5cdGZvciAoaSBpbiBwcm9wcykge1xuXHRcdGlmIChpID09ICdrZXknKSBrZXkgPSBwcm9wc1tpXTtcblx0XHRlbHNlIGlmIChpID09ICdyZWYnKSByZWYgPSBwcm9wc1tpXTtcblx0XHRlbHNlIG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHByb3BzW2ldO1xuXHR9XG5cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzKSB7XG5cdFx0Y2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVhY3Rqcy9wcmVhY3QvaXNzdWVzLzE5MTZcblx0XHRmb3IgKGkgPSAzOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjaGlsZHJlbi5wdXNoKGFyZ3VtZW50c1tpXSk7XG5cdFx0fVxuXHR9XG5cdGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0bm9ybWFsaXplZFByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG5cdH1cblxuXHQvLyBJZiBhIENvbXBvbmVudCBWTm9kZSwgY2hlY2sgZm9yIGFuZCBhcHBseSBkZWZhdWx0UHJvcHNcblx0Ly8gTm90ZTogdHlwZSBtYXkgYmUgdW5kZWZpbmVkIGluIGRldmVsb3BtZW50LCBtdXN0IG5ldmVyIGVycm9yIGhlcmUuXG5cdGlmICh0eXBlb2YgdHlwZSA9PSAnZnVuY3Rpb24nICYmIHR5cGUuZGVmYXVsdFByb3BzICE9IG51bGwpIHtcblx0XHRmb3IgKGkgaW4gdHlwZS5kZWZhdWx0UHJvcHMpIHtcblx0XHRcdGlmIChub3JtYWxpemVkUHJvcHNbaV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRub3JtYWxpemVkUHJvcHNbaV0gPSB0eXBlLmRlZmF1bHRQcm9wc1tpXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbm9ybWFsaXplZFByb3BzLCBrZXksIHJlZiwgbnVsbCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgVk5vZGUgKHVzZWQgaW50ZXJuYWxseSBieSBQcmVhY3QpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudFxuICogQ29uc3RydWN0b3IgZm9yIHRoaXMgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdCB8IHN0cmluZyB8IG51bWJlciB8IG51bGx9IHByb3BzIFRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdmlydHVhbCBub2RlLlxuICogSWYgdGhpcyB2aXJ0dWFsIG5vZGUgcmVwcmVzZW50cyBhIHRleHQgbm9kZSwgdGhpcyBpcyB0aGUgdGV4dCBvZiB0aGUgbm9kZSAoc3RyaW5nIG9yIG51bWJlcikuXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IG51bGx9IGtleSBUaGUga2V5IGZvciB0aGlzIHZpcnR1YWwgbm9kZSwgdXNlZCB3aGVuXG4gKiBkaWZmaW5nIGl0IGFnYWluc3QgaXRzIGNoaWxkcmVuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1wicmVmXCJdfSByZWYgVGhlIHJlZiBwcm9wZXJ0eSB0aGF0IHdpbGxcbiAqIHJlY2VpdmUgYSByZWZlcmVuY2UgdG8gaXRzIGNyZWF0ZWQgY2hpbGRcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzLCBrZXksIHJlZiwgb3JpZ2luYWwpIHtcblx0Ly8gVjggc2VlbXMgdG8gYmUgYmV0dGVyIGF0IGRldGVjdGluZyB0eXBlIHNoYXBlcyBpZiB0aGUgb2JqZWN0IGlzIGFsbG9jYXRlZCBmcm9tIHRoZSBzYW1lIGNhbGwgc2l0ZVxuXHQvLyBEbyBub3QgaW5saW5lIGludG8gY3JlYXRlRWxlbWVudCBhbmQgY29lcmNlVG9WTm9kZSFcblx0Y29uc3Qgdm5vZGUgPSB7XG5cdFx0dHlwZSxcblx0XHRwcm9wcyxcblx0XHRrZXksXG5cdFx0cmVmLFxuXHRcdF9jaGlsZHJlbjogbnVsbCxcblx0XHRfcGFyZW50OiBudWxsLFxuXHRcdF9kZXB0aDogMCxcblx0XHRfZG9tOiBudWxsLFxuXHRcdC8vIF9uZXh0RG9tIG11c3QgYmUgaW5pdGlhbGl6ZWQgdG8gdW5kZWZpbmVkIGIvYyBpdCB3aWxsIGV2ZW50dWFsbHlcblx0XHQvLyBiZSBzZXQgdG8gZG9tLm5leHRTaWJsaW5nIHdoaWNoIGNhbiByZXR1cm4gYG51bGxgIGFuZCBpdCBpcyBpbXBvcnRhbnRcblx0XHQvLyB0byBiZSBhYmxlIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gYW4gdW5pbml0aWFsaXplZCBfbmV4dERvbSBhbmRcblx0XHQvLyBhIF9uZXh0RG9tIHRoYXQgaGFzIGJlZW4gc2V0IHRvIGBudWxsYFxuXHRcdF9uZXh0RG9tOiB1bmRlZmluZWQsXG5cdFx0X2NvbXBvbmVudDogbnVsbCxcblx0XHRfaHlkcmF0aW5nOiBudWxsLFxuXHRcdGNvbnN0cnVjdG9yOiB1bmRlZmluZWQsXG5cdFx0X29yaWdpbmFsOiBvcmlnaW5hbCA9PSBudWxsID8gKytvcHRpb25zLl92bm9kZUlkIDogb3JpZ2luYWxcblx0fTtcblxuXHRpZiAob3B0aW9ucy52bm9kZSAhPSBudWxsKSBvcHRpb25zLnZub2RlKHZub2RlKTtcblxuXHRyZXR1cm4gdm5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWYoKSB7XG5cdHJldHVybiB7IGN1cnJlbnQ6IG51bGwgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZyYWdtZW50KHByb3BzKSB7XG5cdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRoZSBhcmd1bWVudCBpcyBhIHZhbGlkIFByZWFjdCBWTm9kZS5cbiAqIEBwYXJhbSB7Kn0gdm5vZGVcbiAqIEByZXR1cm5zIHt2bm9kZSBpcyBpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVmFsaWRFbGVtZW50ID0gdm5vZGUgPT5cblx0dm5vZGUgIT0gbnVsbCAmJiB2bm9kZS5jb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IGRpZmYsIGNvbW1pdFJvb3QgfSBmcm9tICcuL2RpZmYvaW5kZXgnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5cbi8qKlxuICogQmFzZSBDb21wb25lbnQgY2xhc3MuIFByb3ZpZGVzIGBzZXRTdGF0ZSgpYCBhbmQgYGZvcmNlVXBkYXRlKClgLCB3aGljaFxuICogdHJpZ2dlciByZW5kZXJpbmdcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBUaGUgaW5pdGlhbCBjb21wb25lbnQgcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFRoZSBpbml0aWFsIGNvbnRleHQgZnJvbSBwYXJlbnQgY29tcG9uZW50cydcbiAqIGdldENoaWxkQ29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0KSB7XG5cdHRoaXMucHJvcHMgPSBwcm9wcztcblx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcbn1cblxuLyoqXG4gKiBVcGRhdGUgY29tcG9uZW50IHN0YXRlIGFuZCBzY2hlZHVsZSBhIHJlLXJlbmRlci5cbiAqIEB0aGlzIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9XG4gKiBAcGFyYW0ge29iamVjdCB8ICgoczogb2JqZWN0LCBwOiBvYmplY3QpID0+IG9iamVjdCl9IHVwZGF0ZSBBIGhhc2ggb2Ygc3RhdGVcbiAqIHByb3BlcnRpZXMgdG8gdXBkYXRlIHdpdGggbmV3IHZhbHVlcyBvciBhIGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gdGhlIGN1cnJlbnRcbiAqIHN0YXRlIGFuZCBwcm9wcyByZXR1cm5zIGEgbmV3IHBhcnRpYWwgc3RhdGVcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbmNlIGNvbXBvbmVudCBzdGF0ZSBpc1xuICogdXBkYXRlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24odXBkYXRlLCBjYWxsYmFjaykge1xuXHQvLyBvbmx5IGNsb25lIHN0YXRlIHdoZW4gY29weWluZyB0byBuZXh0U3RhdGUgdGhlIGZpcnN0IHRpbWUuXG5cdGxldCBzO1xuXHRpZiAodGhpcy5fbmV4dFN0YXRlICE9IG51bGwgJiYgdGhpcy5fbmV4dFN0YXRlICE9PSB0aGlzLnN0YXRlKSB7XG5cdFx0cyA9IHRoaXMuX25leHRTdGF0ZTtcblx0fSBlbHNlIHtcblx0XHRzID0gdGhpcy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgdXBkYXRlID09ICdmdW5jdGlvbicpIHtcblx0XHQvLyBTb21lIGxpYnJhcmllcyBsaWtlIGBpbW1lcmAgbWFyayB0aGUgY3VycmVudCBzdGF0ZSBhcyByZWFkb25seSxcblx0XHQvLyBwcmV2ZW50aW5nIHVzIGZyb20gbXV0YXRpbmcgaXQsIHNvIHdlIG5lZWQgdG8gY2xvbmUgaXQuIFNlZSAjMjcxNlxuXHRcdHVwZGF0ZSA9IHVwZGF0ZShhc3NpZ24oe30sIHMpLCB0aGlzLnByb3BzKTtcblx0fVxuXG5cdGlmICh1cGRhdGUpIHtcblx0XHRhc3NpZ24ocywgdXBkYXRlKTtcblx0fVxuXG5cdC8vIFNraXAgdXBkYXRlIGlmIHVwZGF0ZXIgZnVuY3Rpb24gcmV0dXJuZWQgbnVsbFxuXHRpZiAodXBkYXRlID09IG51bGwpIHJldHVybjtcblxuXHRpZiAodGhpcy5fdm5vZGUpIHtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEltbWVkaWF0ZWx5IHBlcmZvcm0gYSBzeW5jaHJvbm91cyByZS1yZW5kZXIgb2YgdGhlIGNvbXBvbmVudFxuICogQHRoaXMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH1cbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhZnRlciBjb21wb25lbnQgaXNcbiAqIHJlLXJlbmRlcmVkXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRpZiAodGhpcy5fdm5vZGUpIHtcblx0XHQvLyBTZXQgcmVuZGVyIG1vZGUgc28gdGhhdCB3ZSBjYW4gZGlmZmVyZW50aWF0ZSB3aGVyZSB0aGUgcmVuZGVyIHJlcXVlc3Rcblx0XHQvLyBpcyBjb21pbmcgZnJvbS4gV2UgbmVlZCB0aGlzIGJlY2F1c2UgZm9yY2VVcGRhdGUgc2hvdWxkIG5ldmVyIGNhbGxcblx0XHQvLyBzaG91bGRDb21wb25lbnRVcGRhdGVcblx0XHR0aGlzLl9mb3JjZSA9IHRydWU7XG5cdFx0aWYgKGNhbGxiYWNrKSB0aGlzLl9yZW5kZXJDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cdFx0ZW5xdWV1ZVJlbmRlcih0aGlzKTtcblx0fVxufTtcblxuLyoqXG4gKiBBY2NlcHRzIGBwcm9wc2AgYW5kIGBzdGF0ZWAsIGFuZCByZXR1cm5zIGEgbmV3IFZpcnR1YWwgRE9NIHRyZWUgdG8gYnVpbGQuXG4gKiBWaXJ0dWFsIERPTSBpcyBnZW5lcmFsbHkgY29uc3RydWN0ZWQgdmlhIFtKU1hdKGh0dHA6Ly9qYXNvbmZvcm1hdC5jb20vd3RmLWlzLWpzeCkuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgUHJvcHMgKGVnOiBKU1ggYXR0cmlidXRlcykgcmVjZWl2ZWQgZnJvbSBwYXJlbnRcbiAqIGVsZW1lbnQvY29tcG9uZW50XG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgVGhlIGNvbXBvbmVudCdzIGN1cnJlbnQgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IENvbnRleHQgb2JqZWN0LCBhcyByZXR1cm5lZCBieSB0aGUgbmVhcmVzdFxuICogYW5jZXN0b3IncyBgZ2V0Q2hpbGRDb250ZXh0KClgXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2luZGV4JykuQ29tcG9uZW50Q2hpbGRyZW4gfCB2b2lkfVxuICovXG5Db21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IEZyYWdtZW50O1xuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlXG4gKiBAcGFyYW0ge251bWJlciB8IG51bGx9IFtjaGlsZEluZGV4XVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RG9tU2libGluZyh2bm9kZSwgY2hpbGRJbmRleCkge1xuXHRpZiAoY2hpbGRJbmRleCA9PSBudWxsKSB7XG5cdFx0Ly8gVXNlIGNoaWxkSW5kZXg9PW51bGwgYXMgYSBzaWduYWwgdG8gcmVzdW1lIHRoZSBzZWFyY2ggZnJvbSB0aGUgdm5vZGUncyBzaWJsaW5nXG5cdFx0cmV0dXJuIHZub2RlLl9wYXJlbnRcblx0XHRcdD8gZ2V0RG9tU2libGluZyh2bm9kZS5fcGFyZW50LCB2bm9kZS5fcGFyZW50Ll9jaGlsZHJlbi5pbmRleE9mKHZub2RlKSArIDEpXG5cdFx0XHQ6IG51bGw7XG5cdH1cblxuXHRsZXQgc2libGluZztcblx0Zm9yICg7IGNoaWxkSW5kZXggPCB2bm9kZS5fY2hpbGRyZW4ubGVuZ3RoOyBjaGlsZEluZGV4KyspIHtcblx0XHRzaWJsaW5nID0gdm5vZGUuX2NoaWxkcmVuW2NoaWxkSW5kZXhdO1xuXG5cdFx0aWYgKHNpYmxpbmcgIT0gbnVsbCAmJiBzaWJsaW5nLl9kb20gIT0gbnVsbCkge1xuXHRcdFx0Ly8gU2luY2UgdXBkYXRlUGFyZW50RG9tUG9pbnRlcnMga2VlcHMgX2RvbSBwb2ludGVyIGNvcnJlY3QsXG5cdFx0XHQvLyB3ZSBjYW4gcmVseSBvbiBfZG9tIHRvIHRlbGwgdXMgaWYgdGhpcyBzdWJ0cmVlIGNvbnRhaW5zIGFcblx0XHRcdC8vIHJlbmRlcmVkIERPTSBub2RlLCBhbmQgd2hhdCB0aGUgZmlyc3QgcmVuZGVyZWQgRE9NIG5vZGUgaXNcblx0XHRcdHJldHVybiBzaWJsaW5nLl9kb207XG5cdFx0fVxuXHR9XG5cblx0Ly8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgbm90IGZvdW5kIGEgRE9NIG5vZGUgaW4gdGhpcyB2bm9kZSdzIGNoaWxkcmVuLlxuXHQvLyBXZSBtdXN0IHJlc3VtZSBmcm9tIHRoaXMgdm5vZGUncyBzaWJsaW5nIChpbiBpdCdzIHBhcmVudCBfY2hpbGRyZW4gYXJyYXkpXG5cdC8vIE9ubHkgY2xpbWIgdXAgYW5kIHNlYXJjaCB0aGUgcGFyZW50IGlmIHdlIGFyZW4ndCBzZWFyY2hpbmcgdGhyb3VnaCBhIERPTVxuXHQvLyBWTm9kZSAobWVhbmluZyB3ZSByZWFjaGVkIHRoZSBET00gcGFyZW50IG9mIHRoZSBvcmlnaW5hbCB2bm9kZSB0aGF0IGJlZ2FuXG5cdC8vIHRoZSBzZWFyY2gpXG5cdHJldHVybiB0eXBlb2Ygdm5vZGUudHlwZSA9PSAnZnVuY3Rpb24nID8gZ2V0RG9tU2libGluZyh2bm9kZSkgOiBudWxsO1xufVxuXG4vKipcbiAqIFRyaWdnZXIgaW4tcGxhY2UgcmUtcmVuZGVyaW5nIG9mIGEgY29tcG9uZW50LlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9IGNvbXBvbmVudCBUaGUgY29tcG9uZW50IHRvIHJlcmVuZGVyXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudChjb21wb25lbnQpIHtcblx0bGV0IHZub2RlID0gY29tcG9uZW50Ll92bm9kZSxcblx0XHRvbGREb20gPSB2bm9kZS5fZG9tLFxuXHRcdHBhcmVudERvbSA9IGNvbXBvbmVudC5fcGFyZW50RG9tO1xuXG5cdGlmIChwYXJlbnREb20pIHtcblx0XHRsZXQgY29tbWl0UXVldWUgPSBbXTtcblx0XHRjb25zdCBvbGRWTm9kZSA9IGFzc2lnbih7fSwgdm5vZGUpO1xuXHRcdG9sZFZOb2RlLl9vcmlnaW5hbCA9IHZub2RlLl9vcmlnaW5hbCArIDE7XG5cblx0XHRkaWZmKFxuXHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0dm5vZGUsXG5cdFx0XHRvbGRWTm9kZSxcblx0XHRcdGNvbXBvbmVudC5fZ2xvYmFsQ29udGV4dCxcblx0XHRcdHBhcmVudERvbS5vd25lclNWR0VsZW1lbnQgIT09IHVuZGVmaW5lZCxcblx0XHRcdHZub2RlLl9oeWRyYXRpbmcgIT0gbnVsbCA/IFtvbGREb21dIDogbnVsbCxcblx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0b2xkRG9tID09IG51bGwgPyBnZXREb21TaWJsaW5nKHZub2RlKSA6IG9sZERvbSxcblx0XHRcdHZub2RlLl9oeWRyYXRpbmdcblx0XHQpO1xuXHRcdGNvbW1pdFJvb3QoY29tbWl0UXVldWUsIHZub2RlKTtcblxuXHRcdGlmICh2bm9kZS5fZG9tICE9IG9sZERvbSkge1xuXHRcdFx0dXBkYXRlUGFyZW50RG9tUG9pbnRlcnModm5vZGUpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzKHZub2RlKSB7XG5cdGlmICgodm5vZGUgPSB2bm9kZS5fcGFyZW50KSAhPSBudWxsICYmIHZub2RlLl9jb21wb25lbnQgIT0gbnVsbCkge1xuXHRcdHZub2RlLl9kb20gPSB2bm9kZS5fY29tcG9uZW50LmJhc2UgPSBudWxsO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgY2hpbGQgPSB2bm9kZS5fY2hpbGRyZW5baV07XG5cdFx0XHRpZiAoY2hpbGQgIT0gbnVsbCAmJiBjaGlsZC5fZG9tICE9IG51bGwpIHtcblx0XHRcdFx0dm5vZGUuX2RvbSA9IHZub2RlLl9jb21wb25lbnQuYmFzZSA9IGNoaWxkLl9kb207XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB1cGRhdGVQYXJlbnREb21Qb2ludGVycyh2bm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgcmVuZGVyIHF1ZXVlXG4gKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Pn1cbiAqL1xubGV0IHJlcmVuZGVyUXVldWUgPSBbXTtcblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBzY2hlZHVsZSBhIGNhbGxiYWNrXG4gKiBAdHlwZSB7KGNiOiAoKSA9PiB2b2lkKSA9PiB2b2lkfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLy8gTm90ZSB0aGUgZm9sbG93aW5nIGxpbmUgaXNuJ3QgdHJlZS1zaGFrZW4gYnkgcm9sbHVwIGN1eiBvZiByb2xsdXAvcm9sbHVwIzI1NjZcbmNvbnN0IGRlZmVyID1cblx0dHlwZW9mIFByb21pc2UgPT0gJ2Z1bmN0aW9uJ1xuXHRcdD8gUHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXHRcdDogc2V0VGltZW91dDtcblxuLypcbiAqIFRoZSB2YWx1ZSBvZiBgQ29tcG9uZW50LmRlYm91bmNlYCBtdXN0IGFzeW5jaHJvbm91c2x5IGludm9rZSB0aGUgcGFzc2VkIGluIGNhbGxiYWNrLiBJdCBpc1xuICogaW1wb3J0YW50IHRoYXQgY29udHJpYnV0b3JzIHRvIFByZWFjdCBjYW4gY29uc2lzdGVudGx5IHJlYXNvbiBhYm91dCB3aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAsIGV0Yy5cbiAqIGRvLCBhbmQgd2hlbiB0aGVpciBlZmZlY3RzIHdpbGwgYmUgYXBwbGllZC4gU2VlIHRoZSBsaW5rcyBiZWxvdyBmb3Igc29tZSBmdXJ0aGVyIHJlYWRpbmcgb24gZGVzaWduaW5nXG4gKiBhc3luY2hyb25vdXMgQVBJcy5cbiAqICogW0Rlc2lnbmluZyBBUElzIGZvciBBc3luY2hyb255XShodHRwczovL2Jsb2cuaXpzLm1lLzIwMTMvMDgvZGVzaWduaW5nLWFwaXMtZm9yLWFzeW5jaHJvbnkpXG4gKiAqIFtDYWxsYmFja3Mgc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91c10oaHR0cHM6Ly9ibG9nLm9tZXRlci5jb20vMjAxMS8wNy8yNC9jYWxsYmFja3Mtc3luY2hyb25vdXMtYW5kLWFzeW5jaHJvbm91cy8pXG4gKi9cblxubGV0IHByZXZEZWJvdW5jZTtcblxuLyoqXG4gKiBFbnF1ZXVlIGEgcmVyZW5kZXIgb2YgYSBjb21wb25lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSBjIFRoZSBjb21wb25lbnQgdG8gcmVyZW5kZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVucXVldWVSZW5kZXIoYykge1xuXHRpZiAoXG5cdFx0KCFjLl9kaXJ0eSAmJlxuXHRcdFx0KGMuX2RpcnR5ID0gdHJ1ZSkgJiZcblx0XHRcdHJlcmVuZGVyUXVldWUucHVzaChjKSAmJlxuXHRcdFx0IXByb2Nlc3MuX3JlcmVuZGVyQ291bnQrKykgfHxcblx0XHRwcmV2RGVib3VuY2UgIT09IG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmdcblx0KSB7XG5cdFx0cHJldkRlYm91bmNlID0gb3B0aW9ucy5kZWJvdW5jZVJlbmRlcmluZztcblx0XHQocHJldkRlYm91bmNlIHx8IGRlZmVyKShwcm9jZXNzKTtcblx0fVxufVxuXG4vKiogRmx1c2ggdGhlIHJlbmRlciBxdWV1ZSBieSByZXJlbmRlcmluZyBhbGwgcXVldWVkIGNvbXBvbmVudHMgKi9cbmZ1bmN0aW9uIHByb2Nlc3MoKSB7XG5cdGxldCBxdWV1ZTtcblx0d2hpbGUgKChwcm9jZXNzLl9yZXJlbmRlckNvdW50ID0gcmVyZW5kZXJRdWV1ZS5sZW5ndGgpKSB7XG5cdFx0cXVldWUgPSByZXJlbmRlclF1ZXVlLnNvcnQoKGEsIGIpID0+IGEuX3Zub2RlLl9kZXB0aCAtIGIuX3Zub2RlLl9kZXB0aCk7XG5cdFx0cmVyZW5kZXJRdWV1ZSA9IFtdO1xuXHRcdC8vIERvbid0IHVwZGF0ZSBgcmVuZGVyQ291bnRgIHlldC4gS2VlcCBpdHMgdmFsdWUgbm9uLXplcm8gdG8gcHJldmVudCB1bm5lY2Vzc2FyeVxuXHRcdC8vIHByb2Nlc3MoKSBjYWxscyBmcm9tIGdldHRpbmcgc2NoZWR1bGVkIHdoaWxlIGBxdWV1ZWAgaXMgc3RpbGwgYmVpbmcgY29uc3VtZWQuXG5cdFx0cXVldWUuc29tZShjID0+IHtcblx0XHRcdGlmIChjLl9kaXJ0eSkgcmVuZGVyQ29tcG9uZW50KGMpO1xuXHRcdH0pO1xuXHR9XG59XG5wcm9jZXNzLl9yZXJlbmRlckNvdW50ID0gMDtcbiIsImltcG9ydCB7IGVucXVldWVSZW5kZXIgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBsZXQgaSA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY29udGV4dElkKSB7XG5cdGNvbnRleHRJZCA9ICdfX2NDJyArIGkrKztcblxuXHRjb25zdCBjb250ZXh0ID0ge1xuXHRcdF9pZDogY29udGV4dElkLFxuXHRcdF9kZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcblx0XHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkZ1bmN0aW9uQ29tcG9uZW50fSAqL1xuXHRcdENvbnN1bWVyKHByb3BzLCBjb250ZXh0VmFsdWUpIHtcblx0XHRcdC8vIHJldHVybiBwcm9wcy5jaGlsZHJlbihcblx0XHRcdC8vIFx0Y29udGV4dFtjb250ZXh0SWRdID8gY29udGV4dFtjb250ZXh0SWRdLnByb3BzLnZhbHVlIDogZGVmYXVsdFZhbHVlXG5cdFx0XHQvLyApO1xuXHRcdFx0cmV0dXJuIHByb3BzLmNoaWxkcmVuKGNvbnRleHRWYWx1ZSk7XG5cdFx0fSxcblx0XHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkZ1bmN0aW9uQ29tcG9uZW50fSAqL1xuXHRcdFByb3ZpZGVyKHByb3BzKSB7XG5cdFx0XHRpZiAoIXRoaXMuZ2V0Q2hpbGRDb250ZXh0KSB7XG5cdFx0XHRcdGxldCBzdWJzID0gW107XG5cdFx0XHRcdGxldCBjdHggPSB7fTtcblx0XHRcdFx0Y3R4W2NvbnRleHRJZF0gPSB0aGlzO1xuXG5cdFx0XHRcdHRoaXMuZ2V0Q2hpbGRDb250ZXh0ID0gKCkgPT4gY3R4O1xuXG5cdFx0XHRcdHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24oX3Byb3BzKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMucHJvcHMudmFsdWUgIT09IF9wcm9wcy52YWx1ZSkge1xuXHRcdFx0XHRcdFx0Ly8gSSB0aGluayB0aGUgZm9yY2VkIHZhbHVlIHByb3BhZ2F0aW9uIGhlcmUgd2FzIG9ubHkgbmVlZGVkIHdoZW4gYG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmdgIHdhcyBiZWluZyBieXBhc3NlZDpcblx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVhY3Rqcy9wcmVhY3QvY29tbWl0LzRkMzM5ZmI4MDNiZWEwOWU5ZjE5OGFiZjM4Y2ExYmY4ZWE0Yjc3NzEjZGlmZi01NDY4MmNlMzgwOTM1YTcxN2U0MWI4YmZjNTQ3MzdmNlIzNThcblx0XHRcdFx0XHRcdC8vIEluIHRob3NlIGNhc2VzIHRob3VnaCwgZXZlbiB3aXRoIHRoZSB2YWx1ZSBjb3JyZWN0ZWQsIHdlJ3JlIGRvdWJsZS1yZW5kZXJpbmcgYWxsIG5vZGVzLlxuXHRcdFx0XHRcdFx0Ly8gSXQgbWlnaHQgYmUgYmV0dGVyIHRvIGp1c3QgdGVsbCBmb2xrcyBub3QgdG8gdXNlIGZvcmNlLXN5bmMgbW9kZS5cblx0XHRcdFx0XHRcdC8vIEN1cnJlbnRseSwgdXNpbmcgYHVzZUNvbnRleHQoKWAgaW4gYSBjbGFzcyBjb21wb25lbnQgd2lsbCBvdmVyd3JpdGUgaXRzIGB0aGlzLmNvbnRleHRgIHZhbHVlLlxuXHRcdFx0XHRcdFx0Ly8gc3Vicy5zb21lKGMgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gXHRjLmNvbnRleHQgPSBfcHJvcHMudmFsdWU7XG5cdFx0XHRcdFx0XHQvLyBcdGVucXVldWVSZW5kZXIoYyk7XG5cdFx0XHRcdFx0XHQvLyB9KTtcblxuXHRcdFx0XHRcdFx0Ly8gc3Vicy5zb21lKGMgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gXHRjLmNvbnRleHRbY29udGV4dElkXSA9IF9wcm9wcy52YWx1ZTtcblx0XHRcdFx0XHRcdC8vIFx0ZW5xdWV1ZVJlbmRlcihjKTtcblx0XHRcdFx0XHRcdC8vIH0pO1xuXHRcdFx0XHRcdFx0c3Vicy5zb21lKGVucXVldWVSZW5kZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLnN1YiA9IGMgPT4ge1xuXHRcdFx0XHRcdHN1YnMucHVzaChjKTtcblx0XHRcdFx0XHRsZXQgb2xkID0gYy5jb21wb25lbnRXaWxsVW5tb3VudDtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gKCkgPT4ge1xuXHRcdFx0XHRcdFx0c3Vicy5zcGxpY2Uoc3Vicy5pbmRleE9mKGMpLCAxKTtcblx0XHRcdFx0XHRcdGlmIChvbGQpIG9sZC5jYWxsKGMpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcblx0XHR9XG5cdH07XG5cblx0Ly8gRGV2dG9vbHMgbmVlZHMgYWNjZXNzIHRvIHRoZSBjb250ZXh0IG9iamVjdCB3aGVuIGl0XG5cdC8vIGVuY291bnRlcnMgYSBQcm92aWRlci4gVGhpcyBpcyBuZWNlc3NhcnkgdG8gc3VwcG9ydFxuXHQvLyBzZXR0aW5nIGBkaXNwbGF5TmFtZWAgb24gdGhlIGNvbnRleHQgb2JqZWN0IGluc3RlYWRcblx0Ly8gb2Ygb24gdGhlIGNvbXBvbmVudCBpdHNlbGYuIFNlZTpcblx0Ly8gaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2NvbnRleHQuaHRtbCNjb250ZXh0ZGlzcGxheW5hbWVcblxuXHRyZXR1cm4gKGNvbnRleHQuUHJvdmlkZXIuX2NvbnRleHRSZWYgPSBjb250ZXh0LkNvbnN1bWVyLmNvbnRleHRUeXBlID0gY29udGV4dCk7XG59XG4iLCIvKipcbiAqIEFzc2lnbiBwcm9wZXJ0aWVzIGZyb20gYHByb3BzYCB0byBgb2JqYFxuICogQHRlbXBsYXRlIE8sIFAgVGhlIG9iaiBhbmQgcHJvcHMgdHlwZXNcbiAqIEBwYXJhbSB7T30gb2JqIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvXG4gKiBAcGFyYW0ge1B9IHByb3BzIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEByZXR1cm5zIHtPICYgUH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbihvYmosIHByb3BzKSB7XG5cdC8vIEB0cy1pZ25vcmUgV2UgY2hhbmdlIHRoZSB0eXBlIG9mIGBvYmpgIHRvIGJlIGBPICYgUGBcblx0Zm9yIChsZXQgaSBpbiBwcm9wcykgb2JqW2ldID0gcHJvcHNbaV07XG5cdHJldHVybiAvKiogQHR5cGUge08gJiBQfSAqLyAob2JqKTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYSBjaGlsZCBub2RlIGZyb20gaXRzIHBhcmVudCBpZiBhdHRhY2hlZC4gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yXG4gKiBJRTExIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydCBgRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlKClgLiBVc2luZyB0aGlzIGZ1bmN0aW9uXG4gKiBpcyBzbWFsbGVyIHRoYW4gaW5jbHVkaW5nIGEgZGVkaWNhdGVkIHBvbHlmaWxsLlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIHJlbW92ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG5cdGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuXHRpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbiIsImltcG9ydCB7IGRpZmYsIHVubW91bnQsIGFwcGx5UmVmIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBjcmVhdGVWTm9kZSwgRnJhZ21lbnQgfSBmcm9tICcuLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgeyBFTVBUWV9PQkosIEVNUFRZX0FSUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXREb21TaWJsaW5nIH0gZnJvbSAnLi4vY29tcG9uZW50JztcblxuLyoqXG4gKiBEaWZmIHRoZSBjaGlsZHJlbiBvZiBhIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBET00gZWxlbWVudCB3aG9zZVxuICogY2hpbGRyZW4gYXJlIGJlaW5nIGRpZmZlZFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuQ29tcG9uZW50Q2hpbGRyZW5bXX0gcmVuZGVyUmVzdWx0XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gbmV3UGFyZW50Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsXG4gKiBub2RlIHdob3NlIGNoaWxkcmVuIHNob3VsZCBiZSBkaWZmJ2VkIGFnYWluc3Qgb2xkUGFyZW50Vk5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBvbGRQYXJlbnRWTm9kZSBUaGUgb2xkIHZpcnR1YWxcbiAqIG5vZGUgd2hvc2UgY2hpbGRyZW4gc2hvdWxkIGJlIGRpZmYnZWQgYWdhaW5zdCBuZXdQYXJlbnRWTm9kZVxuICogQHBhcmFtIHtvYmplY3R9IGdsb2JhbENvbnRleHQgVGhlIGN1cnJlbnQgY29udGV4dCBvYmplY3QgLSBtb2RpZmllZCBieSBnZXRDaGlsZENvbnRleHRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBET00gbm9kZSBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudD59IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBvbGREb20gVGhlIGN1cnJlbnQgYXR0YWNoZWQgRE9NXG4gKiBlbGVtZW50IGFueSBuZXcgZG9tIGVsZW1lbnRzIHNob3VsZCBiZSBwbGFjZWQgYXJvdW5kLiBMaWtlbHkgYG51bGxgIG9uIGZpcnN0XG4gKiByZW5kZXIgKGV4Y2VwdCB3aGVuIGh5ZHJhdGluZykuIENhbiBiZSBhIHNpYmxpbmcgRE9NIGVsZW1lbnQgd2hlbiBkaWZmaW5nXG4gKiBGcmFnbWVudHMgdGhhdCBoYXZlIHNpYmxpbmdzLiBJbiBtb3N0IGNhc2VzLCBpdCBzdGFydHMgb3V0IGFzIGBvbGRDaGlsZHJlblswXS5fZG9tYC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNIeWRyYXRpbmcgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZkNoaWxkcmVuKFxuXHRwYXJlbnREb20sXG5cdHJlbmRlclJlc3VsdCxcblx0bmV3UGFyZW50Vk5vZGUsXG5cdG9sZFBhcmVudFZOb2RlLFxuXHRnbG9iYWxDb250ZXh0LFxuXHRpc1N2Zyxcblx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdGNvbW1pdFF1ZXVlLFxuXHRvbGREb20sXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IGksIGosIG9sZFZOb2RlLCBjaGlsZFZOb2RlLCBuZXdEb20sIGZpcnN0Q2hpbGREb20sIHJlZnM7XG5cblx0Ly8gVGhpcyBpcyBhIGNvbXByZXNzaW9uIG9mIG9sZFBhcmVudFZOb2RlIT1udWxsICYmIG9sZFBhcmVudFZOb2RlICE9IEVNUFRZX09CSiAmJiBvbGRQYXJlbnRWTm9kZS5fY2hpbGRyZW4gfHwgRU1QVFlfQVJSXG5cdC8vIGFzIEVNUFRZX09CSi5fY2hpbGRyZW4gc2hvdWxkIGJlIGB1bmRlZmluZWRgLlxuXHRsZXQgb2xkQ2hpbGRyZW4gPSAob2xkUGFyZW50Vk5vZGUgJiYgb2xkUGFyZW50Vk5vZGUuX2NoaWxkcmVuKSB8fCBFTVBUWV9BUlI7XG5cblx0bGV0IG9sZENoaWxkcmVuTGVuZ3RoID0gb2xkQ2hpbGRyZW4ubGVuZ3RoO1xuXG5cdG5ld1BhcmVudFZOb2RlLl9jaGlsZHJlbiA9IFtdO1xuXHRmb3IgKGkgPSAwOyBpIDwgcmVuZGVyUmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2hpbGRWTm9kZSA9IHJlbmRlclJlc3VsdFtpXTtcblxuXHRcdGlmIChjaGlsZFZOb2RlID09IG51bGwgfHwgdHlwZW9mIGNoaWxkVk5vZGUgPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gbnVsbDtcblx0XHR9XG5cdFx0Ly8gSWYgdGhpcyBuZXdWTm9kZSBpcyBiZWluZyByZXVzZWQgKGUuZy4gPGRpdj57cmV1c2V9e3JldXNlfTwvZGl2PikgaW4gdGhlIHNhbWUgZGlmZixcblx0XHQvLyBvciB3ZSBhcmUgcmVuZGVyaW5nIGEgY29tcG9uZW50IChlLmcuIHNldFN0YXRlKSBjb3B5IHRoZSBvbGRWTm9kZXMgc28gaXQgY2FuIGhhdmVcblx0XHQvLyBpdCdzIG93biBET00gJiBldGMuIHBvaW50ZXJzXG5cdFx0ZWxzZSBpZiAoXG5cdFx0XHR0eXBlb2YgY2hpbGRWTm9kZSA9PSAnc3RyaW5nJyB8fFxuXHRcdFx0dHlwZW9mIGNoaWxkVk5vZGUgPT0gJ251bWJlcicgfHxcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2YWxpZC10eXBlb2Zcblx0XHRcdHR5cGVvZiBjaGlsZFZOb2RlID09ICdiaWdpbnQnXG5cdFx0KSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY3JlYXRlVk5vZGUoXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdGNoaWxkVk5vZGUsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdGNoaWxkVk5vZGVcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNoaWxkVk5vZGUpKSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY3JlYXRlVk5vZGUoXG5cdFx0XHRcdEZyYWdtZW50LFxuXHRcdFx0XHR7IGNoaWxkcmVuOiBjaGlsZFZOb2RlIH0sXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChjaGlsZFZOb2RlLl9kZXB0aCA+IDApIHtcblx0XHRcdC8vIFZOb2RlIGlzIGFscmVhZHkgaW4gdXNlLCBjbG9uZSBpdC4gVGhpcyBjYW4gaGFwcGVuIGluIHRoZSBmb2xsb3dpbmdcblx0XHRcdC8vIHNjZW5hcmlvOlxuXHRcdFx0Ly8gICBjb25zdCByZXVzZSA9IDxkaXYgLz5cblx0XHRcdC8vICAgPGRpdj57cmV1c2V9PHNwYW4gLz57cmV1c2V9PC9kaXY+XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY3JlYXRlVk5vZGUoXG5cdFx0XHRcdGNoaWxkVk5vZGUudHlwZSxcblx0XHRcdFx0Y2hpbGRWTm9kZS5wcm9wcyxcblx0XHRcdFx0Y2hpbGRWTm9kZS5rZXksXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdGNoaWxkVk5vZGUuX29yaWdpbmFsXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY2hpbGRWTm9kZTtcblx0XHR9XG5cblx0XHQvLyBUZXJzZXIgcmVtb3ZlcyB0aGUgYGNvbnRpbnVlYCBoZXJlIGFuZCB3cmFwcyB0aGUgbG9vcCBib2R5XG5cdFx0Ly8gaW4gYSBgaWYgKGNoaWxkVk5vZGUpIHsgLi4uIH0gY29uZGl0aW9uXG5cdFx0aWYgKGNoaWxkVk5vZGUgPT0gbnVsbCkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y2hpbGRWTm9kZS5fcGFyZW50ID0gbmV3UGFyZW50Vk5vZGU7XG5cdFx0Y2hpbGRWTm9kZS5fZGVwdGggPSBuZXdQYXJlbnRWTm9kZS5fZGVwdGggKyAxO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UgZmluZCBhIGNvcnJlc3BvbmRpbmcgZWxlbWVudCBpbiBvbGRDaGlsZHJlbi5cblx0XHQvLyBJZiBmb3VuZCwgZGVsZXRlIHRoZSBhcnJheSBpdGVtIGJ5IHNldHRpbmcgdG8gYHVuZGVmaW5lZGAuXG5cdFx0Ly8gV2UgdXNlIGB1bmRlZmluZWRgLCBhcyBgbnVsbGAgaXMgcmVzZXJ2ZWQgZm9yIGVtcHR5IHBsYWNlaG9sZGVyc1xuXHRcdC8vIChob2xlcykuXG5cdFx0b2xkVk5vZGUgPSBvbGRDaGlsZHJlbltpXTtcblxuXHRcdGlmIChcblx0XHRcdG9sZFZOb2RlID09PSBudWxsIHx8XG5cdFx0XHQob2xkVk5vZGUgJiZcblx0XHRcdFx0Y2hpbGRWTm9kZS5rZXkgPT0gb2xkVk5vZGUua2V5ICYmXG5cdFx0XHRcdGNoaWxkVk5vZGUudHlwZSA9PT0gb2xkVk5vZGUudHlwZSlcblx0XHQpIHtcblx0XHRcdG9sZENoaWxkcmVuW2ldID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBFaXRoZXIgb2xkVk5vZGUgPT09IHVuZGVmaW5lZCBvciBvbGRDaGlsZHJlbkxlbmd0aCA+IDAsXG5cdFx0XHQvLyBzbyBhZnRlciB0aGlzIGxvb3Agb2xkVk5vZGUgPT0gbnVsbCBvciBvbGRWTm9kZSBpcyBhIHZhbGlkIHZhbHVlLlxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IG9sZENoaWxkcmVuTGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0b2xkVk5vZGUgPSBvbGRDaGlsZHJlbltqXTtcblx0XHRcdFx0Ly8gSWYgY2hpbGRWTm9kZSBpcyB1bmtleWVkLCB3ZSBvbmx5IG1hdGNoIHNpbWlsYXJseSB1bmtleWVkIG5vZGVzLCBvdGhlcndpc2Ugd2UgbWF0Y2ggYnkga2V5LlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgbWF0Y2ggYnkgdHlwZSAoaW4gZWl0aGVyIGNhc2UpLlxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0b2xkVk5vZGUgJiZcblx0XHRcdFx0XHRjaGlsZFZOb2RlLmtleSA9PSBvbGRWTm9kZS5rZXkgJiZcblx0XHRcdFx0XHRjaGlsZFZOb2RlLnR5cGUgPT09IG9sZFZOb2RlLnR5cGVcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0b2xkQ2hpbGRyZW5bal0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0b2xkVk5vZGUgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9sZFZOb2RlID0gb2xkVk5vZGUgfHwgRU1QVFlfT0JKO1xuXG5cdFx0Ly8gTW9ycGggdGhlIG9sZCBlbGVtZW50IGludG8gdGhlIG5ldyBvbmUsIGJ1dCBkb24ndCBhcHBlbmQgaXQgdG8gdGhlIGRvbSB5ZXRcblx0XHRkaWZmKFxuXHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0Y2hpbGRWTm9kZSxcblx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdGlzU3ZnLFxuXHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdG9sZERvbSxcblx0XHRcdGlzSHlkcmF0aW5nXG5cdFx0KTtcblxuXHRcdG5ld0RvbSA9IGNoaWxkVk5vZGUuX2RvbTtcblxuXHRcdGlmICgoaiA9IGNoaWxkVk5vZGUucmVmKSAmJiBvbGRWTm9kZS5yZWYgIT0gaikge1xuXHRcdFx0aWYgKCFyZWZzKSByZWZzID0gW107XG5cdFx0XHRpZiAob2xkVk5vZGUucmVmKSByZWZzLnB1c2gob2xkVk5vZGUucmVmLCBudWxsLCBjaGlsZFZOb2RlKTtcblx0XHRcdHJlZnMucHVzaChqLCBjaGlsZFZOb2RlLl9jb21wb25lbnQgfHwgbmV3RG9tLCBjaGlsZFZOb2RlKTtcblx0XHR9XG5cblx0XHRpZiAobmV3RG9tICE9IG51bGwpIHtcblx0XHRcdGlmIChmaXJzdENoaWxkRG9tID09IG51bGwpIHtcblx0XHRcdFx0Zmlyc3RDaGlsZERvbSA9IG5ld0RvbTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKFxuXHRcdFx0XHR0eXBlb2YgY2hpbGRWTm9kZS50eXBlID09ICdmdW5jdGlvbicgJiZcblx0XHRcdFx0Y2hpbGRWTm9kZS5fY2hpbGRyZW4gIT0gbnVsbCAmJiAvLyBDYW4gYmUgbnVsbCBpZiBjaGlsZFZOb2RlIHN1c3BlbmRlZFxuXHRcdFx0XHRjaGlsZFZOb2RlLl9jaGlsZHJlbiA9PT0gb2xkVk5vZGUuX2NoaWxkcmVuXG5cdFx0XHQpIHtcblx0XHRcdFx0Y2hpbGRWTm9kZS5fbmV4dERvbSA9IG9sZERvbSA9IHJlb3JkZXJDaGlsZHJlbihcblx0XHRcdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0XHRcdG9sZERvbSxcblx0XHRcdFx0XHRwYXJlbnREb21cblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9sZERvbSA9IHBsYWNlQ2hpbGQoXG5cdFx0XHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0XHRcdGNoaWxkVk5vZGUsXG5cdFx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdFx0b2xkQ2hpbGRyZW4sXG5cdFx0XHRcdFx0bmV3RG9tLFxuXHRcdFx0XHRcdG9sZERvbVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCcm93c2VycyB3aWxsIGluZmVyIGFuIG9wdGlvbidzIGB2YWx1ZWAgZnJvbSBgdGV4dENvbnRlbnRgIHdoZW5cblx0XHRcdC8vIG5vIHZhbHVlIGlzIHByZXNlbnQuIFRoaXMgZXNzZW50aWFsbHkgYnlwYXNzZXMgb3VyIGNvZGUgdG8gc2V0IGl0XG5cdFx0XHQvLyBsYXRlciBpbiBgZGlmZigpYC4gSXQgd29ya3MgZmluZSBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IGZvciBJRTExXG5cdFx0XHQvLyB3aGVyZSBpdCBicmVha3Mgc2V0dGluZyBgc2VsZWN0LnZhbHVlYC4gVGhlcmUgaXQgd2lsbCBiZSBhbHdheXMgc2V0XG5cdFx0XHQvLyB0byBhbiBlbXB0eSBzdHJpbmcuIFJlLWFwcGx5aW5nIGFuIG9wdGlvbnMgdmFsdWUgd2lsbCBmaXggdGhhdCwgc29cblx0XHRcdC8vIHRoZXJlIGFyZSBwcm9iYWJseSBzb21lIGludGVybmFsIGRhdGEgc3RydWN0dXJlcyB0aGF0IGFyZW4ndFxuXHRcdFx0Ly8gdXBkYXRlZCBwcm9wZXJseS5cblx0XHRcdC8vXG5cdFx0XHQvLyBUbyBmaXggaXQgd2UgbWFrZSBzdXJlIHRvIHJlc2V0IHRoZSBpbmZlcnJlZCB2YWx1ZSwgc28gdGhhdCBvdXIgb3duXG5cdFx0XHQvLyB2YWx1ZSBjaGVjayBpbiBgZGlmZigpYCB3b24ndCBiZSBza2lwcGVkLlxuXHRcdFx0aWYgKCFpc0h5ZHJhdGluZyAmJiBuZXdQYXJlbnRWTm9kZS50eXBlID09PSAnb3B0aW9uJykge1xuXHRcdFx0XHQvLyBAdHMtaWdub3JlIFdlIGhhdmUgdmFsaWRhdGVkIHRoYXQgdGhlIHR5cGUgb2YgcGFyZW50RE9NIGlzICdvcHRpb24nXG5cdFx0XHRcdC8vIGluIHRoZSBhYm92ZSBjaGVja1xuXHRcdFx0XHRwYXJlbnREb20udmFsdWUgPSAnJztcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIG5ld1BhcmVudFZOb2RlLnR5cGUgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHQvLyBCZWNhdXNlIHRoZSBuZXdQYXJlbnRWTm9kZSBpcyBGcmFnbWVudC1saWtlLCB3ZSBuZWVkIHRvIHNldCBpdCdzXG5cdFx0XHRcdC8vIF9uZXh0RG9tIHByb3BlcnR5IHRvIHRoZSBuZXh0U2libGluZyBvZiBpdHMgbGFzdCBjaGlsZCBET00gbm9kZS5cblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gYG9sZERvbWAgY29udGFpbnMgdGhlIGNvcnJlY3QgdmFsdWUgaGVyZSBiZWNhdXNlIGlmIHRoZSBsYXN0IGNoaWxkXG5cdFx0XHRcdC8vIGlzIGEgRnJhZ21lbnQtbGlrZSwgdGhlbiBvbGREb20gaGFzIGFscmVhZHkgYmVlbiBzZXQgdG8gdGhhdCBjaGlsZCdzIF9uZXh0RG9tLlxuXHRcdFx0XHQvLyBJZiB0aGUgbGFzdCBjaGlsZCBpcyBhIERPTSBWTm9kZSwgdGhlbiBvbGREb20gd2lsbCBiZSBzZXQgdG8gdGhhdCBET01cblx0XHRcdFx0Ly8gbm9kZSdzIG5leHRTaWJsaW5nLlxuXHRcdFx0XHRuZXdQYXJlbnRWTm9kZS5fbmV4dERvbSA9IG9sZERvbTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0b2xkRG9tICYmXG5cdFx0XHRvbGRWTm9kZS5fZG9tID09IG9sZERvbSAmJlxuXHRcdFx0b2xkRG9tLnBhcmVudE5vZGUgIT0gcGFyZW50RG9tXG5cdFx0KSB7XG5cdFx0XHQvLyBUaGUgYWJvdmUgY29uZGl0aW9uIGlzIHRvIGhhbmRsZSBudWxsIHBsYWNlaG9sZGVycy4gU2VlIHRlc3QgaW4gcGxhY2Vob2xkZXIudGVzdC5qczpcblx0XHRcdC8vIGBlZmZpY2llbnRseSByZXBsYWNlIG51bGwgcGxhY2Vob2xkZXJzIGluIHBhcmVudCByZXJlbmRlcnNgXG5cdFx0XHRvbGREb20gPSBnZXREb21TaWJsaW5nKG9sZFZOb2RlKTtcblx0XHR9XG5cdH1cblxuXHRuZXdQYXJlbnRWTm9kZS5fZG9tID0gZmlyc3RDaGlsZERvbTtcblxuXHQvLyBSZW1vdmUgcmVtYWluaW5nIG9sZENoaWxkcmVuIGlmIHRoZXJlIGFyZSBhbnkuXG5cdGZvciAoaSA9IG9sZENoaWxkcmVuTGVuZ3RoOyBpLS07ICkge1xuXHRcdGlmIChvbGRDaGlsZHJlbltpXSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHR5cGVvZiBuZXdQYXJlbnRWTm9kZS50eXBlID09ICdmdW5jdGlvbicgJiZcblx0XHRcdFx0b2xkQ2hpbGRyZW5baV0uX2RvbSAhPSBudWxsICYmXG5cdFx0XHRcdG9sZENoaWxkcmVuW2ldLl9kb20gPT0gbmV3UGFyZW50Vk5vZGUuX25leHREb21cblx0XHRcdCkge1xuXHRcdFx0XHQvLyBJZiB0aGUgbmV3UGFyZW50Vk5vZGUuX19uZXh0RG9tIHBvaW50cyB0byBhIGRvbSBub2RlIHRoYXQgaXMgYWJvdXQgdG9cblx0XHRcdFx0Ly8gYmUgdW5tb3VudGVkLCB0aGVuIGdldCB0aGUgbmV4dCBzaWJsaW5nIG9mIHRoYXQgdm5vZGUgYW5kIHNldFxuXHRcdFx0XHQvLyBfbmV4dERvbSB0byBpdFxuXHRcdFx0XHRuZXdQYXJlbnRWTm9kZS5fbmV4dERvbSA9IGdldERvbVNpYmxpbmcob2xkUGFyZW50Vk5vZGUsIGkgKyAxKTtcblx0XHRcdH1cblxuXHRcdFx0dW5tb3VudChvbGRDaGlsZHJlbltpXSwgb2xkQ2hpbGRyZW5baV0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIFNldCByZWZzIG9ubHkgYWZ0ZXIgdW5tb3VudFxuXHRpZiAocmVmcykge1xuXHRcdGZvciAoaSA9IDA7IGkgPCByZWZzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRhcHBseVJlZihyZWZzW2ldLCByZWZzWysraV0sIHJlZnNbKytpXSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHJlb3JkZXJDaGlsZHJlbihjaGlsZFZOb2RlLCBvbGREb20sIHBhcmVudERvbSkge1xuXHRmb3IgKGxldCB0bXAgPSAwOyB0bXAgPCBjaGlsZFZOb2RlLl9jaGlsZHJlbi5sZW5ndGg7IHRtcCsrKSB7XG5cdFx0bGV0IHZub2RlID0gY2hpbGRWTm9kZS5fY2hpbGRyZW5bdG1wXTtcblx0XHRpZiAodm5vZGUpIHtcblx0XHRcdC8vIFdlIHR5cGljYWxseSBlbnRlciB0aGlzIGNvZGUgcGF0aCBvbiBzQ1UgYmFpbG91dCwgd2hlcmUgd2UgY29weVxuXHRcdFx0Ly8gb2xkVk5vZGUuX2NoaWxkcmVuIHRvIG5ld1ZOb2RlLl9jaGlsZHJlbi4gSWYgdGhhdCBpcyB0aGUgY2FzZSwgd2UgbmVlZFxuXHRcdFx0Ly8gdG8gdXBkYXRlIHRoZSBvbGQgY2hpbGRyZW4ncyBfcGFyZW50IHBvaW50ZXIgdG8gcG9pbnQgdG8gdGhlIG5ld1ZOb2RlXG5cdFx0XHQvLyAoY2hpbGRWTm9kZSBoZXJlKS5cblx0XHRcdHZub2RlLl9wYXJlbnQgPSBjaGlsZFZOb2RlO1xuXG5cdFx0XHRpZiAodHlwZW9mIHZub2RlLnR5cGUgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRvbGREb20gPSByZW9yZGVyQ2hpbGRyZW4odm5vZGUsIG9sZERvbSwgcGFyZW50RG9tKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9sZERvbSA9IHBsYWNlQ2hpbGQoXG5cdFx0XHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0XHRcdHZub2RlLFxuXHRcdFx0XHRcdHZub2RlLFxuXHRcdFx0XHRcdGNoaWxkVk5vZGUuX2NoaWxkcmVuLFxuXHRcdFx0XHRcdHZub2RlLl9kb20sXG5cdFx0XHRcdFx0b2xkRG9tXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9sZERvbTtcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGFuZCBsb29wIHRocm91Z2ggdGhlIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbn0gY2hpbGRyZW4gVGhlIHVuZmxhdHRlbmVkXG4gKiBjaGlsZHJlbiBvZiBhIHZpcnR1YWwgbm9kZVxuICogQHJldHVybnMge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9DaGlsZEFycmF5KGNoaWxkcmVuLCBvdXQpIHtcblx0b3V0ID0gb3V0IHx8IFtdO1xuXHRpZiAoY2hpbGRyZW4gPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGRyZW4gPT0gJ2Jvb2xlYW4nKSB7XG5cdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcblx0XHRjaGlsZHJlbi5zb21lKGNoaWxkID0+IHtcblx0XHRcdHRvQ2hpbGRBcnJheShjaGlsZCwgb3V0KTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvdXQucHVzaChjaGlsZHJlbik7XG5cdH1cblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcGxhY2VDaGlsZChcblx0cGFyZW50RG9tLFxuXHRjaGlsZFZOb2RlLFxuXHRvbGRWTm9kZSxcblx0b2xkQ2hpbGRyZW4sXG5cdG5ld0RvbSxcblx0b2xkRG9tXG4pIHtcblx0bGV0IG5leHREb207XG5cdGlmIChjaGlsZFZOb2RlLl9uZXh0RG9tICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyBPbmx5IEZyYWdtZW50cyBvciBjb21wb25lbnRzIHRoYXQgcmV0dXJuIEZyYWdtZW50IGxpa2UgVk5vZGVzIHdpbGxcblx0XHQvLyBoYXZlIGEgbm9uLXVuZGVmaW5lZCBfbmV4dERvbS4gQ29udGludWUgdGhlIGRpZmYgZnJvbSB0aGUgc2libGluZ1xuXHRcdC8vIG9mIGxhc3QgRE9NIGNoaWxkIG9mIHRoaXMgY2hpbGQgVk5vZGVcblx0XHRuZXh0RG9tID0gY2hpbGRWTm9kZS5fbmV4dERvbTtcblxuXHRcdC8vIEVhZ2VybHkgY2xlYW51cCBfbmV4dERvbS4gV2UgZG9uJ3QgbmVlZCB0byBwZXJzaXN0IHRoZSB2YWx1ZSBiZWNhdXNlXG5cdFx0Ly8gaXQgaXMgb25seSB1c2VkIGJ5IGBkaWZmQ2hpbGRyZW5gIHRvIGRldGVybWluZSB3aGVyZSB0byByZXN1bWUgdGhlIGRpZmYgYWZ0ZXJcblx0XHQvLyBkaWZmaW5nIENvbXBvbmVudHMgYW5kIEZyYWdtZW50cy4gT25jZSB3ZSBzdG9yZSBpdCB0aGUgbmV4dERPTSBsb2NhbCB2YXIsIHdlXG5cdFx0Ly8gY2FuIGNsZWFuIHVwIHRoZSBwcm9wZXJ0eVxuXHRcdGNoaWxkVk5vZGUuX25leHREb20gPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoXG5cdFx0b2xkVk5vZGUgPT0gbnVsbCB8fFxuXHRcdG5ld0RvbSAhPSBvbGREb20gfHxcblx0XHRuZXdEb20ucGFyZW50Tm9kZSA9PSBudWxsXG5cdCkge1xuXHRcdG91dGVyOiBpZiAob2xkRG9tID09IG51bGwgfHwgb2xkRG9tLnBhcmVudE5vZGUgIT09IHBhcmVudERvbSkge1xuXHRcdFx0cGFyZW50RG9tLmFwcGVuZENoaWxkKG5ld0RvbSk7XG5cdFx0XHRuZXh0RG9tID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gYGo8b2xkQ2hpbGRyZW5MZW5ndGg7IGorPTJgIGlzIGFuIGFsdGVybmF0aXZlIHRvIGBqKys8b2xkQ2hpbGRyZW5MZW5ndGgvMmBcblx0XHRcdGZvciAoXG5cdFx0XHRcdGxldCBzaWJEb20gPSBvbGREb20sIGogPSAwO1xuXHRcdFx0XHQoc2liRG9tID0gc2liRG9tLm5leHRTaWJsaW5nKSAmJiBqIDwgb2xkQ2hpbGRyZW4ubGVuZ3RoO1xuXHRcdFx0XHRqICs9IDJcblx0XHRcdCkge1xuXHRcdFx0XHRpZiAoc2liRG9tID09IG5ld0RvbSkge1xuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRwYXJlbnREb20uaW5zZXJ0QmVmb3JlKG5ld0RvbSwgb2xkRG9tKTtcblx0XHRcdG5leHREb20gPSBvbGREb207XG5cdFx0fVxuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBwcmUtY2FsY3VsYXRlZCB0aGUgbmV4dERPTSBub2RlLCB1c2UgaXQuIEVsc2UgY2FsY3VsYXRlIGl0IG5vd1xuXHQvLyBTdHJpY3RseSBjaGVjayBmb3IgYHVuZGVmaW5lZGAgaGVyZSBjdXogYG51bGxgIGlzIGEgdmFsaWQgdmFsdWUgb2YgYG5leHREb21gLlxuXHQvLyBTZWUgbW9yZSBkZXRhaWwgaW4gY3JlYXRlLWVsZW1lbnQuanM6Y3JlYXRlVk5vZGVcblx0aWYgKG5leHREb20gIT09IHVuZGVmaW5lZCkge1xuXHRcdG9sZERvbSA9IG5leHREb207XG5cdH0gZWxzZSB7XG5cdFx0b2xkRG9tID0gbmV3RG9tLm5leHRTaWJsaW5nO1xuXHR9XG5cblx0cmV0dXJuIG9sZERvbTtcbn1cbiIsImltcG9ydCB7IElTX05PTl9ESU1FTlNJT05BTCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuLi9vcHRpb25zJztcblxuLyoqXG4gKiBEaWZmIHRoZSBvbGQgYW5kIG5ldyBwcm9wZXJ0aWVzIG9mIGEgVk5vZGUgYW5kIGFwcGx5IGNoYW5nZXMgdG8gdGhlIERPTSBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBkb20gVGhlIERPTSBub2RlIHRvIGFwcGx5XG4gKiBjaGFuZ2VzIHRvXG4gKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHMgVGhlIG5ldyBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IG9sZFByb3BzIFRoZSBvbGQgcHJvcHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGh5ZHJhdGUgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvbiBtb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmUHJvcHMoZG9tLCBuZXdQcm9wcywgb2xkUHJvcHMsIGlzU3ZnLCBoeWRyYXRlKSB7XG5cdGxldCBpO1xuXG5cdGZvciAoaSBpbiBvbGRQcm9wcykge1xuXHRcdGlmIChpICE9PSAnY2hpbGRyZW4nICYmIGkgIT09ICdrZXknICYmICEoaSBpbiBuZXdQcm9wcykpIHtcblx0XHRcdHNldFByb3BlcnR5KGRvbSwgaSwgbnVsbCwgb2xkUHJvcHNbaV0sIGlzU3ZnKTtcblx0XHR9XG5cdH1cblxuXHRmb3IgKGkgaW4gbmV3UHJvcHMpIHtcblx0XHRpZiAoXG5cdFx0XHQoIWh5ZHJhdGUgfHwgdHlwZW9mIG5ld1Byb3BzW2ldID09ICdmdW5jdGlvbicpICYmXG5cdFx0XHRpICE9PSAnY2hpbGRyZW4nICYmXG5cdFx0XHRpICE9PSAna2V5JyAmJlxuXHRcdFx0aSAhPT0gJ3ZhbHVlJyAmJlxuXHRcdFx0aSAhPT0gJ2NoZWNrZWQnICYmXG5cdFx0XHRvbGRQcm9wc1tpXSAhPT0gbmV3UHJvcHNbaV1cblx0XHQpIHtcblx0XHRcdHNldFByb3BlcnR5KGRvbSwgaSwgbmV3UHJvcHNbaV0sIG9sZFByb3BzW2ldLCBpc1N2Zyk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBrZXksIHZhbHVlKSB7XG5cdGlmIChrZXlbMF0gPT09ICctJykge1xuXHRcdHN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuXHR9IGVsc2UgaWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRzdHlsZVtrZXldID0gJyc7XG5cdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9ICdudW1iZXInIHx8IElTX05PTl9ESU1FTlNJT05BTC50ZXN0KGtleSkpIHtcblx0XHRzdHlsZVtrZXldID0gdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGVba2V5XSA9IHZhbHVlICsgJ3B4Jztcblx0fVxufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IHZhbHVlIG9uIGEgRE9NIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIG5vZGUgdG8gbW9kaWZ5XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0XG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgdGhlIHByb3BlcnR5IHRvXG4gKiBAcGFyYW0geyp9IG9sZFZhbHVlIFRoZSBvbGQgdmFsdWUgdGhlIHByb3BlcnR5IGhhZFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlIG9yIG5vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UHJvcGVydHkoZG9tLCBuYW1lLCB2YWx1ZSwgb2xkVmFsdWUsIGlzU3ZnKSB7XG5cdGxldCB1c2VDYXB0dXJlO1xuXG5cdG86IGlmIChuYW1lID09PSAnc3R5bGUnKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuXHRcdFx0ZG9tLnN0eWxlLmNzc1RleHQgPSB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBvbGRWYWx1ZSA9PSAnc3RyaW5nJykge1xuXHRcdFx0XHRkb20uc3R5bGUuY3NzVGV4dCA9IG9sZFZhbHVlID0gJyc7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvbGRWYWx1ZSkge1xuXHRcdFx0XHRmb3IgKG5hbWUgaW4gb2xkVmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoISh2YWx1ZSAmJiBuYW1lIGluIHZhbHVlKSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUoZG9tLnN0eWxlLCBuYW1lLCAnJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0XHRmb3IgKG5hbWUgaW4gdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIW9sZFZhbHVlIHx8IHZhbHVlW25hbWVdICE9PSBvbGRWYWx1ZVtuYW1lXSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUoZG9tLnN0eWxlLCBuYW1lLCB2YWx1ZVtuYW1lXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdC8vIEJlbmNobWFyayBmb3IgY29tcGFyaXNvbjogaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81NzRjOTU0YmRiOTY1YjlhMDA5NjVhYzZcblx0ZWxzZSBpZiAobmFtZVswXSA9PT0gJ28nICYmIG5hbWVbMV0gPT09ICduJykge1xuXHRcdHVzZUNhcHR1cmUgPSBuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvQ2FwdHVyZSQvLCAnJykpO1xuXG5cdFx0Ly8gSW5mZXIgY29ycmVjdCBjYXNpbmcgZm9yIERPTSBidWlsdC1pbiBldmVudHM6XG5cdFx0aWYgKG5hbWUudG9Mb3dlckNhc2UoKSBpbiBkb20pIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik7XG5cdFx0ZWxzZSBuYW1lID0gbmFtZS5zbGljZSgyKTtcblxuXHRcdGlmICghZG9tLl9saXN0ZW5lcnMpIGRvbS5fbGlzdGVuZXJzID0ge307XG5cdFx0ZG9tLl9saXN0ZW5lcnNbbmFtZSArIHVzZUNhcHR1cmVdID0gdmFsdWU7XG5cblx0XHRpZiAodmFsdWUpIHtcblx0XHRcdGlmICghb2xkVmFsdWUpIHtcblx0XHRcdFx0Y29uc3QgaGFuZGxlciA9IHVzZUNhcHR1cmUgPyBldmVudFByb3h5Q2FwdHVyZSA6IGV2ZW50UHJveHk7XG5cdFx0XHRcdGRvbS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBoYW5kbGVyID0gdXNlQ2FwdHVyZSA/IGV2ZW50UHJveHlDYXB0dXJlIDogZXZlbnRQcm94eTtcblx0XHRcdGRvbS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lICE9PSAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnKSB7XG5cdFx0aWYgKGlzU3ZnKSB7XG5cdFx0XHQvLyBOb3JtYWxpemUgaW5jb3JyZWN0IHByb3AgdXNhZ2UgZm9yIFNWRzpcblx0XHRcdC8vIC0geGxpbms6aHJlZiAvIHhsaW5rSHJlZiAtLT4gaHJlZiAoeGxpbms6aHJlZiB3YXMgcmVtb3ZlZCBmcm9tIFNWRyBhbmQgaXNuJ3QgbmVlZGVkKVxuXHRcdFx0Ly8gLSBjbGFzc05hbWUgLS0+IGNsYXNzXG5cdFx0XHRuYW1lID0gbmFtZS5yZXBsYWNlKC94bGlua1tIOmhdLywgJ2gnKS5yZXBsYWNlKC9zTmFtZSQvLCAncycpO1xuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRuYW1lICE9PSAnaHJlZicgJiZcblx0XHRcdG5hbWUgIT09ICdsaXN0JyAmJlxuXHRcdFx0bmFtZSAhPT0gJ2Zvcm0nICYmXG5cdFx0XHQvLyBEZWZhdWx0IHZhbHVlIGluIGJyb3dzZXJzIGlzIGAtMWAgYW5kIGFuIGVtcHR5IHN0cmluZyBpc1xuXHRcdFx0Ly8gY2FzdCB0byBgMGAgaW5zdGVhZFxuXHRcdFx0bmFtZSAhPT0gJ3RhYkluZGV4JyAmJlxuXHRcdFx0bmFtZSAhPT0gJ2Rvd25sb2FkJyAmJlxuXHRcdFx0bmFtZSBpbiBkb21cblx0XHQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRvbVtuYW1lXSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuXHRcdFx0XHQvLyBsYWJlbGxlZCBicmVhayBpcyAxYiBzbWFsbGVyIGhlcmUgdGhhbiBhIHJldHVybiBzdGF0ZW1lbnQgKHNvcnJ5KVxuXHRcdFx0XHRicmVhayBvO1xuXHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cblx0XHQvLyBBUklBLWF0dHJpYnV0ZXMgaGF2ZSBhIGRpZmZlcmVudCBub3Rpb24gb2YgYm9vbGVhbiB2YWx1ZXMuXG5cdFx0Ly8gVGhlIHZhbHVlIGBmYWxzZWAgaXMgZGlmZmVyZW50IGZyb20gdGhlIGF0dHJpYnV0ZSBub3Rcblx0XHQvLyBleGlzdGluZyBvbiB0aGUgRE9NLCBzbyB3ZSBjYW4ndCByZW1vdmUgaXQuIEZvciBub24tYm9vbGVhblxuXHRcdC8vIEFSSUEtYXR0cmlidXRlcyB3ZSBjb3VsZCB0cmVhdCBmYWxzZSBhcyBhIHJlbW92YWwsIGJ1dCB0aGVcblx0XHQvLyBhbW91bnQgb2YgZXhjZXB0aW9ucyB3b3VsZCBjb3N0IHVzIHRvbyBtYW55IGJ5dGVzLiBPbiB0b3Agb2Zcblx0XHQvLyB0aGF0IG90aGVyIFZET00gZnJhbWV3b3JrcyBhbHNvIGFsd2F5cyBzdHJpbmdpZnkgYGZhbHNlYC5cblxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdC8vIG5ldmVyIHNlcmlhbGl6ZSBmdW5jdGlvbnMgYXMgYXR0cmlidXRlIHZhbHVlc1xuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHR2YWx1ZSAhPSBudWxsICYmXG5cdFx0XHQodmFsdWUgIT09IGZhbHNlIHx8IChuYW1lWzBdID09PSAnYScgJiYgbmFtZVsxXSA9PT0gJ3InKSlcblx0XHQpIHtcblx0XHRcdGRvbS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb20ucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIFByb3h5IGFuIGV2ZW50IHRvIGhvb2tlZCBldmVudCBoYW5kbGVyc1xuICogQHBhcmFtIHtFdmVudH0gZSBUaGUgZXZlbnQgb2JqZWN0IGZyb20gdGhlIGJyb3dzZXJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGV2ZW50UHJveHkoZSkge1xuXHR0aGlzLl9saXN0ZW5lcnNbZS50eXBlICsgZmFsc2VdKG9wdGlvbnMuZXZlbnQgPyBvcHRpb25zLmV2ZW50KGUpIDogZSk7XG59XG5cbmZ1bmN0aW9uIGV2ZW50UHJveHlDYXB0dXJlKGUpIHtcblx0dGhpcy5fbGlzdGVuZXJzW2UudHlwZSArIHRydWVdKG9wdGlvbnMuZXZlbnQgPyBvcHRpb25zLmV2ZW50KGUpIDogZSk7XG59XG4iLCJpbXBvcnQgeyBFTVBUWV9PQkosIEVNUFRZX0FSUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICcuLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgeyBkaWZmQ2hpbGRyZW4gfSBmcm9tICcuL2NoaWxkcmVuJztcbmltcG9ydCB7IGRpZmZQcm9wcywgc2V0UHJvcGVydHkgfSBmcm9tICcuL3Byb3BzJztcbmltcG9ydCB7IGFzc2lnbiwgcmVtb3ZlTm9kZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi4vb3B0aW9ucyc7XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyBhbmQgYXBwbHkgcHJvcGVyIGNoYW5nZXMgdG8gdGhlIERPTVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBwYXJlbnQgb2YgdGhlIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gbmV3Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBvbGRWTm9kZSBUaGUgb2xkIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IGdsb2JhbENvbnRleHQgVGhlIGN1cnJlbnQgY29udGV4dCBvYmplY3QuIE1vZGlmaWVkIGJ5IGdldENoaWxkQ29udGV4dFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIGVsZW1lbnQgaXMgYW4gU1ZHIG5vZGVcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnQ+fSBleGNlc3NEb21DaGlsZHJlblxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuQ29tcG9uZW50Pn0gY29tbWl0UXVldWUgTGlzdCBvZiBjb21wb25lbnRzXG4gKiB3aGljaCBoYXZlIGNhbGxiYWNrcyB0byBpbnZva2UgaW4gY29tbWl0Um9vdFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gb2xkRG9tIFRoZSBjdXJyZW50IGF0dGFjaGVkIERPTVxuICogZWxlbWVudCBhbnkgbmV3IGRvbSBlbGVtZW50cyBzaG91bGQgYmUgcGxhY2VkIGFyb3VuZC4gTGlrZWx5IGBudWxsYCBvbiBmaXJzdFxuICogcmVuZGVyIChleGNlcHQgd2hlbiBoeWRyYXRpbmcpLiBDYW4gYmUgYSBzaWJsaW5nIERPTSBlbGVtZW50IHdoZW4gZGlmZmluZ1xuICogRnJhZ21lbnRzIHRoYXQgaGF2ZSBzaWJsaW5ncy4gSW4gbW9zdCBjYXNlcywgaXQgc3RhcnRzIG91dCBhcyBgb2xkQ2hpbGRyZW5bMF0uX2RvbWAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0h5ZHJhdGluZ10gV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZihcblx0cGFyZW50RG9tLFxuXHRuZXdWTm9kZSxcblx0b2xkVk5vZGUsXG5cdGdsb2JhbENvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdG9sZERvbSxcblx0aXNIeWRyYXRpbmdcbikge1xuXHRsZXQgdG1wLFxuXHRcdG5ld1R5cGUgPSBuZXdWTm9kZS50eXBlO1xuXG5cdC8vIFdoZW4gcGFzc2luZyB0aHJvdWdoIGNyZWF0ZUVsZW1lbnQgaXQgYXNzaWducyB0aGUgb2JqZWN0XG5cdC8vIGNvbnN0cnVjdG9yIGFzIHVuZGVmaW5lZC4gVGhpcyB0byBwcmV2ZW50IEpTT04taW5qZWN0aW9uLlxuXHRpZiAobmV3Vk5vZGUuY29uc3RydWN0b3IgIT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG5cblx0Ly8gSWYgdGhlIHByZXZpb3VzIGRpZmYgYmFpbGVkIG91dCwgcmVzdW1lIGNyZWF0aW5nL2h5ZHJhdGluZy5cblx0aWYgKG9sZFZOb2RlLl9oeWRyYXRpbmcgIT0gbnVsbCkge1xuXHRcdGlzSHlkcmF0aW5nID0gb2xkVk5vZGUuX2h5ZHJhdGluZztcblx0XHRvbGREb20gPSBuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHQvLyBpZiB3ZSByZXN1bWUsIHdlIHdhbnQgdGhlIHRyZWUgdG8gYmUgXCJ1bmxvY2tlZFwiXG5cdFx0bmV3Vk5vZGUuX2h5ZHJhdGluZyA9IG51bGw7XG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPSBbb2xkRG9tXTtcblx0fVxuXG5cdGlmICgodG1wID0gb3B0aW9ucy5fZGlmZikpIHRtcChuZXdWTm9kZSk7XG5cblx0dHJ5IHtcblx0XHRvdXRlcjogaWYgKHR5cGVvZiBuZXdUeXBlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdGxldCBjLCBpc05ldywgb2xkUHJvcHMsIG9sZFN0YXRlLCBzbmFwc2hvdCwgY2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uO1xuXHRcdFx0bGV0IG5ld1Byb3BzID0gbmV3Vk5vZGUucHJvcHM7XG5cblx0XHRcdC8vIE5lY2Vzc2FyeSBmb3IgY3JlYXRlQ29udGV4dCBhcGkuIFNldHRpbmcgdGhpcyBwcm9wZXJ0eSB3aWxsIHBhc3Ncblx0XHRcdC8vIHRoZSBjb250ZXh0IHZhbHVlIGFzIGB0aGlzLmNvbnRleHRgIGp1c3QgZm9yIHRoaXMgY29tcG9uZW50LlxuXHRcdFx0dG1wID0gbmV3VHlwZS5jb250ZXh0VHlwZTtcblx0XHRcdGxldCBwcm92aWRlciA9IHRtcCAmJiBnbG9iYWxDb250ZXh0W3RtcC5faWRdO1xuXHRcdFx0bGV0IGNvbXBvbmVudENvbnRleHQgPSB0bXBcblx0XHRcdFx0PyBwcm92aWRlclxuXHRcdFx0XHRcdD8gcHJvdmlkZXIucHJvcHMudmFsdWVcblx0XHRcdFx0XHQ6IHRtcC5fZGVmYXVsdFZhbHVlXG5cdFx0XHRcdDogZ2xvYmFsQ29udGV4dDtcblxuXHRcdFx0Ly8gR2V0IGNvbXBvbmVudCBhbmQgc2V0IGl0IHRvIGBjYFxuXHRcdFx0aWYgKG9sZFZOb2RlLl9jb21wb25lbnQpIHtcblx0XHRcdFx0YyA9IG5ld1ZOb2RlLl9jb21wb25lbnQgPSBvbGRWTm9kZS5fY29tcG9uZW50O1xuXHRcdFx0XHRjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24gPSBjLl9wcm9jZXNzaW5nRXhjZXB0aW9uID0gYy5fcGVuZGluZ0Vycm9yO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSW5zdGFudGlhdGUgdGhlIG5ldyBjb21wb25lbnRcblx0XHRcdFx0aWYgKCdwcm90b3R5cGUnIGluIG5ld1R5cGUgJiYgbmV3VHlwZS5wcm90b3R5cGUucmVuZGVyKSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZSBUaGUgY2hlY2sgYWJvdmUgdmVyaWZpZXMgdGhhdCBuZXdUeXBlIGlzIHN1cHBvc2UgdG8gYmUgY29uc3RydWN0ZWRcblx0XHRcdFx0XHRuZXdWTm9kZS5fY29tcG9uZW50ID0gYyA9IG5ldyBuZXdUeXBlKG5ld1Byb3BzLCBjb21wb25lbnRDb250ZXh0KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZSBUcnVzdCBtZSwgQ29tcG9uZW50IGltcGxlbWVudHMgdGhlIGludGVyZmFjZSB3ZSB3YW50XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NvbXBvbmVudCA9IGMgPSBuZXcgQ29tcG9uZW50KG5ld1Byb3BzLCBjb21wb25lbnRDb250ZXh0KTtcblx0XHRcdFx0XHRjLmNvbnN0cnVjdG9yID0gbmV3VHlwZTtcblx0XHRcdFx0XHRjLnJlbmRlciA9IGRvUmVuZGVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwcm92aWRlcikgcHJvdmlkZXIuc3ViKGMpO1xuXG5cdFx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdFx0aWYgKCFjLnN0YXRlKSBjLnN0YXRlID0ge307XG5cdFx0XHRcdGMuY29udGV4dCA9IGNvbXBvbmVudENvbnRleHQ7XG5cdFx0XHRcdGMuX2dsb2JhbENvbnRleHQgPSBnbG9iYWxDb250ZXh0O1xuXHRcdFx0XHRpc05ldyA9IGMuX2RpcnR5ID0gdHJ1ZTtcblx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHR9XG5cblx0XHRcdC8vIEludm9rZSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcblx0XHRcdGlmIChjLl9uZXh0U3RhdGUgPT0gbnVsbCkge1xuXHRcdFx0XHRjLl9uZXh0U3RhdGUgPSBjLnN0YXRlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKGMuX25leHRTdGF0ZSA9PSBjLnN0YXRlKSB7XG5cdFx0XHRcdFx0Yy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCBjLl9uZXh0U3RhdGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXNzaWduKFxuXHRcdFx0XHRcdGMuX25leHRTdGF0ZSxcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXdQcm9wcywgYy5fbmV4dFN0YXRlKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRvbGRQcm9wcyA9IGMucHJvcHM7XG5cdFx0XHRvbGRTdGF0ZSA9IGMuc3RhdGU7XG5cblx0XHRcdC8vIEludm9rZSBwcmUtcmVuZGVyIGxpZmVjeWNsZSBtZXRob2RzXG5cdFx0XHRpZiAoaXNOZXcpIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09IG51bGwgJiZcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxNb3VudCAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbE1vdW50KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYy5jb21wb25lbnREaWRNb3VudCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goYy5jb21wb25lbnREaWRNb3VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PSBudWxsICYmXG5cdFx0XHRcdFx0bmV3UHJvcHMgIT09IG9sZFByb3BzICYmXG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICE9IG51bGxcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBjb21wb25lbnRDb250ZXh0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQoIWMuX2ZvcmNlICYmXG5cdFx0XHRcdFx0XHRjLnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPSBudWxsICYmXG5cdFx0XHRcdFx0XHRjLnNob3VsZENvbXBvbmVudFVwZGF0ZShcblx0XHRcdFx0XHRcdFx0bmV3UHJvcHMsXG5cdFx0XHRcdFx0XHRcdGMuX25leHRTdGF0ZSxcblx0XHRcdFx0XHRcdFx0Y29tcG9uZW50Q29udGV4dFxuXHRcdFx0XHRcdFx0KSA9PT0gZmFsc2UpIHx8XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX29yaWdpbmFsID09PSBvbGRWTm9kZS5fb3JpZ2luYWxcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0XHRcdGMuc3RhdGUgPSBjLl9uZXh0U3RhdGU7XG5cdFx0XHRcdFx0Ly8gTW9yZSBpbmZvIGFib3V0IHRoaXMgaGVyZTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm92aURlQ3Jvb2NrL2JlYzVmMmNlOTM1NDRkMmU2MDcwZWY4ZTAwMzZlNGU4XG5cdFx0XHRcdFx0aWYgKG5ld1ZOb2RlLl9vcmlnaW5hbCAhPT0gb2xkVk5vZGUuX29yaWdpbmFsKSBjLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0XHRcdGMuX3Zub2RlID0gbmV3Vk5vZGU7XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2RvbSA9IG9sZFZOb2RlLl9kb207XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NoaWxkcmVuID0gb2xkVk5vZGUuX2NoaWxkcmVuO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbi5mb3JFYWNoKHZub2RlID0+IHtcblx0XHRcdFx0XHRcdGlmICh2bm9kZSkgdm5vZGUuX3BhcmVudCA9IG5ld1ZOb2RlO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGlmIChjLl9yZW5kZXJDYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRjb21taXRRdWV1ZS5wdXNoKGMpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50V2lsbFVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsVXBkYXRlKG5ld1Byb3BzLCBjLl9uZXh0U3RhdGUsIGNvbXBvbmVudENvbnRleHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50RGlkVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MucHVzaCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRjLmNvbXBvbmVudERpZFVwZGF0ZShvbGRQcm9wcywgb2xkU3RhdGUsIHNuYXBzaG90KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjLmNvbnRleHQgPSBjb21wb25lbnRDb250ZXh0O1xuXHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblxuXHRcdFx0aWYgKCh0bXAgPSBvcHRpb25zLl9yZW5kZXIpKSB0bXAobmV3Vk5vZGUpO1xuXG5cdFx0XHRjLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0Yy5fdm5vZGUgPSBuZXdWTm9kZTtcblx0XHRcdGMuX3BhcmVudERvbSA9IHBhcmVudERvbTtcblxuXHRcdFx0dG1wID0gYy5yZW5kZXIoYy5wcm9wcywgYy5zdGF0ZSwgYy5jb250ZXh0KTtcblxuXHRcdFx0Ly8gSGFuZGxlIHNldFN0YXRlIGNhbGxlZCBpbiByZW5kZXIsIHNlZSAjMjU1M1xuXHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblxuXHRcdFx0aWYgKGMuZ2V0Q2hpbGRDb250ZXh0ICE9IG51bGwpIHtcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCA9IGFzc2lnbihhc3NpZ24oe30sIGdsb2JhbENvbnRleHQpLCBjLmdldENoaWxkQ29udGV4dCgpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFpc05ldyAmJiBjLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0c25hcHNob3QgPSBjLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKG9sZFByb3BzLCBvbGRTdGF0ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBpc1RvcExldmVsRnJhZ21lbnQgPVxuXHRcdFx0XHR0bXAgIT0gbnVsbCAmJiB0bXAudHlwZSA9PT0gRnJhZ21lbnQgJiYgdG1wLmtleSA9PSBudWxsO1xuXHRcdFx0bGV0IHJlbmRlclJlc3VsdCA9IGlzVG9wTGV2ZWxGcmFnbWVudCA/IHRtcC5wcm9wcy5jaGlsZHJlbiA6IHRtcDtcblxuXHRcdFx0ZGlmZkNoaWxkcmVuKFxuXHRcdFx0XHRwYXJlbnREb20sXG5cdFx0XHRcdEFycmF5LmlzQXJyYXkocmVuZGVyUmVzdWx0KSA/IHJlbmRlclJlc3VsdCA6IFtyZW5kZXJSZXN1bHRdLFxuXHRcdFx0XHRuZXdWTm9kZSxcblx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdGdsb2JhbENvbnRleHQsXG5cdFx0XHRcdGlzU3ZnLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdG9sZERvbSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cblx0XHRcdGMuYmFzZSA9IG5ld1ZOb2RlLl9kb207XG5cblx0XHRcdC8vIFdlIHN1Y2Nlc3NmdWxseSByZW5kZXJlZCB0aGlzIFZOb2RlLCB1bnNldCBhbnkgc3RvcmVkIGh5ZHJhdGlvbi9iYWlsb3V0IHN0YXRlOlxuXHRcdFx0bmV3Vk5vZGUuX2h5ZHJhdGluZyA9IG51bGw7XG5cblx0XHRcdGlmIChjLl9yZW5kZXJDYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbW1pdFF1ZXVlLnB1c2goYyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24pIHtcblx0XHRcdFx0Yy5fcGVuZGluZ0Vycm9yID0gYy5fcHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGMuX2ZvcmNlID0gZmFsc2U7XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID09IG51bGwgJiZcblx0XHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9PT0gb2xkVk5vZGUuX29yaWdpbmFsXG5cdFx0KSB7XG5cdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBvbGRWTm9kZS5fY2hpbGRyZW47XG5cdFx0XHRuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV3Vk5vZGUuX2RvbSA9IGRpZmZFbGVtZW50Tm9kZXMoXG5cdFx0XHRcdG9sZFZOb2RlLl9kb20sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCh0bXAgPSBvcHRpb25zLmRpZmZlZCkpIHRtcChuZXdWTm9kZSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRuZXdWTm9kZS5fb3JpZ2luYWwgPSBudWxsO1xuXHRcdC8vIGlmIGh5ZHJhdGluZyBvciBjcmVhdGluZyBpbml0aWFsIHRyZWUsIGJhaWxvdXQgcHJlc2VydmVzIERPTTpcblx0XHRpZiAoaXNIeWRyYXRpbmcgfHwgZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0bmV3Vk5vZGUuX2RvbSA9IG9sZERvbTtcblx0XHRcdG5ld1ZOb2RlLl9oeWRyYXRpbmcgPSAhIWlzSHlkcmF0aW5nO1xuXHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW5bZXhjZXNzRG9tQ2hpbGRyZW4uaW5kZXhPZihvbGREb20pXSA9IG51bGw7XG5cdFx0XHQvLyBeIGNvdWxkIHBvc3NpYmx5IGJlIHNpbXBsaWZpZWQgdG86XG5cdFx0XHQvLyBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGggPSAwO1xuXHRcdH1cblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIG5ld1ZOb2RlLCBvbGRWTm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gcm9vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0Um9vdChjb21taXRRdWV1ZSwgcm9vdCkge1xuXHRpZiAob3B0aW9ucy5fY29tbWl0KSBvcHRpb25zLl9jb21taXQocm9vdCwgY29tbWl0UXVldWUpO1xuXG5cdGNvbW1pdFF1ZXVlLnNvbWUoYyA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIEB0cy1pZ25vcmUgUmV1c2UgdGhlIGNvbW1pdFF1ZXVlIHZhcmlhYmxlIGhlcmUgc28gdGhlIHR5cGUgY2hhbmdlc1xuXHRcdFx0Y29tbWl0UXVldWUgPSBjLl9yZW5kZXJDYWxsYmFja3M7XG5cdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MgPSBbXTtcblx0XHRcdGNvbW1pdFF1ZXVlLnNvbWUoY2IgPT4ge1xuXHRcdFx0XHQvLyBAdHMtaWdub3JlIFNlZSBhYm92ZSB0cy1pZ25vcmUgb24gY29tbWl0UXVldWVcblx0XHRcdFx0Y2IuY2FsbChjKTtcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgYy5fdm5vZGUpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyByZXByZXNlbnRpbmcgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nXG4gKiB0aGUgdmlydHVhbCBub2RlcyBiZWluZyBkaWZmZWRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBuZXdWTm9kZSBUaGUgbmV3IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG9sZFZOb2RlIFRoZSBvbGQgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gZ2xvYmFsQ29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0geyp9IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzSHlkcmF0aW5nIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZGlmZkVsZW1lbnROb2Rlcyhcblx0ZG9tLFxuXHRuZXdWTm9kZSxcblx0b2xkVk5vZGUsXG5cdGdsb2JhbENvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IG9sZFByb3BzID0gb2xkVk5vZGUucHJvcHM7XG5cdGxldCBuZXdQcm9wcyA9IG5ld1ZOb2RlLnByb3BzO1xuXHRsZXQgbm9kZVR5cGUgPSBuZXdWTm9kZS50eXBlO1xuXHRsZXQgaSA9IDA7XG5cblx0Ly8gVHJhY2tzIGVudGVyaW5nIGFuZCBleGl0aW5nIFNWRyBuYW1lc3BhY2Ugd2hlbiBkZXNjZW5kaW5nIHRocm91Z2ggdGhlIHRyZWUuXG5cdGlmIChub2RlVHlwZSA9PT0gJ3N2ZycpIGlzU3ZnID0gdHJ1ZTtcblxuXHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdGZvciAoOyBpIDwgZXhjZXNzRG9tQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGNoaWxkID0gZXhjZXNzRG9tQ2hpbGRyZW5baV07XG5cblx0XHRcdC8vIGlmIG5ld1ZOb2RlIG1hdGNoZXMgYW4gZWxlbWVudCBpbiBleGNlc3NEb21DaGlsZHJlbiBvciB0aGUgYGRvbWBcblx0XHRcdC8vIGFyZ3VtZW50IG1hdGNoZXMgYW4gZWxlbWVudCBpbiBleGNlc3NEb21DaGlsZHJlbiwgcmVtb3ZlIGl0IGZyb21cblx0XHRcdC8vIGV4Y2Vzc0RvbUNoaWxkcmVuIHNvIGl0IGlzbid0IGxhdGVyIHJlbW92ZWQgaW4gZGlmZkNoaWxkcmVuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdGNoaWxkICYmXG5cdFx0XHRcdChjaGlsZCA9PT0gZG9tIHx8XG5cdFx0XHRcdFx0KG5vZGVUeXBlID8gY2hpbGQubG9jYWxOYW1lID09IG5vZGVUeXBlIDogY2hpbGQubm9kZVR5cGUgPT0gMykpXG5cdFx0XHQpIHtcblx0XHRcdFx0ZG9tID0gY2hpbGQ7XG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuW2ldID0gbnVsbDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGRvbSA9PSBudWxsKSB7XG5cdFx0aWYgKG5vZGVUeXBlID09PSBudWxsKSB7XG5cdFx0XHQvLyBAdHMtaWdub3JlIGNyZWF0ZVRleHROb2RlIHJldHVybnMgVGV4dCwgd2UgZXhwZWN0IFByZWFjdEVsZW1lbnRcblx0XHRcdHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdQcm9wcyk7XG5cdFx0fVxuXG5cdFx0aWYgKGlzU3ZnKSB7XG5cdFx0XHRkb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXG5cdFx0XHRcdCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG5cdFx0XHRcdC8vIEB0cy1pZ25vcmUgV2Uga25vdyBgbmV3Vk5vZGUudHlwZWAgaXMgYSBzdHJpbmdcblx0XHRcdFx0bm9kZVR5cGVcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdC8vIEB0cy1pZ25vcmUgV2Uga25vdyBgbmV3Vk5vZGUudHlwZWAgaXMgYSBzdHJpbmdcblx0XHRcdFx0bm9kZVR5cGUsXG5cdFx0XHRcdG5ld1Byb3BzLmlzICYmIG5ld1Byb3BzXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIHdlIGNyZWF0ZWQgYSBuZXcgcGFyZW50LCBzbyBub25lIG9mIHRoZSBwcmV2aW91c2x5IGF0dGFjaGVkIGNoaWxkcmVuIGNhbiBiZSByZXVzZWQ6XG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPSBudWxsO1xuXHRcdC8vIHdlIGFyZSBjcmVhdGluZyBhIG5ldyBub2RlLCBzbyB3ZSBjYW4gYXNzdW1lIHRoaXMgaXMgYSBuZXcgc3VidHJlZSAoaW4gY2FzZSB3ZSBhcmUgaHlkcmF0aW5nKSwgdGhpcyBkZW9wdHMgdGhlIGh5ZHJhdGVcblx0XHRpc0h5ZHJhdGluZyA9IGZhbHNlO1xuXHR9XG5cblx0aWYgKG5vZGVUeXBlID09PSBudWxsKSB7XG5cdFx0Ly8gRHVyaW5nIGh5ZHJhdGlvbiwgd2Ugc3RpbGwgaGF2ZSB0byBzcGxpdCBtZXJnZWQgdGV4dCBmcm9tIFNTUidkIEhUTUwuXG5cdFx0aWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcyAmJiAoIWlzSHlkcmF0aW5nIHx8IGRvbS5kYXRhICE9PSBuZXdQcm9wcykpIHtcblx0XHRcdGRvbS5kYXRhID0gbmV3UHJvcHM7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIElmIGV4Y2Vzc0RvbUNoaWxkcmVuIHdhcyBub3QgbnVsbCwgcmVwb3B1bGF0ZSBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQncyBjaGlsZHJlbjpcblx0XHRleGNlc3NEb21DaGlsZHJlbiA9XG5cdFx0XHRleGNlc3NEb21DaGlsZHJlbiAmJiBFTVBUWV9BUlIuc2xpY2UuY2FsbChkb20uY2hpbGROb2Rlcyk7XG5cblx0XHRvbGRQcm9wcyA9IG9sZFZOb2RlLnByb3BzIHx8IEVNUFRZX09CSjtcblxuXHRcdGxldCBvbGRIdG1sID0gb2xkUHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG5cdFx0bGV0IG5ld0h0bWwgPSBuZXdQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcblxuXHRcdC8vIER1cmluZyBoeWRyYXRpb24sIHByb3BzIGFyZSBub3QgZGlmZmVkIGF0IGFsbCAoaW5jbHVkaW5nIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKVxuXHRcdC8vIEBUT0RPIHdlIHNob3VsZCB3YXJuIGluIGRlYnVnIG1vZGUgd2hlbiBwcm9wcyBkb24ndCBtYXRjaCBoZXJlLlxuXHRcdGlmICghaXNIeWRyYXRpbmcpIHtcblx0XHRcdC8vIEJ1dCwgaWYgd2UgYXJlIGluIGEgc2l0dWF0aW9uIHdoZXJlIHdlIGFyZSB1c2luZyBleGlzdGluZyBET00gKGUuZy4gcmVwbGFjZU5vZGUpXG5cdFx0XHQvLyB3ZSBzaG91bGQgcmVhZCB0aGUgZXhpc3RpbmcgRE9NIGF0dHJpYnV0ZXMgdG8gZGlmZiB0aGVtXG5cdFx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0XHRvbGRQcm9wcyA9IHt9O1xuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGRvbS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b2xkUHJvcHNbZG9tLmF0dHJpYnV0ZXNbaV0ubmFtZV0gPSBkb20uYXR0cmlidXRlc1tpXS52YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAobmV3SHRtbCB8fCBvbGRIdG1sKSB7XG5cdFx0XHRcdC8vIEF2b2lkIHJlLWFwcGx5aW5nIHRoZSBzYW1lICdfX2h0bWwnIGlmIGl0IGRpZCBub3QgY2hhbmdlZCBiZXR3ZWVuIHJlLXJlbmRlclxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0IW5ld0h0bWwgfHxcblx0XHRcdFx0XHQoKCFvbGRIdG1sIHx8IG5ld0h0bWwuX19odG1sICE9IG9sZEh0bWwuX19odG1sKSAmJlxuXHRcdFx0XHRcdFx0bmV3SHRtbC5fX2h0bWwgIT09IGRvbS5pbm5lckhUTUwpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGRvbS5pbm5lckhUTUwgPSAobmV3SHRtbCAmJiBuZXdIdG1sLl9faHRtbCkgfHwgJyc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRkaWZmUHJvcHMoZG9tLCBuZXdQcm9wcywgb2xkUHJvcHMsIGlzU3ZnLCBpc0h5ZHJhdGluZyk7XG5cblx0XHQvLyBJZiB0aGUgbmV3IHZub2RlIGRpZG4ndCBoYXZlIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCBkaWZmIGl0cyBjaGlsZHJlblxuXHRcdGlmIChuZXdIdG1sKSB7XG5cdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBbXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aSA9IG5ld1ZOb2RlLnByb3BzLmNoaWxkcmVuO1xuXHRcdFx0ZGlmZkNoaWxkcmVuKFxuXHRcdFx0XHRkb20sXG5cdFx0XHRcdEFycmF5LmlzQXJyYXkoaSkgPyBpIDogW2ldLFxuXHRcdFx0XHRuZXdWTm9kZSxcblx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdGdsb2JhbENvbnRleHQsXG5cdFx0XHRcdGlzU3ZnICYmIG5vZGVUeXBlICE9PSAnZm9yZWlnbk9iamVjdCcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0ZG9tLmZpcnN0Q2hpbGQsXG5cdFx0XHRcdGlzSHlkcmF0aW5nXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBSZW1vdmUgY2hpbGRyZW4gdGhhdCBhcmUgbm90IHBhcnQgb2YgYW55IHZub2RlLlxuXHRcdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdFx0Zm9yIChpID0gZXhjZXNzRG9tQ2hpbGRyZW4ubGVuZ3RoOyBpLS07ICkge1xuXHRcdFx0XHRcdGlmIChleGNlc3NEb21DaGlsZHJlbltpXSAhPSBudWxsKSByZW1vdmVOb2RlKGV4Y2Vzc0RvbUNoaWxkcmVuW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIChhcyBhYm92ZSwgZG9uJ3QgZGlmZiBwcm9wcyBkdXJpbmcgaHlkcmF0aW9uKVxuXHRcdGlmICghaXNIeWRyYXRpbmcpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0J3ZhbHVlJyBpbiBuZXdQcm9wcyAmJlxuXHRcdFx0XHQoaSA9IG5ld1Byb3BzLnZhbHVlKSAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdC8vICMyNzU2IEZvciB0aGUgPHByb2dyZXNzPi1lbGVtZW50IHRoZSBpbml0aWFsIHZhbHVlIGlzIDAsXG5cdFx0XHRcdC8vIGRlc3BpdGUgdGhlIGF0dHJpYnV0ZSBub3QgYmVpbmcgcHJlc2VudC4gV2hlbiB0aGUgYXR0cmlidXRlXG5cdFx0XHRcdC8vIGlzIG1pc3NpbmcgdGhlIHByb2dyZXNzIGJhciBpcyB0cmVhdGVkIGFzIGluZGV0ZXJtaW5hdGUuXG5cdFx0XHRcdC8vIFRvIGZpeCB0aGF0IHdlJ2xsIGFsd2F5cyB1cGRhdGUgaXQgd2hlbiBpdCBpcyAwIGZvciBwcm9ncmVzcyBlbGVtZW50c1xuXHRcdFx0XHQoaSAhPT0gZG9tLnZhbHVlIHx8IChub2RlVHlwZSA9PT0gJ3Byb2dyZXNzJyAmJiAhaSkpXG5cdFx0XHQpIHtcblx0XHRcdFx0c2V0UHJvcGVydHkoZG9tLCAndmFsdWUnLCBpLCBvbGRQcm9wcy52YWx1ZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKFxuXHRcdFx0XHQnY2hlY2tlZCcgaW4gbmV3UHJvcHMgJiZcblx0XHRcdFx0KGkgPSBuZXdQcm9wcy5jaGVja2VkKSAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdGkgIT09IGRvbS5jaGVja2VkXG5cdFx0XHQpIHtcblx0XHRcdFx0c2V0UHJvcGVydHkoZG9tLCAnY2hlY2tlZCcsIGksIG9sZFByb3BzLmNoZWNrZWQsIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZG9tO1xufVxuXG4vKipcbiAqIEludm9rZSBvciB1cGRhdGUgYSByZWYsIGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0IGlzIGEgZnVuY3Rpb24gb3Igb2JqZWN0IHJlZi5cbiAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufSByZWZcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IHZub2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVJlZihyZWYsIHZhbHVlLCB2bm9kZSkge1xuXHR0cnkge1xuXHRcdGlmICh0eXBlb2YgcmVmID09ICdmdW5jdGlvbicpIHJlZih2YWx1ZSk7XG5cdFx0ZWxzZSByZWYuY3VycmVudCA9IHZhbHVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCB2bm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBVbm1vdW50IGEgdmlydHVhbCBub2RlIGZyb20gdGhlIHRyZWUgYW5kIGFwcGx5IERPTSBjaGFuZ2VzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGUgVGhlIHZpcnR1YWwgbm9kZSB0byB1bm1vdW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gcGFyZW50Vk5vZGUgVGhlIHBhcmVudCBvZiB0aGUgVk5vZGUgdGhhdFxuICogaW5pdGlhdGVkIHRoZSB1bm1vdW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwUmVtb3ZlXSBGbGFnIHRoYXQgaW5kaWNhdGVzIHRoYXQgYSBwYXJlbnQgbm9kZSBvZiB0aGVcbiAqIGN1cnJlbnQgZWxlbWVudCBpcyBhbHJlYWR5IGRldGFjaGVkIGZyb20gdGhlIERPTS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVubW91bnQodm5vZGUsIHBhcmVudFZOb2RlLCBza2lwUmVtb3ZlKSB7XG5cdGxldCByO1xuXHRpZiAob3B0aW9ucy51bm1vdW50KSBvcHRpb25zLnVubW91bnQodm5vZGUpO1xuXG5cdGlmICgociA9IHZub2RlLnJlZikpIHtcblx0XHRpZiAoIXIuY3VycmVudCB8fCByLmN1cnJlbnQgPT09IHZub2RlLl9kb20pIGFwcGx5UmVmKHIsIG51bGwsIHBhcmVudFZOb2RlKTtcblx0fVxuXG5cdGxldCBkb207XG5cdGlmICghc2tpcFJlbW92ZSAmJiB0eXBlb2Ygdm5vZGUudHlwZSAhPSAnZnVuY3Rpb24nKSB7XG5cdFx0c2tpcFJlbW92ZSA9IChkb20gPSB2bm9kZS5fZG9tKSAhPSBudWxsO1xuXHR9XG5cblx0Ly8gTXVzdCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdG8gcHJvcGVybHkgY2xlYW4gdXAgYF9uZXh0RG9tYFxuXHQvLyBmb3Igd2hpY2ggYG51bGxgIGlzIGEgdmFsaWQgdmFsdWUuIFNlZSBjb21tZW50IGluIGBjcmVhdGUtZWxlbWVudC5qc2Bcblx0dm5vZGUuX2RvbSA9IHZub2RlLl9uZXh0RG9tID0gdW5kZWZpbmVkO1xuXG5cdGlmICgociA9IHZub2RlLl9jb21wb25lbnQpICE9IG51bGwpIHtcblx0XHRpZiAoci5jb21wb25lbnRXaWxsVW5tb3VudCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ci5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIHBhcmVudFZOb2RlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyLmJhc2UgPSByLl9wYXJlbnREb20gPSBudWxsO1xuXHR9XG5cblx0aWYgKChyID0gdm5vZGUuX2NoaWxkcmVuKSkge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgci5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHJbaV0pIHVubW91bnQocltpXSwgcGFyZW50Vk5vZGUsIHNraXBSZW1vdmUpO1xuXHRcdH1cblx0fVxuXG5cdGlmIChkb20gIT0gbnVsbCkgcmVtb3ZlTm9kZShkb20pO1xufVxuXG4vKiogVGhlIGAucmVuZGVyKClgIG1ldGhvZCBmb3IgYSBQRkMgYmFja2luZyBpbnN0YW5jZS4gKi9cbmZ1bmN0aW9uIGRvUmVuZGVyKHByb3BzLCBzdGF0ZSwgY29udGV4dCkge1xuXHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCk7XG59XG4iLCJpbXBvcnQgeyBFTVBUWV9PQkosIEVNUFRZX0FSUiB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNvbW1pdFJvb3QsIGRpZmYgfSBmcm9tICcuL2RpZmYvaW5kZXgnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgRnJhZ21lbnQgfSBmcm9tICcuL2NyZWF0ZS1lbGVtZW50JztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5cbi8qKlxuICogUmVuZGVyIGEgUHJlYWN0IHZpcnR1YWwgbm9kZSBpbnRvIGEgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Q2hpbGR9IHZub2RlIFRoZSB2aXJ0dWFsIG5vZGUgdG8gcmVuZGVyXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IHBhcmVudERvbSBUaGUgRE9NIGVsZW1lbnQgdG9cbiAqIHJlbmRlciBpbnRvXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnQgfCBvYmplY3R9IFtyZXBsYWNlTm9kZV0gT3B0aW9uYWw6IEF0dGVtcHQgdG8gcmUtdXNlIGFuXG4gKiBleGlzdGluZyBET00gdHJlZSByb290ZWQgYXQgYHJlcGxhY2VOb2RlYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKHZub2RlLCBwYXJlbnREb20sIHJlcGxhY2VOb2RlKSB7XG5cdGlmIChvcHRpb25zLl9yb290KSBvcHRpb25zLl9yb290KHZub2RlLCBwYXJlbnREb20pO1xuXG5cdC8vIFdlIGFidXNlIHRoZSBgcmVwbGFjZU5vZGVgIHBhcmFtZXRlciBpbiBgaHlkcmF0ZSgpYCB0byBzaWduYWwgaWYgd2UgYXJlIGluXG5cdC8vIGh5ZHJhdGlvbiBtb2RlIG9yIG5vdCBieSBwYXNzaW5nIHRoZSBgaHlkcmF0ZWAgZnVuY3Rpb24gaW5zdGVhZCBvZiBhIERPTVxuXHQvLyBlbGVtZW50Li5cblx0bGV0IGlzSHlkcmF0aW5nID0gdHlwZW9mIHJlcGxhY2VOb2RlID09PSAnZnVuY3Rpb24nO1xuXG5cdC8vIFRvIGJlIGFibGUgdG8gc3VwcG9ydCBjYWxsaW5nIGByZW5kZXIoKWAgbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWVcblx0Ly8gRE9NIG5vZGUsIHdlIG5lZWQgdG8gb2J0YWluIGEgcmVmZXJlbmNlIHRvIHRoZSBwcmV2aW91cyB0cmVlLiBXZSBkb1xuXHQvLyB0aGlzIGJ5IGFzc2lnbmluZyBhIG5ldyBgX2NoaWxkcmVuYCBwcm9wZXJ0eSB0byBET00gbm9kZXMgd2hpY2ggcG9pbnRzXG5cdC8vIHRvIHRoZSBsYXN0IHJlbmRlcmVkIHRyZWUuIEJ5IGRlZmF1bHQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgcHJlc2VudCwgd2hpY2hcblx0Ly8gbWVhbnMgdGhhdCB3ZSBhcmUgbW91bnRpbmcgYSBuZXcgdHJlZSBmb3IgdGhlIGZpcnN0IHRpbWUuXG5cdGxldCBvbGRWTm9kZSA9IGlzSHlkcmF0aW5nXG5cdFx0PyBudWxsXG5cdFx0OiAocmVwbGFjZU5vZGUgJiYgcmVwbGFjZU5vZGUuX2NoaWxkcmVuKSB8fCBwYXJlbnREb20uX2NoaWxkcmVuO1xuXG5cdHZub2RlID0gKFxuXHRcdCghaXNIeWRyYXRpbmcgJiYgcmVwbGFjZU5vZGUpIHx8XG5cdFx0cGFyZW50RG9tXG5cdCkuX2NoaWxkcmVuID0gY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgW3Zub2RlXSk7XG5cblx0Ly8gTGlzdCBvZiBlZmZlY3RzIHRoYXQgbmVlZCB0byBiZSBjYWxsZWQgYWZ0ZXIgZGlmZmluZy5cblx0bGV0IGNvbW1pdFF1ZXVlID0gW107XG5cdGRpZmYoXG5cdFx0cGFyZW50RG9tLFxuXHRcdC8vIERldGVybWluZSB0aGUgbmV3IHZub2RlIHRyZWUgYW5kIHN0b3JlIGl0IG9uIHRoZSBET00gZWxlbWVudCBvblxuXHRcdC8vIG91ciBjdXN0b20gYF9jaGlsZHJlbmAgcHJvcGVydHkuXG5cdFx0dm5vZGUsXG5cdFx0b2xkVk5vZGUgfHwgRU1QVFlfT0JKLFxuXHRcdEVNUFRZX09CSixcblx0XHRwYXJlbnREb20ub3duZXJTVkdFbGVtZW50ICE9PSB1bmRlZmluZWQsXG5cdFx0IWlzSHlkcmF0aW5nICYmIHJlcGxhY2VOb2RlXG5cdFx0XHQ/IFtyZXBsYWNlTm9kZV1cblx0XHRcdDogb2xkVk5vZGVcblx0XHRcdD8gbnVsbFxuXHRcdFx0OiBwYXJlbnREb20uZmlyc3RDaGlsZFxuXHRcdFx0PyBFTVBUWV9BUlIuc2xpY2UuY2FsbChwYXJlbnREb20uY2hpbGROb2Rlcylcblx0XHRcdDogbnVsbCxcblx0XHRjb21taXRRdWV1ZSxcblx0XHQhaXNIeWRyYXRpbmcgJiYgcmVwbGFjZU5vZGVcblx0XHRcdD8gcmVwbGFjZU5vZGVcblx0XHRcdDogb2xkVk5vZGVcblx0XHRcdD8gb2xkVk5vZGUuX2RvbVxuXHRcdFx0OiBwYXJlbnREb20uZmlyc3RDaGlsZCxcblx0XHRpc0h5ZHJhdGluZ1xuXHQpO1xuXG5cdC8vIEZsdXNoIGFsbCBxdWV1ZWQgZWZmZWN0c1xuXHRjb21taXRSb290KGNvbW1pdFF1ZXVlLCB2bm9kZSk7XG59XG5cbi8qKlxuICogVXBkYXRlIGFuIGV4aXN0aW5nIERPTSBlbGVtZW50IHdpdGggZGF0YSBmcm9tIGEgUHJlYWN0IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnRDaGlsZH0gdm5vZGUgVGhlIHZpcnR1YWwgbm9kZSB0byByZW5kZXJcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBET00gZWxlbWVudCB0b1xuICogdXBkYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoeWRyYXRlKHZub2RlLCBwYXJlbnREb20pIHtcblx0cmVuZGVyKHZub2RlLCBwYXJlbnREb20sIGh5ZHJhdGUpO1xufVxuIiwiaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IGNyZWF0ZVZOb2RlIH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBnaXZlbiBWTm9kZSwgb3B0aW9uYWxseSBhZGRpbmcgYXR0cmlidXRlcy9wcm9wcyBhbmQgcmVwbGFjaW5nIGl0cyBjaGlsZHJlbi5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlIFRoZSB2aXJ0dWFsIERPTSBlbGVtZW50IHRvIGNsb25lXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgQXR0cmlidXRlcy9wcm9wcyB0byBhZGQgd2hlbiBjbG9uaW5nXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudENoaWxkcmVuPn0gcmVzdCBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgd2lsbCBiZSB1c2VkIGFzIHJlcGxhY2VtZW50IGNoaWxkcmVuLlxuICogQHJldHVybnMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVFbGVtZW50KHZub2RlLCBwcm9wcywgY2hpbGRyZW4pIHtcblx0bGV0IG5vcm1hbGl6ZWRQcm9wcyA9IGFzc2lnbih7fSwgdm5vZGUucHJvcHMpLFxuXHRcdGtleSxcblx0XHRyZWYsXG5cdFx0aTtcblx0Zm9yIChpIGluIHByb3BzKSB7XG5cdFx0aWYgKGkgPT0gJ2tleScpIGtleSA9IHByb3BzW2ldO1xuXHRcdGVsc2UgaWYgKGkgPT0gJ3JlZicpIHJlZiA9IHByb3BzW2ldO1xuXHRcdGVsc2Ugbm9ybWFsaXplZFByb3BzW2ldID0gcHJvcHNbaV07XG5cdH1cblxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDMpIHtcblx0XHRjaGlsZHJlbiA9IFtjaGlsZHJlbl07XG5cdFx0Zm9yIChpID0gMzsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hpbGRyZW4ucHVzaChhcmd1bWVudHNbaV0pO1xuXHRcdH1cblx0fVxuXHRpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdG5vcm1hbGl6ZWRQcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXHR9XG5cblx0cmV0dXJuIGNyZWF0ZVZOb2RlKFxuXHRcdHZub2RlLnR5cGUsXG5cdFx0bm9ybWFsaXplZFByb3BzLFxuXHRcdGtleSB8fCB2bm9kZS5rZXksXG5cdFx0cmVmIHx8IHZub2RlLnJlZixcblx0XHRudWxsXG5cdCk7XG59XG4iLCIvKipcbiAqIEZpbmQgdGhlIGNsb3Nlc3QgZXJyb3IgYm91bmRhcnkgdG8gYSB0aHJvd24gZXJyb3IgYW5kIGNhbGwgaXRcbiAqIEBwYXJhbSB7b2JqZWN0fSBlcnJvciBUaGUgdGhyb3duIHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGUgVGhlIHZub2RlIHRoYXQgdGhyZXdcbiAqIHRoZSBlcnJvciB0aGF0IHdhcyBjYXVnaHQgKGV4Y2VwdCBmb3IgdW5tb3VudGluZyB3aGVuIHRoaXMgcGFyYW1ldGVyXG4gKiBpcyB0aGUgaGlnaGVzdCBwYXJlbnQgdGhhdCB3YXMgYmVpbmcgdW5tb3VudGVkKVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoRXJyb3IoZXJyb3IsIHZub2RlKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gKi9cblx0bGV0IGNvbXBvbmVudCwgY3RvciwgaGFuZGxlZDtcblxuXHRmb3IgKDsgKHZub2RlID0gdm5vZGUuX3BhcmVudCk7ICkge1xuXHRcdGlmICgoY29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudCkgJiYgIWNvbXBvbmVudC5fcHJvY2Vzc2luZ0V4Y2VwdGlvbikge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y3RvciA9IGNvbXBvbmVudC5jb25zdHJ1Y3RvcjtcblxuXHRcdFx0XHRpZiAoY3RvciAmJiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Y29tcG9uZW50LnNldFN0YXRlKGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSk7XG5cdFx0XHRcdFx0aGFuZGxlZCA9IGNvbXBvbmVudC5fZGlydHk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoICE9IG51bGwpIHtcblx0XHRcdFx0XHRjb21wb25lbnQuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IpO1xuXHRcdFx0XHRcdGhhbmRsZWQgPSBjb21wb25lbnQuX2RpcnR5O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVGhpcyBpcyBhbiBlcnJvciBib3VuZGFyeS4gTWFyayBpdCBhcyBoYXZpbmcgYmFpbGVkIG91dCwgYW5kIHdoZXRoZXIgaXQgd2FzIG1pZC1oeWRyYXRpb24uXG5cdFx0XHRcdGlmIChoYW5kbGVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIChjb21wb25lbnQuX3BlbmRpbmdFcnJvciA9IGNvbXBvbmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0ZXJyb3IgPSBlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRocm93IGVycm9yO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/preact/dist/preact.module.js\n");

/***/ }),

/***/ "../node_modules/preact/hooks/dist/hooks.module.js":
/*!*********************************************************!*\
  !*** ../node_modules/preact/hooks/dist/hooks.module.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useState\": () => (/* binding */ l),\n/* harmony export */   \"useReducer\": () => (/* binding */ p),\n/* harmony export */   \"useEffect\": () => (/* binding */ y),\n/* harmony export */   \"useLayoutEffect\": () => (/* binding */ h),\n/* harmony export */   \"useRef\": () => (/* binding */ s),\n/* harmony export */   \"useImperativeHandle\": () => (/* binding */ _),\n/* harmony export */   \"useMemo\": () => (/* binding */ d),\n/* harmony export */   \"useCallback\": () => (/* binding */ A),\n/* harmony export */   \"useContext\": () => (/* binding */ F),\n/* harmony export */   \"useDebugValue\": () => (/* binding */ T),\n/* harmony export */   \"useErrorBoundary\": () => (/* binding */ q)\n/* harmony export */ });\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n\nvar t,\n    u,\n    r,\n    o = 0,\n    i = [],\n    c = preact__WEBPACK_IMPORTED_MODULE_0__.options.__b,\n    f = preact__WEBPACK_IMPORTED_MODULE_0__.options.__r,\n    e = preact__WEBPACK_IMPORTED_MODULE_0__.options.diffed,\n    a = preact__WEBPACK_IMPORTED_MODULE_0__.options.__c,\n    v = preact__WEBPACK_IMPORTED_MODULE_0__.options.unmount;\n\nfunction m(t, r) {\n  preact__WEBPACK_IMPORTED_MODULE_0__.options.__h && preact__WEBPACK_IMPORTED_MODULE_0__.options.__h(u, t, o || r), o = 0;\n  var i = u.__H || (u.__H = {\n    __: [],\n    __h: []\n  });\n  return t >= i.__.length && i.__.push({}), i.__[t];\n}\n\nfunction l(n) {\n  return o = 1, p(w, n);\n}\n\nfunction p(n, r, o) {\n  var i = m(t++, 2);\n  return i.t = n, i.__c || (i.__ = [o ? o(r) : w(void 0, r), function (n) {\n    var t = i.t(i.__[0], n);\n    i.__[0] !== t && (i.__ = [t, i.__[1]], i.__c.setState({}));\n  }], i.__c = u), i.__;\n}\n\nfunction y(r, o) {\n  var i = m(t++, 3);\n  !preact__WEBPACK_IMPORTED_MODULE_0__.options.__s && k(i.__H, o) && (i.__ = r, i.__H = o, u.__H.__h.push(i));\n}\n\nfunction h(r, o) {\n  var i = m(t++, 4);\n  !preact__WEBPACK_IMPORTED_MODULE_0__.options.__s && k(i.__H, o) && (i.__ = r, i.__H = o, u.__h.push(i));\n}\n\nfunction s(n) {\n  return o = 5, d(function () {\n    return {\n      current: n\n    };\n  }, []);\n}\n\nfunction _(n, t, u) {\n  o = 6, h(function () {\n    \"function\" == typeof n ? n(t()) : n && (n.current = t());\n  }, null == u ? u : u.concat(n));\n}\n\nfunction d(n, u) {\n  var r = m(t++, 7);\n  return k(r.__H, u) && (r.__ = n(), r.__H = u, r.__h = n), r.__;\n}\n\nfunction A(n, t) {\n  return o = 8, d(function () {\n    return n;\n  }, t);\n}\n\nfunction F(n) {\n  var r = u.context[n.__c],\n      o = m(t++, 9);\n  return o.__c = n, r ? (null == o.__ && (o.__ = !0, r.sub(u)), r.props.value) : n.__;\n}\n\nfunction T(t, u) {\n  preact__WEBPACK_IMPORTED_MODULE_0__.options.useDebugValue && preact__WEBPACK_IMPORTED_MODULE_0__.options.useDebugValue(u ? u(t) : t);\n}\n\nfunction q(n) {\n  var r = m(t++, 10),\n      o = l();\n  return r.__ = n, u.componentDidCatch || (u.componentDidCatch = function (n) {\n    r.__ && r.__(n), o[1](n);\n  }), [o[0], function () {\n    o[1](void 0);\n  }];\n}\n\nfunction x() {\n  i.forEach(function (t) {\n    if (t.__P) try {\n      t.__H.__h.forEach(g), t.__H.__h.forEach(j), t.__H.__h = [];\n    } catch (u) {\n      t.__H.__h = [], preact__WEBPACK_IMPORTED_MODULE_0__.options.__e(u, t.__v);\n    }\n  }), i = [];\n}\n\npreact__WEBPACK_IMPORTED_MODULE_0__.options.__b = function (n) {\n  u = null, c && c(n);\n}, preact__WEBPACK_IMPORTED_MODULE_0__.options.__r = function (n) {\n  f && f(n), t = 0;\n  var r = (u = n.__c).__H;\n  r && (r.__h.forEach(g), r.__h.forEach(j), r.__h = []);\n}, preact__WEBPACK_IMPORTED_MODULE_0__.options.diffed = function (t) {\n  e && e(t);\n  var o = t.__c;\n  o && o.__H && o.__H.__h.length && (1 !== i.push(o) && r === preact__WEBPACK_IMPORTED_MODULE_0__.options.requestAnimationFrame || ((r = preact__WEBPACK_IMPORTED_MODULE_0__.options.requestAnimationFrame) || function (n) {\n    var t,\n        u = function () {\n      clearTimeout(r), b && cancelAnimationFrame(t), setTimeout(n);\n    },\n        r = setTimeout(u, 100);\n\n    b && (t = requestAnimationFrame(u));\n  })(x)), u = void 0;\n}, preact__WEBPACK_IMPORTED_MODULE_0__.options.__c = function (t, u) {\n  u.some(function (t) {\n    try {\n      t.__h.forEach(g), t.__h = t.__h.filter(function (n) {\n        return !n.__ || j(n);\n      });\n    } catch (r) {\n      u.some(function (n) {\n        n.__h && (n.__h = []);\n      }), u = [], preact__WEBPACK_IMPORTED_MODULE_0__.options.__e(r, t.__v);\n    }\n  }), a && a(t, u);\n}, preact__WEBPACK_IMPORTED_MODULE_0__.options.unmount = function (t) {\n  v && v(t);\n  var u = t.__c;\n  if (u && u.__H) try {\n    u.__H.__.forEach(g);\n  } catch (t) {\n    preact__WEBPACK_IMPORTED_MODULE_0__.options.__e(t, u.__v);\n  }\n};\nvar b = \"function\" == typeof requestAnimationFrame;\n\nfunction g(n) {\n  var t = u;\n  \"function\" == typeof n.__c && n.__c(), u = t;\n}\n\nfunction j(n) {\n  var t = u;\n  n.__c = n.__(), u = t;\n}\n\nfunction k(n, t) {\n  return !n || n.length !== t.length || t.some(function (t, u) {\n    return t !== n[u];\n  });\n}\n\nfunction w(n, t) {\n  return \"function\" == typeof t ? t(n) : t;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/preact/hooks/dist/hooks.module.js\n");

/***/ }),

/***/ "../node_modules/simple-markdown/simple-markdown.js":
/*!**********************************************************!*\
  !*** ../node_modules/simple-markdown/simple-markdown.js ***!
  \**********************************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() : 0;\n})(this, function () {\n  'use strict';\n  /* @flow */\n\n  /* @ts-check */\n\n  /**\n   * Simple-Markdown\n   * ===============\n   *\n   * Simple-Markdown's primary goal is to be easy to adapt. It aims\n   * to be compliant with John Gruber's [Markdown Syntax page][1],\n   * but compatiblity with other markdown implementations' edge-cases\n   * will be sacrificed where it conflicts with simplicity or\n   * extensibility.\n   *\n   * If your goal is to simply embed a standard markdown implementation\n   * in your website, simple-markdown is probably not the best library\n   * for you (although it should work). But if you have struggled to\n   * customize an existing library to meet your needs, simple-markdown\n   * might be able to help.\n   *\n   * Many of the regexes and original logic has been adapted from\n   * the wonderful [marked.js](https://github.com/chjj/marked)\n   *\n   * LICENSE (MIT):\n   * New code copyright (c) 2014-2019 Khan Academy & Aria Buckles.\n   *\n   * Portions adapted from marked.js copyright (c) 2011-2014\n   * Christopher Jeffrey (https://github.com/chjj/).\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  // Typescript language & simple-markdown.d.ts references:\n  /// <reference lib=\"ES2018\" />\n  /// <reference path=\"../simple-markdown.d.ts\" />\n\n  /*::\n  // Flow Type Definitions:\n  \n  type Capture =\n      Array<string> & {index: number} |\n      Array<string> & {index?: number};\n  \n  type Attr = string | number | boolean | null | void;\n  \n  type SingleASTNode = {\n      type: string,\n      [string]: any,\n  };\n  \n  type UnTypedASTNode = {\n      [string]: any\n  };\n  \n  type ASTNode = SingleASTNode | Array<SingleASTNode>;\n  \n  type State = {\n      key?: string | number | void,\n      inline?: ?boolean,\n      [string]: any,\n  };\n  \n  type ReactElement = React$Element<any>;\n  type ReactElements = React$Node;\n  \n  type MatchFunction = { regex?: RegExp } & (\n      source: string,\n      state: State,\n      prevCapture: string\n  ) => ?Capture;\n  \n  type Parser = (\n      source: string,\n      state?: ?State\n  ) => Array<SingleASTNode>;\n  \n  type ParseFunction = (\n      capture: Capture,\n      nestedParse: Parser,\n      state: State,\n  ) => (UnTypedASTNode | ASTNode);\n  \n  type SingleNodeParseFunction = (\n      capture: Capture,\n      nestedParse: Parser,\n      state: State,\n  ) => UnTypedASTNode;\n  \n  type Output<Result> = (\n      node: ASTNode,\n      state?: ?State\n  ) => Result;\n  \n  type NodeOutput<Result> = (\n      node: SingleASTNode,\n      nestedOutput: Output<Result>,\n      state: State\n  ) => Result;\n  \n  type ArrayNodeOutput<Result> = (\n      node: Array<SingleASTNode>,\n      nestedOutput: Output<Result>,\n      state: State\n  ) => Result;\n  \n  type ReactOutput = Output<ReactElements>;\n  type ReactNodeOutput = NodeOutput<ReactElements>;\n  type HtmlOutput = Output<string>;\n  type HtmlNodeOutput = NodeOutput<string>;\n  \n  type ParserRule = {\n      +order: number,\n      +match: MatchFunction,\n      +quality?: (capture: Capture, state: State, prevCapture: string) => number,\n      +parse: ParseFunction,\n  };\n  \n  type SingleNodeParserRule = {\n      +order: number,\n      +match: MatchFunction,\n      +quality?: (capture: Capture, state: State, prevCapture: string) => number,\n      +parse: SingleNodeParseFunction,\n  };\n  \n  type ReactOutputRule = {\n      // we allow null because some rules are never output results, and that's\n      // legal as long as no parsers return an AST node matching that rule.\n      // We don't use ? because this makes it be explicitly defined as either\n      // a valid function or null, so it can't be forgotten.\n      +react: ReactNodeOutput | null,\n  };\n  \n  type HtmlOutputRule = {\n      +html: HtmlNodeOutput | null,\n  };\n  \n  type ArrayRule = {\n      +react?: ArrayNodeOutput<ReactElements>,\n      +html?: ArrayNodeOutput<string>,\n      +[string]: ArrayNodeOutput<any>,\n  };\n  \n  type ParserRules = {\n      +Array?: ArrayRule,\n      +[type: string]: ParserRule,\n  };\n  \n  type OutputRules<Rule> = {\n      +Array?: ArrayRule,\n      +[type: string]: Rule\n  };\n  type Rules<OutputRule> = {\n      +Array?: ArrayRule,\n      +[type: string]: ParserRule & OutputRule,\n  };\n  type ReactRules = {\n      +Array?: {\n          +react: ArrayNodeOutput<ReactElements>,\n      },\n      +[type: string]: ParserRule & ReactOutputRule,\n  };\n  type HtmlRules = {\n      +Array?: {\n          +html: ArrayNodeOutput<string>,\n      },\n      +[type: string]: ParserRule & HtmlOutputRule,\n  };\n  \n  // We want to clarify our defaultRules types a little bit more so clients can\n  // reuse defaultRules built-ins. So we make some stronger guarantess when\n  // we can:\n  type NonNullReactOutputRule = {\n      +react: ReactNodeOutput,\n  };\n  type ElementReactOutputRule = {\n      +react: NodeOutput<ReactElement>,\n  };\n  type TextReactOutputRule = {\n      +react: NodeOutput<string>,\n  };\n  type NonNullHtmlOutputRule = {\n      +html: HtmlNodeOutput,\n  };\n  \n  type DefaultInRule = SingleNodeParserRule & ReactOutputRule & HtmlOutputRule;\n  type TextInOutRule = SingleNodeParserRule & TextReactOutputRule & NonNullHtmlOutputRule;\n  type LenientInOutRule = SingleNodeParserRule & NonNullReactOutputRule & NonNullHtmlOutputRule;\n  type DefaultInOutRule = SingleNodeParserRule & ElementReactOutputRule & NonNullHtmlOutputRule;\n  \n  type DefaultRules = {\n      +Array: {\n          +react: ArrayNodeOutput<ReactElements>,\n          +html: ArrayNodeOutput<string>\n      },\n      +heading: DefaultInOutRule,\n      +nptable: DefaultInRule,\n      +lheading: DefaultInRule,\n      +hr: DefaultInOutRule,\n      +codeBlock: DefaultInOutRule,\n      +fence: DefaultInRule,\n      +blockQuote: DefaultInOutRule,\n      +list: DefaultInOutRule,\n      +def: LenientInOutRule,\n      +table: DefaultInOutRule,\n      +tableSeparator: DefaultInRule,\n      +newline: TextInOutRule,\n      +paragraph: DefaultInOutRule,\n      +escape: DefaultInRule,\n      +autolink: DefaultInRule,\n      +mailto: DefaultInRule,\n      +url: DefaultInRule,\n      +link: DefaultInOutRule,\n      +image: DefaultInOutRule,\n      +reflink: DefaultInRule,\n      +refimage: DefaultInRule,\n      +em: DefaultInOutRule,\n      +strong: DefaultInOutRule,\n      +u: DefaultInOutRule,\n      +del: DefaultInOutRule,\n      +inlineCode: DefaultInOutRule,\n      +br: DefaultInOutRule,\n      +text: TextInOutRule,\n  };\n  \n  type RefNode = {\n      type: string,\n      content?: ASTNode,\n      target?: string,\n      title?: string,\n      alt?: string,\n  };\n  \n  // End Flow Definitions\n  */\n\n  var CR_NEWLINE_R = /\\r\\n?/g;\n  var TAB_R = /\\t/g;\n  var FORMFEED_R = /\\f/g;\n  /**\n   * Turn various whitespace into easy-to-process whitespace\n   * @param {string} source\n   * @returns {string}\n   */\n\n  var preprocess = function (source\n  /* : string */\n  ) {\n    return source.replace(CR_NEWLINE_R, '\\n').replace(FORMFEED_R, '').replace(TAB_R, '    ');\n  };\n  /**\n   * @param {SimpleMarkdown.OptionalState} givenState\n   * @param {SimpleMarkdown.OptionalState} defaultState\n   * @returns {SimpleMarkdown.State}\n   */\n\n\n  var populateInitialState = function (givenState\n  /* : ?State */\n  , defaultState\n  /* : ?State */\n  )\n  /* : State */\n  {\n    var state\n    /* : State */\n    = givenState || {};\n\n    if (defaultState != null) {\n      for (var prop in defaultState) {\n        if (Object.prototype.hasOwnProperty.call(defaultState, prop)) {\n          state[prop] = defaultState[prop];\n        }\n      }\n    }\n\n    return state;\n  };\n  /**\n   * Creates a parser for a given set of rules, with the precedence\n   * specified as a list of rules.\n   *\n   * @param {SimpleMarkdown.ParserRules} rules\n   *     an object containing\n   *     rule type -> {match, order, parse} objects\n   *     (lower order is higher precedence)\n   * @param {SimpleMarkdown.OptionalState} [defaultState]\n   *\n   * @returns {SimpleMarkdown.Parser}\n   *     The resulting parse function, with the following parameters:\n   *     @source: the input source string to be parsed\n   *     @state: an optional object to be threaded through parse\n   *         calls. Allows clients to add stateful operations to\n   *         parsing, such as keeping track of how many levels deep\n   *         some nesting is. For an example use-case, see passage-ref\n   *         parsing in src/widgets/passage/passage-markdown.jsx\n   */\n\n\n  var parserFor = function (rules\n  /*: ParserRules */\n  , defaultState\n  /*: ?State */\n  ) {\n    // Sorts rules in order of increasing order, then\n    // ascending rule name in case of ties.\n    var ruleList = Object.keys(rules).filter(function (type) {\n      var rule = rules[type];\n\n      if (rule == null || rule.match == null) {\n        return false;\n      }\n\n      var order = rule.order;\n\n      if ((typeof order !== 'number' || !isFinite(order)) && typeof console !== 'undefined') {\n        console.warn(\"simple-markdown: Invalid order for rule `\" + type + \"`: \" + String(order));\n      }\n\n      return true;\n    });\n    ruleList.sort(function (typeA, typeB) {\n      var ruleA\n      /* : ParserRule */\n      =\n      /** @type {SimpleMarkdown.ParserRule} */\n      rules[typeA]\n      /*:: :any */\n      ;\n      var ruleB\n      /* : ParserRule */\n      =\n      /** @type {SimpleMarkdown.ParserRule} */\n      rules[typeB]\n      /*:: :any */\n      ;\n      var orderA = ruleA.order;\n      var orderB = ruleB.order; // First sort based on increasing order\n\n      if (orderA !== orderB) {\n        return orderA - orderB;\n      }\n\n      var secondaryOrderA = ruleA.quality ? 0 : 1;\n      var secondaryOrderB = ruleB.quality ? 0 : 1;\n\n      if (secondaryOrderA !== secondaryOrderB) {\n        return secondaryOrderA - secondaryOrderB; // Then based on increasing unicode lexicographic ordering\n      } else if (typeA < typeB) {\n        return -1;\n      } else if (typeA > typeB) {\n        return 1;\n      } else {\n        // Rules should never have the same name,\n        // but this is provided for completeness.\n        return 0;\n      }\n    });\n    /** @type {SimpleMarkdown.State} */\n\n    var latestState;\n    /** @type {SimpleMarkdown.Parser} */\n\n    var nestedParse = function (source\n    /* : string */\n    , state\n    /* : ?State */\n    ) {\n      /** @type Array<SimpleMarkdown.SingleASTNode> */\n      var result = [];\n      state = state || latestState;\n      latestState = state;\n\n      while (source) {\n        // store the best match, it's rule, and quality:\n        var ruleType = null;\n        var rule = null;\n        var capture = null;\n        var quality = NaN; // loop control variables:\n\n        var i = 0;\n        var currRuleType = ruleList[0];\n        var currRule\n        /* : ParserRule */\n        =\n        /** @type {SimpleMarkdown.ParserRule} */\n        rules[currRuleType]\n        /*:: :any */\n        ;\n\n        do {\n          var currOrder = currRule.order;\n          var prevCaptureStr = state.prevCapture == null ? \"\" : state.prevCapture[0];\n          var currCapture = currRule.match(source, state, prevCaptureStr);\n\n          if (currCapture) {\n            var currQuality = currRule.quality ? currRule.quality(currCapture, state, prevCaptureStr) : 0; // This should always be true the first time because\n            // the initial quality is NaN (that's why there's the\n            // condition negation).\n\n            if (!(currQuality <= quality)) {\n              ruleType = currRuleType;\n              rule = currRule;\n              capture = currCapture;\n              quality = currQuality;\n            }\n          } // Move on to the next item.\n          // Note that this makes `currRule` be the next item\n\n\n          i++;\n          currRuleType = ruleList[i];\n          currRule =\n          /*::((*/\n\n          /** @type {SimpleMarkdown.ParserRule} */\n          rules[currRuleType]\n          /*:: : any) : ParserRule)*/\n          ;\n        } while ( // keep looping while we're still within the ruleList\n        currRule && ( // if we don't have a match yet, continue\n        !capture || // or if we have a match, but the next rule is\n        // at the same order, and has a quality measurement\n        // functions, then this rule must have a quality\n        // measurement function (since they are sorted before\n        // those without), and we need to check if there is\n        // a better quality match\n        currRule.order === currOrder && currRule.quality)); // TODO(aria): Write tests for these\n\n\n        if (rule == null || capture == null\n        /*:: || ruleType == null */\n        ) {\n            throw new Error(\"Could not find a matching rule for the below \" + \"content. The rule with highest `order` should \" + \"always match content provided to it. Check \" + \"the definition of `match` for '\" + ruleList[ruleList.length - 1] + \"'. It seems to not match the following source:\\n\" + source);\n          }\n\n        if (capture.index) {\n          // If present and non-zero, i.e. a non-^ regexp result:\n          throw new Error(\"`match` must return a capture starting at index 0 \" + \"(the current parse index). Did you forget a ^ at the \" + \"start of the RegExp?\");\n        }\n\n        var parsed = rule.parse(capture, nestedParse, state); // We maintain the same object here so that rules can\n        // store references to the objects they return and\n        // modify them later. (oops sorry! but this adds a lot\n        // of power--see reflinks.)\n\n        if (Array.isArray(parsed)) {\n          Array.prototype.push.apply(result, parsed);\n        } else {\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType;\n          }\n\n          result.push(\n          /** @type {SimpleMarkdown.SingleASTNode} */\n          parsed);\n        }\n\n        state.prevCapture = capture;\n        source = source.substring(state.prevCapture[0].length);\n      }\n\n      return result;\n    };\n    /** @type {SimpleMarkdown.Parser} */\n\n\n    var outerParse = function (source\n    /* : string */\n    , state\n    /* : ?State */\n    ) {\n      latestState = populateInitialState(state, defaultState);\n\n      if (!latestState.inline && !latestState.disableAutoBlockNewlines) {\n        source = source + \"\\n\\n\";\n      } // We store the previous capture so that match functions can\n      // use some limited amount of lookbehind. Lists use this to\n      // ensure they don't match arbitrary '- ' or '* ' in inline\n      // text (see the list rule for more information). This stores\n      // the full regex capture object, if there is one.\n\n\n      latestState.prevCapture = null;\n      return nestedParse(preprocess(source), latestState);\n    };\n\n    return outerParse;\n  }; // Creates a match function for an inline scoped element from a regex\n\n  /** @type {(regex: RegExp) => SimpleMarkdown.MatchFunction} */\n\n\n  var inlineRegex = function (regex\n  /* : RegExp */\n  ) {\n    /** @type {SimpleMarkdown.MatchFunction} */\n    var match\n    /* : MatchFunction */\n    = function (source, state) {\n      if (state.inline) {\n        return regex.exec(source);\n      } else {\n        return null;\n      }\n    };\n\n    match.regex = regex;\n    return match;\n  }; // Creates a match function for a block scoped element from a regex\n\n  /** @type {(regex: RegExp) => SimpleMarkdown.MatchFunction} */\n\n\n  var blockRegex = function (regex\n  /* : RegExp */\n  ) {\n    /** @type {SimpleMarkdown.MatchFunction} */\n    var match\n    /* : MatchFunction */\n    = function (source, state) {\n      if (state.inline) {\n        return null;\n      } else {\n        return regex.exec(source);\n      }\n    };\n\n    match.regex = regex;\n    return match;\n  }; // Creates a match function from a regex, ignoring block/inline scope\n\n  /** @type {(regex: RegExp) => SimpleMarkdown.MatchFunction} */\n\n\n  var anyScopeRegex = function (regex\n  /* : RegExp */\n  ) {\n    /** @type {SimpleMarkdown.MatchFunction} */\n    var match\n    /* : MatchFunction */\n    = function (source, state) {\n      return regex.exec(source);\n    };\n\n    match.regex = regex;\n    return match;\n  };\n\n  var TYPE_SYMBOL = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\n  /**\n   * @param {string} type\n   * @param {string | number | null | undefined} key\n   * @param {Object<string, any>} props\n   * @returns {SimpleMarkdown.ReactElement}\n   */\n\n  var reactElement = function (type\n  /* : string */\n  , key\n  /* : string | number | null | void */\n  , props\n  /* : { [string]: any } */\n  )\n  /* : ReactElement */\n  {\n    var element\n    /* : ReactElement */\n    =\n    /** @type {SimpleMarkdown.ReactElement} */\n    {\n      $$typeof: TYPE_SYMBOL,\n      type: type,\n      key: key == null ? undefined : key,\n      ref: null,\n      props: props,\n      _owner: null\n    }\n    /* : any */\n    ;\n    return element;\n  };\n  /** Returns a closed HTML tag.\n   * @param {string} tagName - Name of HTML tag (eg. \"em\" or \"a\")\n   * @param {string} content - Inner content of tag\n   * @param {{ [attr: string]: SimpleMarkdown.Attr }} [attributes] - Optional extra attributes of tag as an object of key-value pairs\n   *   eg. { \"href\": \"http://google.com\" }. Falsey attributes are filtered out.\n   * @param {boolean} [isClosed] - boolean that controls whether tag is closed or not (eg. img tags).\n   *   defaults to true\n   */\n\n\n  var htmlTag = function (tagName\n  /* : string */\n  , content\n  /* : string */\n  , attributes\n  /* : ?{[any]: ?Attr} */\n  , isClosed\n  /* : ?boolean */\n  ) {\n    attributes = attributes || {};\n    isClosed = typeof isClosed !== 'undefined' ? isClosed : true;\n    var attributeString = \"\";\n\n    for (var attr in attributes) {\n      var attribute = attributes[attr]; // Removes falsey attributes\n\n      if (Object.prototype.hasOwnProperty.call(attributes, attr) && attribute) {\n        attributeString += \" \" + sanitizeText(attr) + '=\"' + sanitizeText(attribute) + '\"';\n      }\n    }\n\n    var unclosedTag = \"<\" + tagName + attributeString + \">\";\n\n    if (isClosed) {\n      return unclosedTag + content + \"</\" + tagName + \">\";\n    } else {\n      return unclosedTag;\n    }\n  };\n\n  var EMPTY_PROPS = {};\n  /**\n   * @param {string | null | undefined} url - url to sanitize\n   * @returns {string | null} - url if safe, or null if a safe url could not be made\n   */\n\n  var sanitizeUrl = function (url\n  /* : ?string */\n  ) {\n    if (url == null) {\n      return null;\n    }\n\n    try {\n      var prot = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '').toLowerCase();\n\n      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n        return null;\n      }\n    } catch (e) {\n      // decodeURIComponent sometimes throws a URIError\n      // See `decodeURIComponent('a%AFc');`\n      // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n      return null;\n    }\n\n    return url;\n  };\n\n  var SANITIZE_TEXT_R = /[<>&\"']/g;\n  /** @type {any} */\n\n  var SANITIZE_TEXT_CODES = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '/': '&#x2F;',\n    \"`\": '&#96;'\n  };\n  /**\n   * @param {SimpleMarkdown.Attr} text\n   * @returns {string}\n   */\n\n  var sanitizeText = function (text\n  /* : Attr */\n  ) {\n    return String(text).replace(SANITIZE_TEXT_R, function (chr) {\n      return SANITIZE_TEXT_CODES[chr];\n    });\n  };\n\n  var UNESCAPE_URL_R = /\\\\([^0-9A-Za-z\\s])/g;\n  /**\n   * @param {string} rawUrlString\n   * @returns {string}\n   */\n\n  var unescapeUrl = function (rawUrlString\n  /* : string */\n  ) {\n    return rawUrlString.replace(UNESCAPE_URL_R, \"$1\");\n  };\n  /**\n   * Parse some content with the parser `parse`, with state.inline\n   * set to true. Useful for block elements; not generally necessary\n   * to be used by inline elements (where state.inline is already true.\n   *\n   * @param {SimpleMarkdown.Parser} parse\n   * @param {string} content\n   * @param {SimpleMarkdown.State} state\n   * @returns {SimpleMarkdown.ASTNode}\n   */\n\n\n  var parseInline = function (parse, content, state) {\n    var isCurrentlyInline = state.inline || false;\n    state.inline = true;\n    var result = parse(content, state);\n    state.inline = isCurrentlyInline;\n    return result;\n  };\n  /**\n   * @param {SimpleMarkdown.Parser} parse\n   * @param {string} content\n   * @param {SimpleMarkdown.State} state\n   * @returns {SimpleMarkdown.ASTNode}\n   */\n\n\n  var parseBlock = function (parse, content, state) {\n    var isCurrentlyInline = state.inline || false;\n    state.inline = false;\n    var result = parse(content + \"\\n\\n\", state);\n    state.inline = isCurrentlyInline;\n    return result;\n  };\n  /**\n   * @param {SimpleMarkdown.Capture} capture\n   * @param {SimpleMarkdown.Parser} parse\n   * @param {SimpleMarkdown.State} state\n   * @returns {SimpleMarkdown.UnTypedASTNode}\n   */\n\n\n  var parseCaptureInline = function (capture, parse, state) {\n    return {\n      content: parseInline(parse, capture[1], state)\n    };\n  };\n  /**\n   * @returns {SimpleMarkdown.UnTypedASTNode}\n   */\n\n\n  var ignoreCapture = function () {\n    return {};\n  }; // recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\n\n\n  var LIST_BULLET = \"(?:[*+-]|\\\\d+\\\\.)\"; // recognize the start of a list item:\n  // leading space plus a bullet plus a space (`   * `)\n\n  var LIST_ITEM_PREFIX = \"( *)(\" + LIST_BULLET + \") +\";\n  var LIST_ITEM_PREFIX_R = new RegExp(\"^\" + LIST_ITEM_PREFIX); // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n\n  var LIST_ITEM_R = new RegExp(LIST_ITEM_PREFIX + \"[^\\\\n]*(?:\\\\n\" + \"(?!\\\\1\" + LIST_BULLET + \" )[^\\\\n]*)*(\\n|$)\", \"gm\");\n  var BLOCK_END_R = /\\n{2,}$/;\n  var INLINE_CODE_ESCAPE_BACKTICKS_R = /^ (?= *`)|(` *) $/g; // recognize the end of a paragraph block inside a list item:\n  // two or more newlines at end end of the item\n\n  var LIST_BLOCK_END_R = BLOCK_END_R;\n  var LIST_ITEM_END_R = / *\\n+$/; // check whether a list item has paragraphs: if it does,\n  // we leave the newlines at the end\n\n  var LIST_R = new RegExp(\"^( *)(\" + LIST_BULLET + \") \" + \"[\\\\s\\\\S]+?(?:\\n{2,}(?! )\" + \"(?!\\\\1\" + LIST_BULLET + \" )\\\\n*\" + // the \\\\s*$ here is so that we can parse the inside of nested\n  // lists, where our content might end before we receive two `\\n`s\n  \"|\\\\s*\\n*$)\");\n  var LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/;\n\n  var TABLES = function () {\n    var TABLE_ROW_SEPARATOR_TRIM = /^ *\\| *| *\\| *$/g;\n    var TABLE_CELL_END_TRIM = / *$/;\n    var TABLE_RIGHT_ALIGN = /^ *-+: *$/;\n    var TABLE_CENTER_ALIGN = /^ *:-+: *$/;\n    var TABLE_LEFT_ALIGN = /^ *:-+ *$/;\n    /**\n     * @param {string} alignCapture\n     * @returns {SimpleMarkdown.TableAlignment}\n     */\n\n    var parseTableAlignCapture = function (alignCapture) {\n      if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n        return \"right\";\n      } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n        return \"center\";\n      } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n        return \"left\";\n      } else {\n        return null;\n      }\n    };\n    /**\n     * @param {string} source\n     * @param {SimpleMarkdown.Parser} parse\n     * @param {SimpleMarkdown.State} state\n     * @param {boolean} trimEndSeparators\n     * @returns {Array<SimpleMarkdown.TableAlignment>}\n     */\n\n\n    var parseTableAlign = function (source, parse, state, trimEndSeparators) {\n      if (trimEndSeparators) {\n        source = source.replace(TABLE_ROW_SEPARATOR_TRIM, \"\");\n      }\n\n      var alignText = source.trim().split(\"|\");\n      return alignText.map(parseTableAlignCapture);\n    };\n    /**\n     * @param {string} source\n     * @param {SimpleMarkdown.Parser} parse\n     * @param {SimpleMarkdown.State} state\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.SingleASTNode[][]}\n     */\n\n\n    var parseTableRow = function (source, parse, state, trimEndSeparators) {\n      var prevInTable = state.inTable;\n      state.inTable = true;\n      var tableRow = parse(source.trim(), state);\n      state.inTable = prevInTable;\n      /** @type {SimpleMarkdown.SingleASTNode[][]} */\n\n      var cells = [[]];\n      tableRow.forEach(function (node, i) {\n        if (node.type === 'tableSeparator') {\n          // Filter out empty table separators at the start/end:\n          if (!trimEndSeparators || i !== 0 && i !== tableRow.length - 1) {\n            // Split the current row:\n            cells.push([]);\n          }\n        } else {\n          if (node.type === 'text' && (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')) {\n            node.content = node.content.replace(TABLE_CELL_END_TRIM, \"\");\n          }\n\n          cells[cells.length - 1].push(node);\n        }\n      });\n      return cells;\n    };\n    /**\n     * @param {string} source\n     * @param {SimpleMarkdown.Parser} parse\n     * @param {SimpleMarkdown.State} state\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.ASTNode[][]}\n     */\n\n\n    var parseTableCells = function (source, parse, state, trimEndSeparators) {\n      var rowsText = source.trim().split(\"\\n\");\n      return rowsText.map(function (rowText) {\n        return parseTableRow(rowText, parse, state, trimEndSeparators);\n      });\n    };\n    /**\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.SingleNodeParseFunction}\n     */\n\n\n    var parseTable = function (trimEndSeparators) {\n      /** @type {SimpleMarkdown.SingleNodeParseFunction} */\n      return function (capture, parse, state) {\n        state.inline = true;\n        var header = parseTableRow(capture[1], parse, state, trimEndSeparators);\n        var align = parseTableAlign(capture[2], parse, state, trimEndSeparators);\n        var cells = parseTableCells(capture[3], parse, state, trimEndSeparators);\n        state.inline = false;\n        return {\n          type: \"table\",\n          header: header,\n          align: align,\n          cells: cells\n        };\n      };\n    };\n\n    return {\n      parseTable: parseTable(true),\n      parseNpTable: parseTable(false),\n      TABLE_REGEX: /^ *(\\|.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/,\n      NPTABLE_REGEX: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/\n    };\n  }();\n\n  var LINK_INSIDE = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\";\n  var LINK_HREF_AND_TITLE = \"\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\";\n  var AUTOLINK_MAILTO_CHECK_R = /mailto:/i;\n  /**\n   * @param {SimpleMarkdown.Capture} capture\n   * @param {SimpleMarkdown.State} state\n   * @param {SimpleMarkdown.RefNode} refNode\n   * @returns {SimpleMarkdown.RefNode}\n   */\n\n  var parseRef = function (capture, state, refNode\n  /* : RefNode */\n  ) {\n    var ref = (capture[2] || capture[1]).replace(/\\s+/g, ' ').toLowerCase(); // We store information about previously seen defs on\n    // state._defs (_ to deconflict with client-defined\n    // state). If the def for this reflink/refimage has\n    // already been seen, we can use its target/source\n    // and title here:\n\n    if (state._defs && state._defs[ref]) {\n      var def = state._defs[ref]; // `refNode` can be a link or an image. Both use\n      // target and title properties.\n\n      refNode.target = def.target;\n      refNode.title = def.title;\n    } // In case we haven't seen our def yet (or if someone\n    // overwrites that def later on), we add this node\n    // to the list of ref nodes for that def. Then, when\n    // we find the def, we can modify this link/image AST\n    // node :).\n    // I'm sorry.\n\n\n    state._refs = state._refs || {};\n    state._refs[ref] = state._refs[ref] || [];\n\n    state._refs[ref].push(refNode);\n\n    return refNode;\n  };\n\n  var currOrder = 0;\n  /** @type {SimpleMarkdown.DefaultRules} */\n\n  var defaultRules\n  /* : DefaultRules */\n  = {\n    Array: {\n      react: function (arr, output, state) {\n        var oldKey = state.key;\n        var result\n        /* : Array<ReactElements> */\n        = []; // map output over the ast, except group any text\n        // nodes together into a single string output.\n\n        for (var i = 0, key = 0; i < arr.length; i++, key++) {\n          // `key` is our numerical `state.key`, which we increment for\n          // every output node, but don't change for joined text nodes.\n          // (i, however, must change for joined text nodes)\n          state.key = '' + i;\n          var node = arr[i];\n\n          if (node.type === 'text') {\n            node = {\n              type: 'text',\n              content: node.content\n            };\n\n            for (; i + 1 < arr.length && arr[i + 1].type === 'text'; i++) {\n              node.content += arr[i + 1].content;\n            }\n          }\n\n          result.push(output(node, state));\n        }\n\n        state.key = oldKey;\n        return result;\n      },\n      html: function (arr, output, state) {\n        var result = \"\"; // map output over the ast, except group any text\n        // nodes together into a single string output.\n\n        for (var i = 0; i < arr.length; i++) {\n          var node = arr[i];\n\n          if (node.type === 'text') {\n            node = {\n              type: 'text',\n              content: node.content\n            };\n\n            for (; i + 1 < arr.length && arr[i + 1].type === 'text'; i++) {\n              node.content += arr[i + 1].content;\n            }\n          }\n\n          result += output(node, state);\n        }\n\n        return result;\n      }\n    },\n    heading: {\n      order: currOrder++,\n      match: blockRegex(/^ *(#{1,6})([^\\n]+?)#* *(?:\\n *)+\\n/),\n      parse: function (capture, parse, state) {\n        return {\n          level: capture[1].length,\n          content: parseInline(parse, capture[2].trim(), state)\n        };\n      },\n      react: function (node, output, state) {\n        return reactElement('h' + node.level, state.key, {\n          children: output(node.content, state)\n        });\n      },\n      html: function (node, output, state) {\n        return htmlTag(\"h\" + node.level, output(node.content, state));\n      }\n    },\n    nptable: {\n      order: currOrder++,\n      match: blockRegex(TABLES.NPTABLE_REGEX),\n      parse: TABLES.parseNpTable,\n      react: null,\n      html: null\n    },\n    lheading: {\n      order: currOrder++,\n      match: blockRegex(/^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/),\n      parse: function (capture, parse, state) {\n        return {\n          type: \"heading\",\n          level: capture[2] === '=' ? 1 : 2,\n          content: parseInline(parse, capture[1], state)\n        };\n      },\n      react: null,\n      html: null\n    },\n    hr: {\n      order: currOrder++,\n      match: blockRegex(/^( *[-*_]){3,} *(?:\\n *)+\\n/),\n      parse: ignoreCapture,\n      react: function (node, output, state) {\n        return reactElement('hr', state.key, EMPTY_PROPS);\n      },\n      html: function (node, output, state) {\n        return \"<hr>\";\n      }\n    },\n    codeBlock: {\n      order: currOrder++,\n      match: blockRegex(/^(?:    [^\\n]+\\n*)+(?:\\n *)+\\n/),\n      parse: function (capture, parse, state) {\n        var content = capture[0].replace(/^    /gm, '').replace(/\\n+$/, '');\n        return {\n          lang: undefined,\n          content: content\n        };\n      },\n      react: function (node, output, state) {\n        var className = node.lang ? \"markdown-code-\" + node.lang : undefined;\n        return reactElement('pre', state.key, {\n          children: reactElement('code', null, {\n            className: className,\n            children: node.content\n          })\n        });\n      },\n      html: function (node, output, state) {\n        var className = node.lang ? \"markdown-code-\" + node.lang : undefined;\n        var codeBlock = htmlTag(\"code\", sanitizeText(node.content), {\n          class: className\n        });\n        return htmlTag(\"pre\", codeBlock);\n      }\n    },\n    fence: {\n      order: currOrder++,\n      match: blockRegex(/^ *(`{3,}|~{3,}) *(?:(\\S+) *)?\\n([\\s\\S]+?)\\n?\\1 *(?:\\n *)+\\n/),\n      parse: function (capture, parse, state) {\n        return {\n          type: \"codeBlock\",\n          lang: capture[2] || undefined,\n          content: capture[3]\n        };\n      },\n      react: null,\n      html: null\n    },\n    blockQuote: {\n      order: currOrder++,\n      match: blockRegex(/^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/),\n      parse: function (capture, parse, state) {\n        var content = capture[0].replace(/^ *> ?/gm, '');\n        return {\n          content: parse(content, state)\n        };\n      },\n      react: function (node, output, state) {\n        return reactElement('blockquote', state.key, {\n          children: output(node.content, state)\n        });\n      },\n      html: function (node, output, state) {\n        return htmlTag(\"blockquote\", output(node.content, state));\n      }\n    },\n    list: {\n      order: currOrder++,\n      match: function (source, state) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        var prevCaptureStr = state.prevCapture == null ? \"\" : state.prevCapture[0];\n        var isStartOfLineCapture = LIST_LOOKBEHIND_R.exec(prevCaptureStr);\n        var isListBlock = state._list || !state.inline;\n\n        if (isStartOfLineCapture && isListBlock) {\n          source = isStartOfLineCapture[1] + source;\n          return LIST_R.exec(source);\n        } else {\n          return null;\n        }\n      },\n      parse: function (capture, parse, state) {\n        var bullet = capture[2];\n        var ordered = bullet.length > 1;\n        var start = ordered ? +bullet : undefined;\n        var items =\n        /** @type {string[]} */\n        capture[0].replace(LIST_BLOCK_END_R, \"\\n\").match(LIST_ITEM_R); // We know this will match here, because of how the regexes are\n        // defined\n\n        /*:: items = ((items : any) : Array<string>) */\n\n        var lastItemWasAParagraph = false;\n        var itemContent = items.map(function (\n        /** @type {string} */\n        item,\n        /** @type {number} */\n        i) {\n          // We need to see how far indented this item is:\n          var prefixCapture = LIST_ITEM_PREFIX_R.exec(item);\n          var space = prefixCapture ? prefixCapture[0].length : 0; // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n\n          var spaceRegex = new RegExp(\"^ {1,\" + space + \"}\", \"gm\"); // Before processing the item, we need a couple things\n\n          var content = item // remove indents on trailing lines:\n          .replace(spaceRegex, '') // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, ''); // I'm not sur4 why this is necessary again?\n\n          /*:: items = ((items : any) : Array<string>) */\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n\n          var isLastItem = i === items.length - 1;\n          var containsBlocks = content.indexOf(\"\\n\\n\") !== -1; // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n\n          var thisItemIsAParagraph = containsBlocks || isLastItem && lastItemWasAParagraph;\n          lastItemWasAParagraph = thisItemIsAParagraph; // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n\n          var oldStateInline = state.inline;\n          var oldStateList = state._list;\n          state._list = true; // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n\n          var adjustedContent;\n\n          if (thisItemIsAParagraph) {\n            state.inline = false;\n            adjustedContent = content.replace(LIST_ITEM_END_R, \"\\n\\n\");\n          } else {\n            state.inline = true;\n            adjustedContent = content.replace(LIST_ITEM_END_R, \"\");\n          }\n\n          var result = parse(adjustedContent, state); // Restore our state before returning\n\n          state.inline = oldStateInline;\n          state._list = oldStateList;\n          return result;\n        });\n        return {\n          ordered: ordered,\n          start: start,\n          items: itemContent\n        };\n      },\n      react: function (node, output, state) {\n        var ListWrapper = node.ordered ? \"ol\" : \"ul\";\n        return reactElement(ListWrapper, state.key, {\n          start: node.start,\n          children: node.items.map(function (\n          /** @type {SimpleMarkdown.ASTNode} */\n          item,\n          /** @type {number} */\n          i) {\n            return reactElement('li', '' + i, {\n              children: output(item, state)\n            });\n          })\n        });\n      },\n      html: function (node, output, state) {\n        var listItems = node.items.map(function (\n        /** @type {SimpleMarkdown.ASTNode} */\n        item) {\n          return htmlTag(\"li\", output(item, state));\n        }).join(\"\");\n        var listTag = node.ordered ? \"ol\" : \"ul\";\n        var attributes = {\n          start: node.start\n        };\n        return htmlTag(listTag, listItems, attributes);\n      }\n    },\n    def: {\n      order: currOrder++,\n      // TODO(aria): This will match without a blank line before the next\n      // block element, which is inconsistent with most of the rest of\n      // simple-markdown.\n      match: blockRegex(/^ *\\[([^\\]]+)\\]: *<?([^\\s>]*)>?(?: +[\"(]([^\\n]+)[\")])? *\\n(?: *\\n)*/),\n      parse: function (capture, parse, state) {\n        var def = capture[1].replace(/\\s+/g, ' ').toLowerCase();\n        var target = capture[2];\n        var title = capture[3]; // Look for previous links/images using this def\n        // If any links/images using this def have already been declared,\n        // they will have added themselves to the state._refs[def] list\n        // (_ to deconflict with client-defined state). We look through\n        // that list of reflinks for this def, and modify those AST nodes\n        // with our newly found information now.\n        // Sorry :(.\n\n        if (state._refs && state._refs[def]) {\n          // `refNode` can be a link or an image\n          state._refs[def].forEach(function (\n          /** @type {SimpleMarkdown.RefNode} */\n          refNode) {\n            refNode.target = target;\n            refNode.title = title;\n          });\n        } // Add this def to our map of defs for any future links/images\n        // In case we haven't found any or all of the refs referring to\n        // this def yet, we add our def to the table of known defs, so\n        // that future reflinks can modify themselves appropriately with\n        // this information.\n\n\n        state._defs = state._defs || {};\n        state._defs[def] = {\n          target: target,\n          title: title\n        }; // return the relevant parsed information\n        // for debugging only.\n\n        return {\n          def: def,\n          target: target,\n          title: title\n        };\n      },\n      react: function () {\n        return null;\n      },\n      html: function () {\n        return \"\";\n      }\n    },\n    table: {\n      order: currOrder++,\n      match: blockRegex(TABLES.TABLE_REGEX),\n      parse: TABLES.parseTable,\n      react: function (node, output, state) {\n        /**\n         * @param {number} colIndex\n         * @returns {{ [attr: string]: SimpleMarkdown.Attr }}\n         */\n        var getStyle = function (colIndex) {\n          return node.align[colIndex] == null ? {} : {\n            textAlign: node.align[colIndex]\n          };\n        };\n\n        var headers = node.header.map(function (\n        /** @type {SimpleMarkdown.ASTNode} */\n        content,\n        /** @type {number} */\n        i) {\n          return reactElement('th', '' + i, {\n            style: getStyle(i),\n            scope: 'col',\n            children: output(content, state)\n          });\n        });\n        var rows = node.cells.map(function (\n        /** @type {SimpleMarkdown.ASTNode[]} */\n        row,\n        /** @type {number} */\n        r) {\n          return reactElement('tr', '' + r, {\n            children: row.map(function (\n            /** @type {SimpleMarkdown.ASTNode} */\n            content,\n            /** @type {number} */\n            c) {\n              return reactElement('td', '' + c, {\n                style: getStyle(c),\n                children: output(content, state)\n              });\n            })\n          });\n        });\n        return reactElement('table', state.key, {\n          children: [reactElement('thead', 'thead', {\n            children: reactElement('tr', null, {\n              children: headers\n            })\n          }), reactElement('tbody', 'tbody', {\n            children: rows\n          })]\n        });\n      },\n      html: function (node, output, state) {\n        /**\n         * @param {number} colIndex\n         * @returns {string}\n         */\n        var getStyle = function (colIndex) {\n          return node.align[colIndex] == null ? \"\" : \"text-align:\" + node.align[colIndex] + \";\";\n        };\n\n        var headers = node.header.map(function (\n        /** @type {SimpleMarkdown.ASTNode} */\n        content,\n        /** @type {number} */\n        i) {\n          return htmlTag(\"th\", output(content, state), {\n            style: getStyle(i),\n            scope: \"col\"\n          });\n        }).join(\"\");\n        var rows = node.cells.map(function (\n        /** @type {SimpleMarkdown.ASTNode[]} */\n        row) {\n          var cols = row.map(function (\n          /** @type {SimpleMarkdown.ASTNode} */\n          content,\n          /** @type {number} */\n          c) {\n            return htmlTag(\"td\", output(content, state), {\n              style: getStyle(c)\n            });\n          }).join(\"\");\n          return htmlTag(\"tr\", cols);\n        }).join(\"\");\n        var thead = htmlTag(\"thead\", htmlTag(\"tr\", headers));\n        var tbody = htmlTag(\"tbody\", rows);\n        return htmlTag(\"table\", thead + tbody);\n      }\n    },\n    newline: {\n      order: currOrder++,\n      match: blockRegex(/^(?:\\n *)*\\n/),\n      parse: ignoreCapture,\n      react: function (node, output, state) {\n        return \"\\n\";\n      },\n      html: function (node, output, state) {\n        return \"\\n\";\n      }\n    },\n    paragraph: {\n      order: currOrder++,\n      match: blockRegex(/^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/),\n      parse: parseCaptureInline,\n      react: function (node, output, state) {\n        return reactElement('div', state.key, {\n          className: 'paragraph',\n          children: output(node.content, state)\n        });\n      },\n      html: function (node, output, state) {\n        var attributes = {\n          class: 'paragraph'\n        };\n        return htmlTag(\"div\", output(node.content, state), attributes);\n      }\n    },\n    escape: {\n      order: currOrder++,\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: inlineRegex(/^\\\\([^0-9A-Za-z\\s])/),\n      parse: function (capture, parse, state) {\n        return {\n          type: \"text\",\n          content: capture[1]\n        };\n      },\n      react: null,\n      html: null\n    },\n    tableSeparator: {\n      order: currOrder++,\n      match: function (source, state) {\n        if (!state.inTable) {\n          return null;\n        }\n\n        return /^ *\\| */.exec(source);\n      },\n      parse: function () {\n        return {\n          type: 'tableSeparator'\n        };\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react: function () {\n        return ' | ';\n      },\n      html: function () {\n        return ' &vert; ';\n      }\n    },\n    autolink: {\n      order: currOrder++,\n      match: inlineRegex(/^<([^: >]+:\\/[^ >]+)>/),\n      parse: function (capture, parse, state) {\n        return {\n          type: \"link\",\n          content: [{\n            type: \"text\",\n            content: capture[1]\n          }],\n          target: capture[1]\n        };\n      },\n      react: null,\n      html: null\n    },\n    mailto: {\n      order: currOrder++,\n      match: inlineRegex(/^<([^ >]+@[^ >]+)>/),\n      parse: function (capture, parse, state) {\n        var address = capture[1];\n        var target = capture[1]; // Check for a `mailto:` already existing in the link:\n\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = \"mailto:\" + target;\n        }\n\n        return {\n          type: \"link\",\n          content: [{\n            type: \"text\",\n            content: address\n          }],\n          target: target\n        };\n      },\n      react: null,\n      html: null\n    },\n    url: {\n      order: currOrder++,\n      match: inlineRegex(/^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/),\n      parse: function (capture, parse, state) {\n        return {\n          type: \"link\",\n          content: [{\n            type: \"text\",\n            content: capture[1]\n          }],\n          target: capture[1],\n          title: undefined\n        };\n      },\n      react: null,\n      html: null\n    },\n    link: {\n      order: currOrder++,\n      match: inlineRegex(new RegExp(\"^\\\\[(\" + LINK_INSIDE + \")\\\\]\\\\(\" + LINK_HREF_AND_TITLE + \"\\\\)\")),\n      parse: function (capture, parse, state) {\n        var link = {\n          content: parse(capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3]\n        };\n        return link;\n      },\n      react: function (node, output, state) {\n        return reactElement('a', state.key, {\n          href: sanitizeUrl(node.target),\n          title: node.title,\n          children: output(node.content, state)\n        });\n      },\n      html: function (node, output, state) {\n        var attributes = {\n          href: sanitizeUrl(node.target),\n          title: node.title\n        };\n        return htmlTag(\"a\", output(node.content, state), attributes);\n      }\n    },\n    image: {\n      order: currOrder++,\n      match: inlineRegex(new RegExp(\"^!\\\\[(\" + LINK_INSIDE + \")\\\\]\\\\(\" + LINK_HREF_AND_TITLE + \"\\\\)\")),\n      parse: function (capture, parse, state) {\n        var image = {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3]\n        };\n        return image;\n      },\n      react: function (node, output, state) {\n        return reactElement('img', state.key, {\n          src: sanitizeUrl(node.target),\n          alt: node.alt,\n          title: node.title\n        });\n      },\n      html: function (node, output, state) {\n        var attributes = {\n          src: sanitizeUrl(node.target),\n          alt: node.alt,\n          title: node.title\n        };\n        return htmlTag(\"img\", \"\", attributes, false);\n      }\n    },\n    reflink: {\n      order: currOrder++,\n      match: inlineRegex(new RegExp( // The first [part] of the link\n      \"^\\\\[(\" + LINK_INSIDE + \")\\\\]\" + // The [ref] target of the link\n      \"\\\\s*\\\\[([^\\\\]]*)\\\\]\")),\n      parse: function (capture, parse, state) {\n        return parseRef(capture, state, {\n          type: \"link\",\n          content: parse(capture[1], state)\n        });\n      },\n      react: null,\n      html: null\n    },\n    refimage: {\n      order: currOrder++,\n      match: inlineRegex(new RegExp( // The first [part] of the link\n      \"^!\\\\[(\" + LINK_INSIDE + \")\\\\]\" + // The [ref] target of the link\n      \"\\\\s*\\\\[([^\\\\]]*)\\\\]\")),\n      parse: function (capture, parse, state) {\n        return parseRef(capture, state, {\n          type: \"image\",\n          alt: capture[1]\n        });\n      },\n      react: null,\n      html: null\n    },\n    em: {\n      order: currOrder\n      /* same as strong/u */\n      ,\n      match: inlineRegex(new RegExp( // only match _s surrounding words.\n      \"^\\\\b_\" + \"((?:__|\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\_])+?)_\" + \"\\\\b\" + // Or match *s:\n      \"|\" + // Only match *s that are followed by a non-space:\n      \"^\\\\*(?=\\\\S)(\" + // Match at least one of:\n      \"(?:\" + //  - `**`: so that bolds inside italics don't close the\n      //          italics\n      \"\\\\*\\\\*|\" + //  - escape sequence: so escaped *s don't close us\n      \"\\\\\\\\[\\\\s\\\\S]|\" + //  - whitespace: followed by a non-* (we don't\n      //          want ' *' to close an italics--it might\n      //          start a list)\n      \"\\\\s+(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\s\\\\*\\\\\\\\]|\\\\*\\\\*)|\" + //  - non-whitespace, non-*, non-backslash characters\n      \"[^\\\\s\\\\*\\\\\\\\]\" + \")+?\" + // followed by a non-space, non-* then *\n      \")\\\\*(?!\\\\*)\")),\n      quality: function (capture) {\n        // precedence by length, `em` wins ties:\n        return capture[0].length + 0.2;\n      },\n      parse: function (capture, parse, state) {\n        return {\n          content: parse(capture[2] || capture[1], state)\n        };\n      },\n      react: function (node, output, state) {\n        return reactElement('em', state.key, {\n          children: output(node.content, state)\n        });\n      },\n      html: function (node, output, state) {\n        return htmlTag(\"em\", output(node.content, state));\n      }\n    },\n    strong: {\n      order: currOrder\n      /* same as em */\n      ,\n      match: inlineRegex(/^\\*\\*((?:\\\\[\\s\\S]|[^\\\\])+?)\\*\\*(?!\\*)/),\n      quality: function (capture) {\n        // precedence by length, wins ties vs `u`:\n        return capture[0].length + 0.1;\n      },\n      parse: parseCaptureInline,\n      react: function (node, output, state) {\n        return reactElement('strong', state.key, {\n          children: output(node.content, state)\n        });\n      },\n      html: function (node, output, state) {\n        return htmlTag(\"strong\", output(node.content, state));\n      }\n    },\n    u: {\n      order: currOrder++\n      /* same as em&strong; increment for next rule */\n      ,\n      match: inlineRegex(/^__((?:\\\\[\\s\\S]|[^\\\\])+?)__(?!_)/),\n      quality: function (capture) {\n        // precedence by length, loses all ties\n        return capture[0].length;\n      },\n      parse: parseCaptureInline,\n      react: function (node, output, state) {\n        return reactElement('u', state.key, {\n          children: output(node.content, state)\n        });\n      },\n      html: function (node, output, state) {\n        return htmlTag(\"u\", output(node.content, state));\n      }\n    },\n    del: {\n      order: currOrder++,\n      match: inlineRegex(/^~~(?=\\S)((?:\\\\[\\s\\S]|~(?!~)|[^\\s~\\\\]|\\s(?!~~))+?)~~/),\n      parse: parseCaptureInline,\n      react: function (node, output, state) {\n        return reactElement('del', state.key, {\n          children: output(node.content, state)\n        });\n      },\n      html: function (node, output, state) {\n        return htmlTag(\"del\", output(node.content, state));\n      }\n    },\n    inlineCode: {\n      order: currOrder++,\n      match: inlineRegex(/^(`+)([\\s\\S]*?[^`])\\1(?!`)/),\n      parse: function (capture, parse, state) {\n        return {\n          content: capture[2].replace(INLINE_CODE_ESCAPE_BACKTICKS_R, \"$1\")\n        };\n      },\n      react: function (node, output, state) {\n        return reactElement('code', state.key, {\n          children: node.content\n        });\n      },\n      html: function (node, output, state) {\n        return htmlTag(\"code\", sanitizeText(node.content));\n      }\n    },\n    br: {\n      order: currOrder++,\n      match: anyScopeRegex(/^ {2,}\\n/),\n      parse: ignoreCapture,\n      react: function (node, output, state) {\n        return reactElement('br', state.key, EMPTY_PROPS);\n      },\n      html: function (node, output, state) {\n        return \"<br>\";\n      }\n    },\n    text: {\n      order: currOrder++,\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(/^[\\s\\S]+?(?=[^0-9A-Za-z\\s\\u00c0-\\uffff]|\\n\\n| {2,}\\n|\\w+:\\S|$)/),\n      parse: function (capture, parse, state) {\n        return {\n          content: capture[0]\n        };\n      },\n      react: function (node, output, state) {\n        return node.content;\n      },\n      html: function (node, output, state) {\n        return sanitizeText(node.content);\n      }\n    }\n  };\n  /** (deprecated)\n   * @param {any} rules\n   * @param {any} property\n   * @returns {any}\n   */\n\n  var ruleOutput = function (\n  /* :: <Rule : Object> */\n  rules\n  /* : OutputRules<Rule> */\n  , property\n  /* : $Keys<Rule> */\n  ) {\n    if (!property && typeof console !== \"undefined\") {\n      console.warn(\"simple-markdown ruleOutput should take 'react' or \" + \"'html' as the second argument.\");\n    }\n    /** @type {SimpleMarkdown.NodeOutput<any>} */\n\n\n    var nestedRuleOutput\n    /* : NodeOutput<any> */\n    = function (ast\n    /* : SingleASTNode */\n    , outputFunc\n    /* : Output<any> */\n    , state\n    /* : State */\n    ) {\n      return rules[ast.type][property](ast, outputFunc, state);\n    };\n\n    return nestedRuleOutput;\n  };\n  /** (deprecated)\n   * @param {any} outputFunc\n   * @returns {any}\n   */\n\n\n  var reactFor = function (outputFunc\n  /* : ReactNodeOutput */\n  )\n  /* : ReactOutput */\n  {\n    /** @type {SimpleMarkdown.ReactOutput} */\n    var nestedOutput\n    /* : ReactOutput */\n    = function (ast, state) {\n      state = state || {};\n\n      if (Array.isArray(ast)) {\n        var oldKey = state.key;\n        var result\n        /* : Array<ReactElements> */\n        = []; // map nestedOutput over the ast, except group any text\n        // nodes together into a single string output.\n\n        var lastResult = null;\n\n        for (var i = 0; i < ast.length; i++) {\n          state.key = '' + i;\n          var nodeOut = nestedOutput(ast[i], state);\n\n          if (typeof nodeOut === \"string\" && typeof lastResult === \"string\") {\n            lastResult = lastResult + nodeOut;\n            result[result.length - 1] = lastResult;\n          } else {\n            result.push(nodeOut);\n            lastResult = nodeOut;\n          }\n        }\n\n        state.key = oldKey;\n        return result;\n      } else {\n        return outputFunc(ast, nestedOutput, state);\n      }\n    };\n\n    return nestedOutput;\n  };\n  /** (deprecated)\n   * @param {any} outputFunc\n   * @returns {any}\n   */\n\n\n  var htmlFor = function (outputFunc\n  /* : HtmlNodeOutput */\n  )\n  /* : HtmlOutput */\n  {\n    /** @type {SimpleMarkdown.HtmlOutput} */\n    var nestedOutput\n    /* : HtmlOutput */\n    = function (ast, state) {\n      state = state || {};\n\n      if (Array.isArray(ast)) {\n        return ast.map(function (node) {\n          return nestedOutput(node, state);\n        }).join(\"\");\n      } else {\n        return outputFunc(ast, nestedOutput, state);\n      }\n    };\n\n    return nestedOutput;\n  };\n  /**\n   * @type {SimpleMarkdown.OutputFor}\n   */\n\n\n  var outputFor = function (\n  /* :: <Rule : Object> */\n  rules\n  /* : OutputRules<Rule> */\n  , property\n  /* : $Keys<Rule> */\n  , defaultState\n  /* : ?State */\n  ) {\n    if (!property) {\n      throw new Error('simple-markdown: outputFor: `property` must be ' + 'defined. ' + 'if you just upgraded, you probably need to replace `outputFor` ' + 'with `reactFor`');\n    }\n    /** @type {SimpleMarkdown.State} */\n\n\n    var latestState;\n    /** @type {SimpleMarkdown.ArrayRule} */\n\n    var arrayRule = rules.Array || defaultRules.Array; // Tricks to convince tsc that this var is not null:\n\n    var arrayRuleCheck = arrayRule[property];\n\n    if (!arrayRuleCheck) {\n      throw new Error('simple-markdown: outputFor: to join nodes of type `' + property + '` you must provide an `Array:` joiner rule with that type, ' + 'Please see the docs for details on specifying an Array rule.');\n    }\n\n    var arrayRuleOutput = arrayRuleCheck;\n    /** @type {SimpleMarkdown.Output<any>} */\n\n    var nestedOutput\n    /* : Output<any> */\n    = function (ast, state) {\n      state = state || latestState;\n      latestState = state;\n\n      if (Array.isArray(ast)) {\n        return arrayRuleOutput(ast, nestedOutput, state);\n      } else {\n        return rules[ast.type][property](ast, nestedOutput, state);\n      }\n    };\n    /** @type {SimpleMarkdown.Output<any>} */\n\n\n    var outerOutput = function (ast, state) {\n      latestState = populateInitialState(state, defaultState);\n      return nestedOutput(ast, latestState);\n    };\n\n    return outerOutput;\n  };\n\n  var defaultRawParse = parserFor(defaultRules);\n  /**\n   * @param {string} source\n   * @param {SimpleMarkdown.OptionalState} [state]\n   * @returns {Array<SimpleMarkdown.SingleASTNode>}\n   */\n\n  var defaultBlockParse = function (source, state) {\n    state = state || {};\n    state.inline = false;\n    return defaultRawParse(source, state);\n  };\n  /**\n   * @param {string} source\n   * @param {SimpleMarkdown.OptionalState} [state]\n   * @returns {Array<SimpleMarkdown.SingleASTNode>}\n   */\n\n\n  var defaultInlineParse = function (source, state) {\n    state = state || {};\n    state.inline = true;\n    return defaultRawParse(source, state);\n  };\n  /**\n   * @param {string} source\n   * @param {SimpleMarkdown.OptionalState} [state]\n   * @returns {Array<SimpleMarkdown.SingleASTNode>}\n   */\n\n\n  var defaultImplicitParse = function (source, state) {\n    var isBlock = BLOCK_END_R.test(source);\n    state = state || {};\n    state.inline = !isBlock;\n    return defaultRawParse(source, state);\n  };\n  /** @type {SimpleMarkdown.ReactOutput} */\n\n\n  var defaultReactOutput\n  /* : ReactOutput */\n  = outputFor(defaultRules, \"react\");\n  /** @type {SimpleMarkdown.HtmlOutput} */\n\n  var defaultHtmlOutput\n  /* : HtmlOutput */\n  = outputFor(defaultRules, \"html\");\n  /**\n   * @param {string} source\n   * @param {SimpleMarkdown.OptionalState} [state]\n   * @returns {SimpleMarkdown.ReactElements}\n   */\n\n  var markdownToReact = function (source, state)\n  /* : ReactElements */\n  {\n    return defaultReactOutput(defaultBlockParse(source, state), state);\n  };\n  /**\n   * @param {string} source\n   * @param {SimpleMarkdown.OptionalState} [state]\n   * @returns {string}\n   */\n\n\n  var markdownToHtml = function (source, state)\n  /* : string */\n  {\n    return defaultHtmlOutput(defaultBlockParse(source, state), state);\n  };\n  /**\n   * @param {SimpleMarkdown.ReactMarkdownProps} props\n   * @returns {SimpleMarkdown.ReactElement}\n   */\n\n\n  var ReactMarkdown = function (props) {\n    /** @type {Object} */\n    var divProps = {};\n\n    for (var prop in props) {\n      if (prop !== 'source' && Object.prototype.hasOwnProperty.call(props, prop)) {\n        divProps[prop] = props[prop];\n      }\n    }\n\n    divProps.children = markdownToReact(props.source);\n    return reactElement('div', null, divProps);\n  };\n  /*:: // Flow exports:\n  type Exports = {\n      +defaultRules: DefaultRules,\n      +parserFor: (rules: ParserRules, defaultState?: ?State) => Parser,\n      +outputFor: <Rule : Object>(rules: OutputRules<Rule>, param: $Keys<Rule>, defaultState?: ?State) => Output<any>,\n  \n      +ruleOutput: <Rule : Object>(rules: OutputRules<Rule>, param: $Keys<Rule>) => NodeOutput<any>,\n      +reactFor: (ReactNodeOutput) => ReactOutput,\n      +htmlFor: (HtmlNodeOutput) => HtmlOutput,\n  \n      +inlineRegex: (regex: RegExp) => MatchFunction,\n      +blockRegex: (regex: RegExp) => MatchFunction,\n      +anyScopeRegex: (regex: RegExp) => MatchFunction,\n      +parseInline: (parse: Parser, content: string, state: State) => ASTNode,\n      +parseBlock: (parse: Parser, content: string, state: State) => ASTNode,\n  \n      +markdownToReact: (source: string, state?: ?State) => ReactElements,\n      +markdownToHtml: (source: string, state?: ?State) => string,\n      +ReactMarkdown: (props: { source: string, [string]: any }) => ReactElement,\n  \n      +defaultRawParse: (source: string, state?: ?State) => Array<SingleASTNode>,\n      +defaultBlockParse: (source: string, state?: ?State) => Array<SingleASTNode>,\n      +defaultInlineParse: (source: string, state?: ?State) => Array<SingleASTNode>,\n      +defaultImplicitParse: (source: string, state?: ?State) => Array<SingleASTNode>,\n  \n      +defaultReactOutput: ReactOutput,\n      +defaultHtmlOutput: HtmlOutput,\n  \n      +preprocess: (source: string) => string,\n      +sanitizeText: (text: Attr) => string,\n      +sanitizeUrl: (url: ?string) => ?string,\n      +unescapeUrl: (url: string) => string,\n      +htmlTag: (tagName: string, content: string, attributes: ?{ [any]: ?Attr }, isClosed: ?boolean) => string,\n      +reactElement: (type: string, key: string | null, props: { [string]: any }) => ReactElement,\n  };\n  \n  export type {\n      // Hopefully you shouldn't have to use these, but they're here if you need!\n      // Top-level API:\n      State,\n      Parser,\n      Output,\n      ReactOutput,\n      HtmlOutput,\n  \n      // Most of the following types should be considered experimental and\n      // subject to change or change names. Again, they shouldn't be necessary,\n      // but if they are I'd love to hear how so I can better support them!\n  \n      // Individual Rule fields:\n      Capture,\n      MatchFunction,\n      ParseFunction,\n      NodeOutput,\n      ArrayNodeOutput,\n      ReactNodeOutput,\n  \n      // Single rules:\n      ParserRule,\n      ReactOutputRule,\n      HtmlOutputRule,\n  \n      // Sets of rules:\n      ParserRules,\n      OutputRules,\n      Rules,\n      ReactRules,\n      HtmlRules,\n  };\n  */\n\n\n  var SimpleMarkdown\n  /* : Exports */\n  = {\n    defaultRules: defaultRules,\n    parserFor: parserFor,\n    outputFor: outputFor,\n    inlineRegex: inlineRegex,\n    blockRegex: blockRegex,\n    anyScopeRegex: anyScopeRegex,\n    parseInline: parseInline,\n    parseBlock: parseBlock,\n    // default wrappers:\n    markdownToReact: markdownToReact,\n    markdownToHtml: markdownToHtml,\n    ReactMarkdown: ReactMarkdown,\n    defaultBlockParse: defaultBlockParse,\n    defaultInlineParse: defaultInlineParse,\n    defaultImplicitParse: defaultImplicitParse,\n    defaultReactOutput: defaultReactOutput,\n    defaultHtmlOutput: defaultHtmlOutput,\n    preprocess: preprocess,\n    sanitizeText: sanitizeText,\n    sanitizeUrl: sanitizeUrl,\n    unescapeUrl: unescapeUrl,\n    htmlTag: htmlTag,\n    reactElement: reactElement,\n    // deprecated:\n    defaultRawParse: defaultRawParse,\n    ruleOutput: ruleOutput,\n    reactFor: reactFor,\n    htmlFor: htmlFor,\n    defaultParse: function () {\n      if (typeof console !== 'undefined') {\n        console.warn('defaultParse is deprecated, please use `defaultImplicitParse`');\n      }\n\n      return defaultImplicitParse.apply(null,\n      /** @type {any} */\n      arguments);\n    },\n    defaultOutput: function () {\n      if (typeof console !== 'undefined') {\n        console.warn('defaultOutput is deprecated, please use `defaultReactOutput`');\n      }\n\n      return defaultReactOutput.apply(null,\n      /** @type {any} */\n      arguments);\n    }\n  };\n  return SimpleMarkdown;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/simple-markdown/simple-markdown.js\n");

/***/ }),

/***/ "../node_modules/twemoji-parser/dist/index.js":
/*!****************************************************!*\
  !*** ../node_modules/twemoji-parser/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TypeName = undefined;\nexports.parse = parse;\nexports.toCodePoints = toCodePoints;\n\nvar _regex = __webpack_require__(/*! ./lib/regex */ \"../node_modules/twemoji-parser/dist/lib/regex.js\");\n\nvar _regex2 = _interopRequireDefault(_regex);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TypeName = exports.TypeName = 'emoji'; // Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\n\nfunction parse(text, options) {\n  var assetType = options && options.assetType ? options.assetType : 'svg';\n  var getTwemojiUrl = options && options.buildUrl ? options.buildUrl : function (codepoints, assetType) {\n    return assetType === 'png' ? 'https://twemoji.maxcdn.com/v/latest/72x72/' + codepoints + '.png' : 'https://twemoji.maxcdn.com/v/latest/svg/' + codepoints + '.svg';\n  };\n  var entities = [];\n  _regex2.default.lastIndex = 0;\n\n  while (true) {\n    var result = _regex2.default.exec(text);\n\n    if (!result) {\n      break;\n    }\n\n    var emojiText = result[0];\n    var codepoints = toCodePoints(removeVS16s(emojiText)).join('-');\n    entities.push({\n      url: codepoints ? getTwemojiUrl(codepoints, assetType) : '',\n      indices: [result.index, _regex2.default.lastIndex],\n      text: emojiText,\n      type: TypeName\n    });\n  }\n\n  return entities;\n}\n\nvar vs16RegExp = /\\uFE0F/g; // avoid using a string literal like '\\u200D' here because minifiers expand it inline\n\nvar zeroWidthJoiner = String.fromCharCode(0x200d);\n\nvar removeVS16s = function removeVS16s(rawEmoji) {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n};\n\nfunction toCodePoints(unicodeSurrogates) {\n  var points = [];\n  var char = 0;\n  var previous = 0;\n  var i = 0;\n\n  while (i < unicodeSurrogates.length) {\n    char = unicodeSurrogates.charCodeAt(i++);\n\n    if (previous) {\n      points.push((0x10000 + (previous - 0xd800 << 10) + (char - 0xdc00)).toString(16));\n      previous = 0;\n    } else if (char > 0xd800 && char <= 0xdbff) {\n      previous = char;\n    } else {\n      points.push(char.toString(16));\n    }\n  }\n\n  return points;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3R3ZW1vamktcGFyc2VyL2Rpc3QvaW5kZXguanM/YTRmMiJdLCJuYW1lcyI6WyJPYmplY3QiLCJ2YWx1ZSIsImV4cG9ydHMiLCJ1bmRlZmluZWQiLCJwYXJzZSIsInRvQ29kZVBvaW50cyIsIl9yZWdleCIsInJlcXVpcmUiLCJfcmVnZXgyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiVHlwZU5hbWUiLCJ0ZXh0Iiwib3B0aW9ucyIsImFzc2V0VHlwZSIsImdldFR3ZW1vamlVcmwiLCJidWlsZFVybCIsImNvZGVwb2ludHMiLCJlbnRpdGllcyIsImxhc3RJbmRleCIsInJlc3VsdCIsImV4ZWMiLCJlbW9qaVRleHQiLCJyZW1vdmVWUzE2cyIsImpvaW4iLCJwdXNoIiwidXJsIiwiaW5kaWNlcyIsImluZGV4IiwidHlwZSIsInZzMTZSZWdFeHAiLCJ6ZXJvV2lkdGhKb2luZXIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyYXdFbW9qaSIsImluZGV4T2YiLCJyZXBsYWNlIiwidW5pY29kZVN1cnJvZ2F0ZXMiLCJwb2ludHMiLCJjaGFyIiwicHJldmlvdXMiLCJpIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsOENBQTZDO0FBQzNDQyxPQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUMsZ0JBQUEsR0FBbUJDLFNBQW5CO0FBQ0FELGFBQUEsR0FBZ0JFLEtBQWhCO0FBQ0FGLG9CQUFBLEdBQXVCRyxZQUF2Qjs7QUFFQSxJQUFJQyxNQUFNLEdBQUdDLG1CQUFPLENBQUMscUVBQUQsQ0FBcEI7O0FBRUEsSUFBSUMsT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ0gsTUFBRCxDQUFwQzs7QUFFQSxTQUFTRyxzQkFBVCxDQUFnQ0MsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0Ms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QUFxQztBQUMxQ0MsY0FBUSxHQUFHRCxJQUFYO0FBQ0QsS0FGTSxNQUVBO0FBQ0xELFlBQU0sQ0FBQ2IsSUFBUCxDQUFZYyxJQUFJLENBQUNLLFFBQUwsQ0FBYyxFQUFkLENBQVo7QUFDRDtBQUNGOztBQUNELFNBQU9OLE1BQVA7QUFDRCIsImZpbGUiOiIuLi9ub2RlX21vZHVsZXMvdHdlbW9qaS1wYXJzZXIvZGlzdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVHlwZU5hbWUgPSB1bmRlZmluZWQ7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnRvQ29kZVBvaW50cyA9IHRvQ29kZVBvaW50cztcblxudmFyIF9yZWdleCA9IHJlcXVpcmUoJy4vbGliL3JlZ2V4Jyk7XG5cbnZhciBfcmVnZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVnZXgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgVHlwZU5hbWUgPSBleHBvcnRzLlR5cGVOYW1lID0gJ2Vtb2ppJztcbi8vIENvcHlyaWdodCBUd2l0dGVyIEluYy4gTGljZW5zZWQgdW5kZXIgTUlUXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdHdpdHRlci90d2Vtb2ppLXBhcnNlci9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG5mdW5jdGlvbiBwYXJzZSh0ZXh0LCBvcHRpb25zKSB7XG4gIHZhciBhc3NldFR5cGUgPSBvcHRpb25zICYmIG9wdGlvbnMuYXNzZXRUeXBlID8gb3B0aW9ucy5hc3NldFR5cGUgOiAnc3ZnJztcbiAgdmFyIGdldFR3ZW1vamlVcmwgPSBvcHRpb25zICYmIG9wdGlvbnMuYnVpbGRVcmwgPyBvcHRpb25zLmJ1aWxkVXJsIDogZnVuY3Rpb24gKGNvZGVwb2ludHMsIGFzc2V0VHlwZSkge1xuICAgIHJldHVybiBhc3NldFR5cGUgPT09ICdwbmcnID8gJ2h0dHBzOi8vdHdlbW9qaS5tYXhjZG4uY29tL3YvbGF0ZXN0LzcyeDcyLycgKyBjb2RlcG9pbnRzICsgJy5wbmcnIDogJ2h0dHBzOi8vdHdlbW9qaS5tYXhjZG4uY29tL3YvbGF0ZXN0L3N2Zy8nICsgY29kZXBvaW50cyArICcuc3ZnJztcbiAgfTtcblxuICB2YXIgZW50aXRpZXMgPSBbXTtcblxuICBfcmVnZXgyLmRlZmF1bHQubGFzdEluZGV4ID0gMDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gX3JlZ2V4Mi5kZWZhdWx0LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbW9qaVRleHQgPSByZXN1bHRbMF07XG4gICAgdmFyIGNvZGVwb2ludHMgPSB0b0NvZGVQb2ludHMocmVtb3ZlVlMxNnMoZW1vamlUZXh0KSkuam9pbignLScpO1xuXG4gICAgZW50aXRpZXMucHVzaCh7XG4gICAgICB1cmw6IGNvZGVwb2ludHMgPyBnZXRUd2Vtb2ppVXJsKGNvZGVwb2ludHMsIGFzc2V0VHlwZSkgOiAnJyxcbiAgICAgIGluZGljZXM6IFtyZXN1bHQuaW5kZXgsIF9yZWdleDIuZGVmYXVsdC5sYXN0SW5kZXhdLFxuICAgICAgdGV4dDogZW1vamlUZXh0LFxuICAgICAgdHlwZTogVHlwZU5hbWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZW50aXRpZXM7XG59XG5cbnZhciB2czE2UmVnRXhwID0gL1xcdUZFMEYvZztcbi8vIGF2b2lkIHVzaW5nIGEgc3RyaW5nIGxpdGVyYWwgbGlrZSAnXFx1MjAwRCcgaGVyZSBiZWNhdXNlIG1pbmlmaWVycyBleHBhbmQgaXQgaW5saW5lXG52YXIgemVyb1dpZHRoSm9pbmVyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDIwMGQpO1xuXG52YXIgcmVtb3ZlVlMxNnMgPSBmdW5jdGlvbiByZW1vdmVWUzE2cyhyYXdFbW9qaSkge1xuICByZXR1cm4gcmF3RW1vamkuaW5kZXhPZih6ZXJvV2lkdGhKb2luZXIpIDwgMCA/IHJhd0Vtb2ppLnJlcGxhY2UodnMxNlJlZ0V4cCwgJycpIDogcmF3RW1vamk7XG59O1xuXG5mdW5jdGlvbiB0b0NvZGVQb2ludHModW5pY29kZVN1cnJvZ2F0ZXMpIHtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgY2hhciA9IDA7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIHZhciBpID0gMDtcbiAgd2hpbGUgKGkgPCB1bmljb2RlU3Vycm9nYXRlcy5sZW5ndGgpIHtcbiAgICBjaGFyID0gdW5pY29kZVN1cnJvZ2F0ZXMuY2hhckNvZGVBdChpKyspO1xuICAgIGlmIChwcmV2aW91cykge1xuICAgICAgcG9pbnRzLnB1c2goKDB4MTAwMDAgKyAocHJldmlvdXMgLSAweGQ4MDAgPDwgMTApICsgKGNoYXIgLSAweGRjMDApKS50b1N0cmluZygxNikpO1xuICAgICAgcHJldmlvdXMgPSAwO1xuICAgIH0gZWxzZSBpZiAoY2hhciA+IDB4ZDgwMCAmJiBjaGFyIDw9IDB4ZGJmZikge1xuICAgICAgcHJldmlvdXMgPSBjaGFyO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludHMucHVzaChjaGFyLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwb2ludHM7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/twemoji-parser/dist/index.js\n");

/***/ }),

/***/ "../node_modules/twemoji-parser/dist/lib/regex.js":
/*!********************************************************!*\
  !*** ../node_modules/twemoji-parser/dist/lib/regex.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n})); // Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\n// This file is generated by source/emoji/scripts/generate.sh\n\nexports.default = /(?:\\ud83d\\udc68\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1|\\ud83d\\udc6b\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6c\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6d\\ud83c[\\udffb-\\udfff]|\\ud83d[\\udc6b-\\udc6d])|(?:\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1)(?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\u2695\\ufe0f|\\u2696\\ufe0f|\\u2708\\ufe0f|\\ud83c[\\udf3e\\udf73\\udf7c\\udf84\\udf93\\udfa4\\udfa8\\udfeb\\udfed]|\\ud83d[\\udcbb\\udcbc\\udd27\\udd2c\\ude80\\ude92]|\\ud83e[\\uddaf-\\uddb3\\uddbc\\uddbd])|(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75]|\\u26f9)((?:\\ud83c[\\udffb-\\udfff]|\\ufe0f)\\u200d[\\u2640\\u2642]\\ufe0f)|(?:\\ud83c[\\udfc3\\udfc4\\udfca]|\\ud83d[\\udc6e\\udc70\\udc71\\udc73\\udc77\\udc81\\udc82\\udc86\\udc87\\ude45-\\ude47\\ude4b\\ude4d\\ude4e\\udea3\\udeb4-\\udeb6]|\\ud83e[\\udd26\\udd35\\udd37-\\udd39\\udd3d\\udd3e\\uddb8\\uddb9\\uddcd-\\uddcf\\uddd6-\\udddd])(?:\\ud83c[\\udffb-\\udfff])?\\u200d[\\u2640\\u2642]\\ufe0f|(?:\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d[\\udc68\\udc69]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68|\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d[\\udc68\\udc69]|\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f|\\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08|\\ud83c\\udff4\\u200d\\u2620\\ufe0f|\\ud83d\\udc15\\u200d\\ud83e\\uddba|\\ud83d\\udc3b\\u200d\\u2744\\ufe0f|\\ud83d\\udc41\\u200d\\ud83d\\udde8|\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc6f\\u200d\\u2640\\ufe0f|\\ud83d\\udc6f\\u200d\\u2642\\ufe0f|\\ud83e\\udd3c\\u200d\\u2640\\ufe0f|\\ud83e\\udd3c\\u200d\\u2642\\ufe0f|\\ud83e\\uddde\\u200d\\u2640\\ufe0f|\\ud83e\\uddde\\u200d\\u2642\\ufe0f|\\ud83e\\udddf\\u200d\\u2640\\ufe0f|\\ud83e\\udddf\\u200d\\u2642\\ufe0f|\\ud83d\\udc08\\u200d\\u2b1b)|[#*0-9]\\ufe0f?\\u20e3|(?:[©®\\u2122\\u265f]\\ufe0f)|(?:\\ud83c[\\udc04\\udd70\\udd71\\udd7e\\udd7f\\ude02\\ude1a\\ude2f\\ude37\\udf21\\udf24-\\udf2c\\udf36\\udf7d\\udf96\\udf97\\udf99-\\udf9b\\udf9e\\udf9f\\udfcd\\udfce\\udfd4-\\udfdf\\udff3\\udff5\\udff7]|\\ud83d[\\udc3f\\udc41\\udcfd\\udd49\\udd4a\\udd6f\\udd70\\udd73\\udd76-\\udd79\\udd87\\udd8a-\\udd8d\\udda5\\udda8\\uddb1\\uddb2\\uddbc\\uddc2-\\uddc4\\uddd1-\\uddd3\\udddc-\\uddde\\udde1\\udde3\\udde8\\uddef\\uddf3\\uddfa\\udecb\\udecd-\\udecf\\udee0-\\udee5\\udee9\\udef0\\udef3]|[\\u203c\\u2049\\u2139\\u2194-\\u2199\\u21a9\\u21aa\\u231a\\u231b\\u2328\\u23cf\\u23ed-\\u23ef\\u23f1\\u23f2\\u23f8-\\u23fa\\u24c2\\u25aa\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u2600-\\u2604\\u260e\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262a\\u262e\\u262f\\u2638-\\u263a\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267b\\u267f\\u2692-\\u2697\\u2699\\u269b\\u269c\\u26a0\\u26a1\\u26a7\\u26aa\\u26ab\\u26b0\\u26b1\\u26bd\\u26be\\u26c4\\u26c5\\u26c8\\u26cf\\u26d1\\u26d3\\u26d4\\u26e9\\u26ea\\u26f0-\\u26f5\\u26f8\\u26fa\\u26fd\\u2702\\u2708\\u2709\\u270f\\u2712\\u2714\\u2716\\u271d\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u2764\\u27a1\\u2934\\u2935\\u2b05-\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u3030\\u303d\\u3297\\u3299])(?:\\ufe0f|(?!\\ufe0e))|(?:(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75\\udd90]|[\\u261d\\u26f7\\u26f9\\u270c\\u270d])(?:\\ufe0f|(?!\\ufe0e))|(?:\\ud83c[\\udf85\\udfc2-\\udfc4\\udfc7\\udfca]|\\ud83d[\\udc42\\udc43\\udc46-\\udc50\\udc66-\\udc69\\udc6e\\udc70-\\udc78\\udc7c\\udc81-\\udc83\\udc85-\\udc87\\udcaa\\udd7a\\udd95\\udd96\\ude45-\\ude47\\ude4b-\\ude4f\\udea3\\udeb4-\\udeb6\\udec0\\udecc]|\\ud83e[\\udd0c\\udd0f\\udd18-\\udd1c\\udd1e\\udd1f\\udd26\\udd30-\\udd39\\udd3d\\udd3e\\udd77\\uddb5\\uddb6\\uddb8\\uddb9\\uddbb\\uddcd-\\uddcf\\uddd1-\\udddd]|[\\u270a\\u270b]))(?:\\ud83c[\\udffb-\\udfff])?|(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f|\\ud83c\\udde6\\ud83c[\\udde8-\\uddec\\uddee\\uddf1\\uddf2\\uddf4\\uddf6-\\uddfa\\uddfc\\uddfd\\uddff]|\\ud83c\\udde7\\ud83c[\\udde6\\udde7\\udde9-\\uddef\\uddf1-\\uddf4\\uddf6-\\uddf9\\uddfb\\uddfc\\uddfe\\uddff]|\\ud83c\\udde8\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\uddee\\uddf0-\\uddf5\\uddf7\\uddfa-\\uddff]|\\ud83c\\udde9\\ud83c[\\uddea\\uddec\\uddef\\uddf0\\uddf2\\uddf4\\uddff]|\\ud83c\\uddea\\ud83c[\\udde6\\udde8\\uddea\\uddec\\udded\\uddf7-\\uddfa]|\\ud83c\\uddeb\\ud83c[\\uddee-\\uddf0\\uddf2\\uddf4\\uddf7]|\\ud83c\\uddec\\ud83c[\\udde6\\udde7\\udde9-\\uddee\\uddf1-\\uddf3\\uddf5-\\uddfa\\uddfc\\uddfe]|\\ud83c\\udded\\ud83c[\\uddf0\\uddf2\\uddf3\\uddf7\\uddf9\\uddfa]|\\ud83c\\uddee\\ud83c[\\udde8-\\uddea\\uddf1-\\uddf4\\uddf6-\\uddf9]|\\ud83c\\uddef\\ud83c[\\uddea\\uddf2\\uddf4\\uddf5]|\\ud83c\\uddf0\\ud83c[\\uddea\\uddec-\\uddee\\uddf2\\uddf3\\uddf5\\uddf7\\uddfc\\uddfe\\uddff]|\\ud83c\\uddf1\\ud83c[\\udde6-\\udde8\\uddee\\uddf0\\uddf7-\\uddfb\\uddfe]|\\ud83c\\uddf2\\ud83c[\\udde6\\udde8-\\udded\\uddf0-\\uddff]|\\ud83c\\uddf3\\ud83c[\\udde6\\udde8\\uddea-\\uddec\\uddee\\uddf1\\uddf4\\uddf5\\uddf7\\uddfa\\uddff]|\\ud83c\\uddf4\\ud83c\\uddf2|\\ud83c\\uddf5\\ud83c[\\udde6\\uddea-\\udded\\uddf0-\\uddf3\\uddf7-\\uddf9\\uddfc\\uddfe]|\\ud83c\\uddf6\\ud83c\\udde6|\\ud83c\\uddf7\\ud83c[\\uddea\\uddf4\\uddf8\\uddfa\\uddfc]|\\ud83c\\uddf8\\ud83c[\\udde6-\\uddea\\uddec-\\uddf4\\uddf7-\\uddf9\\uddfb\\uddfd-\\uddff]|\\ud83c\\uddf9\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\udded\\uddef-\\uddf4\\uddf7\\uddf9\\uddfb\\uddfc\\uddff]|\\ud83c\\uddfa\\ud83c[\\udde6\\uddec\\uddf2\\uddf3\\uddf8\\uddfe\\uddff]|\\ud83c\\uddfb\\ud83c[\\udde6\\udde8\\uddea\\uddec\\uddee\\uddf3\\uddfa]|\\ud83c\\uddfc\\ud83c[\\uddeb\\uddf8]|\\ud83c\\uddfd\\ud83c\\uddf0|\\ud83c\\uddfe\\ud83c[\\uddea\\uddf9]|\\ud83c\\uddff\\ud83c[\\udde6\\uddf2\\uddfc]|\\ud83c[\\udccf\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01\\ude32-\\ude36\\ude38-\\ude3a\\ude50\\ude51\\udf00-\\udf20\\udf2d-\\udf35\\udf37-\\udf7c\\udf7e-\\udf84\\udf86-\\udf93\\udfa0-\\udfc1\\udfc5\\udfc6\\udfc8\\udfc9\\udfcf-\\udfd3\\udfe0-\\udff0\\udff4\\udff8-\\udfff]|\\ud83d[\\udc00-\\udc3e\\udc40\\udc44\\udc45\\udc51-\\udc65\\udc6a\\udc6f\\udc79-\\udc7b\\udc7d-\\udc80\\udc84\\udc88-\\udca9\\udcab-\\udcfc\\udcff-\\udd3d\\udd4b-\\udd4e\\udd50-\\udd67\\udda4\\uddfb-\\ude44\\ude48-\\ude4a\\ude80-\\udea2\\udea4-\\udeb3\\udeb7-\\udebf\\udec1-\\udec5\\uded0-\\uded2\\uded5-\\uded7\\udeeb\\udeec\\udef4-\\udefc\\udfe0-\\udfeb]|\\ud83e[\\udd0d\\udd0e\\udd10-\\udd17\\udd1d\\udd20-\\udd25\\udd27-\\udd2f\\udd3a\\udd3c\\udd3f-\\udd45\\udd47-\\udd76\\udd78\\udd7a-\\uddb4\\uddb7\\uddba\\uddbc-\\uddcb\\uddd0\\uddde-\\uddff\\ude70-\\ude74\\ude78-\\ude7a\\ude80-\\ude86\\ude90-\\udea8\\udeb0-\\udeb6\\udec0-\\udec2\\uded0-\\uded6]|[\\u23e9-\\u23ec\\u23f0\\u23f3\\u267e\\u26ce\\u2705\\u2728\\u274c\\u274e\\u2753-\\u2755\\u2795-\\u2797\\u27b0\\u27bf\\ue50a])|\\ufe0f/g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/twemoji-parser/dist/lib/regex.js\n");

/***/ }),

/***/ "../node_modules/unistore/dist/unistore.es.js":
/*!****************************************************!*\
  !*** ../node_modules/unistore/dist/unistore.es.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction n(n, t) {\n  for (var r in t) n[r] = t[r];\n\n  return n;\n}\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(t) {\n  var r = [];\n\n  function u(n) {\n    for (var t = [], u = 0; u < r.length; u++) r[u] === n ? n = null : t.push(r[u]);\n\n    r = t;\n  }\n\n  function e(u, e, f) {\n    t = e ? u : n(n({}, t), u);\n\n    for (var i = r, o = 0; o < i.length; o++) i[o](t, f);\n  }\n\n  return t = t || {}, {\n    action: function (n) {\n      function r(t) {\n        e(t, !1, n);\n      }\n\n      return function () {\n        for (var u = arguments, e = [t], f = 0; f < arguments.length; f++) e.push(u[f]);\n\n        var i = n.apply(this, e);\n        if (null != i) return i.then ? i.then(r) : r(i);\n      };\n    },\n    setState: e,\n    subscribe: function (n) {\n      return r.push(n), function () {\n        u(n);\n      };\n    },\n    unsubscribe: u,\n    getState: function () {\n      return t;\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsLmpzPzk0MTUiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanM/NDFmNSJdLCJuYW1lcyI6WyJhc3NpZ24iLCJvYmoiLCJwcm9wcyIsImxldCIsImkiLCJzdGF0ZSIsImxpc3RlbmVycyIsInVuc3Vic2NyaWJlIiwibGlzdGVuZXIiLCJvdXQiLCJsZW5ndGgiLCJwdXNoIiwic2V0U3RhdGUiLCJ1cGRhdGUiLCJvdmVyd3JpdGUiLCJhY3Rpb24iLCJjdXJyZW50TGlzdGVuZXJzIiwiYXBwbHkiLCJyZXN1bHQiLCJhcmdzIiwiYXJndW1lbnRzIiwicmV0IiwidGhpcyIsInRoZW4iLCJzdWJzY3JpYmUiLCJnZXRTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7OztBQXlCTyxTQUFTQSxDQUFULENBQWdCQyxDQUFoQixFQUFxQkMsQ0FBckIsRUFBcUJBO0FBQUFBLE9BQ3RCQyxJQUFJQyxDQURrQkYsSUFDYkEsQ0FEYUEsRUFDTkQsRUFBSUcsQ0FBSkgsSUFBU0MsRUFBTUUsQ0FBTkYsQ0FBVEQ7O0FBQWVHLFNBQzdCSCxDQUQ2Qkc7QUFDN0JIOztBQUFBQSw2QkNkTyxvQ0FBcUJJLENBQXJCLEVBQXFCQTtBQUFBQSxNQUMvQkMsSUFBWSxFQURtQkQ7O0FBQ25CLFdBR1BFLENBSE8sQ0FHS0MsQ0FITCxFQUdLQTtBQUFBQSxhQUNoQkMsSUFBTSxFQURVRCxFQUVYSixJQUFFLENBRlNJLEVBRU5KLElBQUVFLEVBQVVJLE1BRk5GLEVBRWNKLEdBRmRJLEVBR2ZGLEVBQVVGLENBQVZFLE1BQWVFLENBQWZGLEdBQ0hFLElBQVcsSUFEUkYsR0FJSEcsRUFBSUUsSUFBSkYsQ0FBU0gsRUFBVUYsQ0FBVkUsQ0FBVEcsQ0FKR0g7O0FBT0xBLFFBQVlHLENBQVpIO0FBQVlHOztBQUFBQSxXQUdKRyxDQUhJSCxDQUdLSSxDQUhMSixFQUdhSyxDQUhiTCxFQUd3Qk0sQ0FIeEJOLEVBR3dCTTtBQUNwQ1YsUUFBUVMsSUFBWUQsQ0FBWkMsR0FBcUJkLEVBQU9BLEVBQU8sRUFBUEEsRUFBV0ssQ0FBWEwsQ0FBUEEsRUFBMEJhLENBQTFCYixDQUE3Qks7O0FBQXVEUSxhQUNuREcsSUFBbUJWLENBRGdDTyxFQUU5Q1QsSUFBRSxDQUY0Q1MsRUFFekNULElBQUVZLEVBQWlCTixNQUZzQkcsRUFFZFQsR0FGY1MsRUFFVEcsRUFBaUJaLENBQWpCWSxFQUFvQlgsQ0FBcEJXLEVBQTJCRCxDQUEzQkM7QUFBMkJEOztBQUFBQSxTQWxCMUVWLElBQVFBLEtBQVMsRUFBakJBLEVBQWlCO0FBbUNoQlUsc0JBQU9BLENBQVBBLEVBQU9BO0FBQUFBLGVBQ0dFLENBREhGLENBQ1NHLENBRFRILEVBQ1NHO0FBQ2ROLFVBQVNNLENBQVROLEVBQVNNLENBQVEsQ0FBakJOLEVBQXdCRyxDQUF4Qkg7QUFBd0JHOztBQUFBQSxhQUlsQjtBQUFBLGdDQUNGSSxJQUFPLENBQUNkLENBQUQsQ0FETCxFQUVHRCxJQUFFLENBRkwsRUFFUUEsSUFBRWdCLFVBQVVWLE1BRnBCLEVBRTRCTixHQUY1QixFQUVpQ2UsRUFBS1IsSUFBTFEsQ0FBVUMsRUFBVWhCLENBQVZnQixDQUFWRDs7QUFBb0JmLFlBQ3ZEaUIsSUFBTU4sRUFBT0UsS0FBUEYsQ0FBYU8sSUFBYlAsRUFBbUJJLENBQW5CSixDQURpRFg7QUFDOUJlLFlBQ3BCLFFBQUxFLENBRHlCRixFQUN6QkUsT0FDQ0EsRUFBSUUsSUFBSkYsR0FBaUJBLEVBQUlFLElBQUpGLENBQVNKLENBQVRJLENBQWpCQSxHQUNHSixFQUFNSSxDQUFOSixDQUZKSTtBQUVVQSxPQVZVTjtBQVVWTSxLQS9DQTtBQStDQUEsY0FVaEJULENBekRnQjtBQWdFaEJZLHlCQUFVaEIsQ0FBVmdCLEVBQVVoQjtBQUFBQSxhQUNURixFQUFVSyxJQUFWTCxDQUFlRSxDQUFmRixHQUFlRTtBQUNBRCxVQUFZQyxDQUFaRDtBQUFZQyxPQUZsQkE7QUFFa0JBLEtBbEVaO0FBa0VZQSxpQkFRNUJELENBMUVnQjtBQWdGaEJrQjtBQUFBQSxhQUNRcEIsQ0FEUm9CO0FBQ1FwQjtBQWpGUSxHQWtCeURVO0FBK0RqRVYiLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3VuaXN0b3JlL2Rpc3QvdW5pc3RvcmUuZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCaW5kIGFuIG9iamVjdC9mYWN0b3J5IG9mIGFjdGlvbnMgdG8gdGhlIHN0b3JlIGFuZCB3cmFwIHRoZW0uXG5leHBvcnQgZnVuY3Rpb24gbWFwQWN0aW9ucyhhY3Rpb25zLCBzdG9yZSkge1xuXHRpZiAodHlwZW9mIGFjdGlvbnM9PT0nZnVuY3Rpb24nKSBhY3Rpb25zID0gYWN0aW9ucyhzdG9yZSk7XG5cdGxldCBtYXBwZWQgPSB7fTtcblx0Zm9yIChsZXQgaSBpbiBhY3Rpb25zKSB7XG5cdFx0bWFwcGVkW2ldID0gc3RvcmUuYWN0aW9uKGFjdGlvbnNbaV0pO1xuXHR9XG5cdHJldHVybiBtYXBwZWQ7XG59XG5cblxuLy8gc2VsZWN0KCdmb28sYmFyJykgY3JlYXRlcyBhIGZ1bmN0aW9uIG9mIHRoZSBmb3JtOiAoeyBmb28sIGJhciB9KSA9PiAoeyBmb28sIGJhciB9KVxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdChwcm9wZXJ0aWVzKSB7XG5cdGlmICh0eXBlb2YgcHJvcGVydGllcz09PSdzdHJpbmcnKSBwcm9wZXJ0aWVzID0gcHJvcGVydGllcy5zcGxpdCgvXFxzKixcXHMqLyk7XG5cdHJldHVybiBzdGF0ZSA9PiB7XG5cdFx0bGV0IHNlbGVjdGVkID0ge307XG5cdFx0Zm9yIChsZXQgaT0wOyBpPHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHNlbGVjdGVkW3Byb3BlcnRpZXNbaV1dID0gc3RhdGVbcHJvcGVydGllc1tpXV07XG5cdFx0fVxuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fTtcbn1cblxuXG4vLyBMaWdodGVyIE9iamVjdC5hc3NpZ24gc3RhbmQtaW5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24ob2JqLCBwcm9wcykge1xuXHRmb3IgKGxldCBpIGluIHByb3BzKSBvYmpbaV0gPSBwcm9wc1tpXTtcblx0cmV0dXJuIG9iajtcbn1cbiIsImltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBzdG9yZSwgd2hpY2ggaXMgYSB0aW55IGV2ZW50ZWQgc3RhdGUgY29udGFpbmVyLlxuICogQG5hbWUgY3JlYXRlU3RvcmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhdGU9e31dXHRcdE9wdGlvbmFsIGluaXRpYWwgc3RhdGVcbiAqIEByZXR1cm5zIHtzdG9yZX1cbiAqIEBleGFtcGxlXG4gKiBsZXQgc3RvcmUgPSBjcmVhdGVTdG9yZSgpO1xuICogc3RvcmUuc3Vic2NyaWJlKCBzdGF0ZSA9PiBjb25zb2xlLmxvZyhzdGF0ZSkgKTtcbiAqIHN0b3JlLnNldFN0YXRlKHsgYTogJ2InIH0pOyAgIC8vIGxvZ3MgeyBhOiAnYicgfVxuICogc3RvcmUuc2V0U3RhdGUoeyBjOiAnZCcgfSk7ICAgLy8gbG9ncyB7IGE6ICdiJywgYzogJ2QnIH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3RvcmUoc3RhdGUpIHtcblx0bGV0IGxpc3RlbmVycyA9IFtdO1xuXHRzdGF0ZSA9IHN0YXRlIHx8IHt9O1xuXG5cdGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG5cdFx0bGV0IG91dCA9IFtdO1xuXHRcdGZvciAobGV0IGk9MDsgaTxsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChsaXN0ZW5lcnNbaV09PT1saXN0ZW5lcikge1xuXHRcdFx0XHRsaXN0ZW5lciA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0b3V0LnB1c2gobGlzdGVuZXJzW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0bGlzdGVuZXJzID0gb3V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0U3RhdGUodXBkYXRlLCBvdmVyd3JpdGUsIGFjdGlvbikge1xuXHRcdHN0YXRlID0gb3ZlcndyaXRlID8gdXBkYXRlIDogYXNzaWduKGFzc2lnbih7fSwgc3RhdGUpLCB1cGRhdGUpO1xuXHRcdGxldCBjdXJyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuXHRcdGZvciAobGV0IGk9MDsgaTxjdXJyZW50TGlzdGVuZXJzLmxlbmd0aDsgaSsrKSBjdXJyZW50TGlzdGVuZXJzW2ldKHN0YXRlLCBhY3Rpb24pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFuIG9ic2VydmFibGUgc3RhdGUgY29udGFpbmVyLCByZXR1cm5lZCBmcm9tIHtAbGluayBjcmVhdGVTdG9yZX1cblx0ICogQG5hbWUgc3RvcmVcblx0ICovXG5cblx0cmV0dXJuIC8qKiBAbGVuZHMgc3RvcmUgKi8ge1xuXG5cdFx0LyoqXG5cdFx0ICogQ3JlYXRlIGEgYm91bmQgY29weSBvZiB0aGUgZ2l2ZW4gYWN0aW9uIGZ1bmN0aW9uLlxuXHRcdCAqIFRoZSBib3VuZCByZXR1cm5lZCBmdW5jdGlvbiBpbnZva2VzIGFjdGlvbigpIGFuZCBwZXJzaXN0cyB0aGUgcmVzdWx0IGJhY2sgdG8gdGhlIHN0b3JlLlxuXHRcdCAqIElmIHRoZSByZXR1cm4gdmFsdWUgb2YgYGFjdGlvbmAgaXMgYSBQcm9taXNlLCB0aGUgcmVzb2x2ZWQgdmFsdWUgd2lsbCBiZSB1c2VkIGFzIHN0YXRlLlxuXHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGFjdGlvblx0QW4gYWN0aW9uIG9mIHRoZSBmb3JtIGBhY3Rpb24oc3RhdGUsIC4uLmFyZ3MpIC0+IHN0YXRlVXBkYXRlYFxuXHRcdCAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYm91bmRBY3Rpb24oKVxuXHRcdCAqL1xuXHRcdGFjdGlvbihhY3Rpb24pIHtcblx0XHRcdGZ1bmN0aW9uIGFwcGx5KHJlc3VsdCkge1xuXHRcdFx0XHRzZXRTdGF0ZShyZXN1bHQsIGZhbHNlLCBhY3Rpb24pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOb3RlOiBwZXJmIHRlc3RzIHZlcmlmeWluZyB0aGlzIGltcGxlbWVudGF0aW9uOiBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzVhMjk1ZTYyOTk2MzQ4MDBhMDM0OTUwMFxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsZXQgYXJncyA9IFtzdGF0ZV07XG5cdFx0XHRcdGZvciAobGV0IGk9MDsgaTxhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuXHRcdFx0XHRsZXQgcmV0ID0gYWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdFx0XHRpZiAocmV0IT1udWxsKSB7XG5cdFx0XHRcdFx0aWYgKHJldC50aGVuKSByZXR1cm4gcmV0LnRoZW4oYXBwbHkpO1xuXHRcdFx0XHRcdHJldHVybiBhcHBseShyZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBBcHBseSBhIHBhcnRpYWwgc3RhdGUgb2JqZWN0IHRvIHRoZSBjdXJyZW50IHN0YXRlLCBpbnZva2luZyByZWdpc3RlcmVkIGxpc3RlbmVycy5cblx0XHQgKiBAcGFyYW0ge09iamVjdH0gdXBkYXRlXHRcdFx0XHRBbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIHRvIGJlIG1lcmdlZCBpbnRvIHN0YXRlXG5cdFx0ICogQHBhcmFtIHtCb29sZWFufSBbb3ZlcndyaXRlPWZhbHNlXVx0SWYgYHRydWVgLCB1cGRhdGUgd2lsbCByZXBsYWNlIHN0YXRlIGluc3RlYWQgb2YgYmVpbmcgbWVyZ2VkIGludG8gaXRcblx0XHQgKi9cblx0XHRzZXRTdGF0ZSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW5ldmVyIHN0YXRlIGlzIGNoYW5nZWQuIFJldHVybnMgYW4gYHVuc3Vic2NyaWJlKClgIGZ1bmN0aW9uLlxuXHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyXHRBIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBzdGF0ZSBjaGFuZ2VzLiBHZXRzIHBhc3NlZCB0aGUgbmV3IHN0YXRlLlxuXHRcdCAqIEByZXR1cm5zIHtGdW5jdGlvbn0gdW5zdWJzY3JpYmUoKVxuXHRcdCAqL1xuXHRcdHN1YnNjcmliZShsaXN0ZW5lcikge1xuXHRcdFx0bGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXHRcdFx0cmV0dXJuICgpID0+IHsgdW5zdWJzY3JpYmUobGlzdGVuZXIpOyB9O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZW1vdmUgYSBwcmV2aW91c2x5LXJlZ2lzdGVyZWQgbGlzdGVuZXIgZnVuY3Rpb24uXG5cdFx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXJcdFRoZSBjYWxsYmFjayBwcmV2aW91c2x5IHBhc3NlZCB0byBgc3Vic2NyaWJlKClgIHRoYXQgc2hvdWxkIGJlIHJlbW92ZWQuXG5cdFx0ICogQGZ1bmN0aW9uXG5cdFx0ICovXG5cdFx0dW5zdWJzY3JpYmUsXG5cblx0XHQvKipcblx0XHQgKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBzdGF0ZSBvYmplY3QuXG5cdFx0ICogQHJldHVybnMge09iamVjdH0gc3RhdGVcblx0XHQgKi9cblx0XHRnZXRTdGF0ZSgpIHtcblx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHR9XG5cdH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/unistore/dist/unistore.es.js\n");

/***/ }),

/***/ "../node_modules/unistore/preact.js":
/*!******************************************!*\
  !*** ../node_modules/unistore/preact.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var t = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n\nfunction n(t, n) {\n  for (var r in n) t[r] = n[r];\n\n  return t;\n}\n\nfunction r(t) {\n  this.getChildContext = function () {\n    return {\n      store: t.store\n    };\n  };\n}\n\nr.prototype.render = function (t) {\n  return t.children && t.children[0] || t.children;\n}, exports.connect = function (r, e) {\n  var o;\n  return \"function\" != typeof r && (\"string\" == typeof (o = r || {}) && (o = o.split(/\\s*,\\s*/)), r = function (t) {\n    for (var n = {}, r = 0; r < o.length; r++) n[o[r]] = t[o[r]];\n\n    return n;\n  }), function (o) {\n    function i(i, u) {\n      var c = this,\n          f = u.store,\n          s = r(f ? f.getState() : {}, i),\n          a = e ? function (t, n) {\n        \"function\" == typeof t && (t = t(n));\n        var r = {};\n\n        for (var e in t) r[e] = n.action(t[e]);\n\n        return r;\n      }(e, f) : {\n        store: f\n      },\n          p = function () {\n        var t = r(f ? f.getState() : {}, i);\n\n        for (var n in t) if (t[n] !== s[n]) return s = t, c.setState({});\n\n        for (var e in s) if (!(e in t)) return s = t, c.setState({});\n      };\n\n      this.componentWillReceiveProps = function (t) {\n        i = t, p();\n      }, this.componentDidMount = function () {\n        f.subscribe(p);\n      }, this.componentWillUnmount = function () {\n        f.unsubscribe(p);\n      }, this.render = function (r) {\n        return t.h(o, n(n(n({}, a), r), s));\n      };\n    }\n\n    return (i.prototype = new t.Component()).constructor = i;\n  };\n}, exports.Provider = r;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/unistore/preact.js\n");

/***/ }),

/***/ "../node_modules/unzipit/dist/unzipit.module.js":
/*!******************************************************!*\
  !*** ../node_modules/unzipit/dist/unzipit.module.js ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HTTPRangeReader\": () => (/* binding */ HTTPRangeReader),\n/* harmony export */   \"cleanup\": () => (/* binding */ cleanup$1),\n/* harmony export */   \"setOptions\": () => (/* binding */ setOptions$1),\n/* harmony export */   \"unzip\": () => (/* binding */ unzip),\n/* harmony export */   \"unzipRaw\": () => (/* binding */ unzipRaw)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n/* unzipit@1.3.3, license MIT */\n\n/* global SharedArrayBuffer, process */\nfunction readBlobAsArrayBuffer(blob) {\n  if (blob.arrayBuffer) {\n    return blob.arrayBuffer();\n  }\n\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', () => {\n      resolve(reader.result);\n    });\n    reader.addEventListener('error', reject);\n    reader.readAsArrayBuffer(blob);\n  });\n}\n\nasync function readBlobAsUint8Array(blob) {\n  const arrayBuffer = await readBlobAsArrayBuffer(blob);\n  return new Uint8Array(arrayBuffer);\n}\n\nfunction isBlob(v) {\n  return typeof Blob !== 'undefined' && v instanceof Blob;\n}\n\nfunction isSharedArrayBuffer(b) {\n  return typeof SharedArrayBuffer !== 'undefined' && b instanceof SharedArrayBuffer;\n}\n\nconst isNode = typeof process !== 'undefined' && process.versions && typeof process.versions.node !== 'undefined' && typeof process.versions.electron === 'undefined';\n\nfunction isTypedArraySameAsArrayBuffer(typedArray) {\n  return typedArray.byteOffset === 0 && typedArray.byteLength === typedArray.buffer.byteLength;\n}\n\nclass ArrayBufferReader {\n  constructor(arrayBufferOrView) {\n    this.typedArray = arrayBufferOrView instanceof ArrayBuffer || isSharedArrayBuffer(arrayBufferOrView) ? new Uint8Array(arrayBufferOrView) : new Uint8Array(arrayBufferOrView.buffer, arrayBufferOrView.byteOffset, arrayBufferOrView.byteLength);\n  }\n\n  async getLength() {\n    return this.typedArray.byteLength;\n  }\n\n  async read(offset, length) {\n    return new Uint8Array(this.typedArray.buffer, this.typedArray.byteOffset + offset, length);\n  }\n\n}\n\nclass BlobReader {\n  constructor(blob) {\n    this.blob = blob;\n  }\n\n  async getLength() {\n    return this.blob.size;\n  }\n\n  async read(offset, length) {\n    const blob = this.blob.slice(offset, offset + length);\n    const arrayBuffer = await readBlobAsArrayBuffer(blob);\n    return new Uint8Array(arrayBuffer);\n  }\n\n  async sliceAsBlob(offset, length, type = '') {\n    return this.blob.slice(offset, offset + length, type);\n  }\n\n}\n\nclass HTTPRangeReader {\n  constructor(url) {\n    this.url = url;\n  }\n\n  async getLength() {\n    if (this.length === undefined) {\n      const req = await fetch(this.url, {\n        method: 'HEAD'\n      });\n\n      if (!req.ok) {\n        throw new Error(`failed http request ${this.url}, status: ${req.status}: ${req.statusText}`);\n      }\n\n      this.length = parseInt(req.headers.get('content-length'));\n\n      if (Number.isNaN(this.length)) {\n        throw Error('could not get length');\n      }\n    }\n\n    return this.length;\n  }\n\n  async read(offset, size) {\n    if (size === 0) {\n      return new Uint8Array(0);\n    }\n\n    const req = await fetch(this.url, {\n      headers: {\n        Range: `bytes=${offset}-${offset + size - 1}`\n      }\n    });\n\n    if (!req.ok) {\n      throw new Error(`failed http request ${this.url}, status: ${req.status} offset: ${offset} size: ${size}: ${req.statusText}`);\n    }\n\n    const buffer = await req.arrayBuffer();\n    return new Uint8Array(buffer);\n  }\n\n}\n\nfunction inflate(data, buf) {\n  var u8 = Uint8Array;\n  if (data[0] == 3 && data[1] == 0) return buf ? buf : new u8(0);\n  var bitsF = _bitsF,\n      bitsE = _bitsE,\n      decodeTiny = _decodeTiny,\n      get17 = _get17;\n  var noBuf = buf == null;\n  if (noBuf) buf = new u8(data.length >>> 2 << 3);\n  var BFINAL = 0,\n      BTYPE = 0,\n      HLIT = 0,\n      HDIST = 0,\n      HCLEN = 0,\n      ML = 0,\n      MD = 0;\n  var off = 0,\n      pos = 0;\n  var lmap, dmap;\n\n  while (BFINAL == 0) {\n    BFINAL = bitsF(data, pos, 1);\n    BTYPE = bitsF(data, pos + 1, 2);\n    pos += 3; //console.log(BFINAL, BTYPE);\n\n    if (BTYPE == 0) {\n      if ((pos & 7) != 0) pos += 8 - (pos & 7);\n      var p8 = (pos >>> 3) + 4,\n          len = data[p8 - 4] | data[p8 - 3] << 8; //console.log(len);//bitsF(data, pos, 16), \n\n      if (noBuf) buf = _check(buf, off + len);\n      buf.set(new u8(data.buffer, data.byteOffset + p8, len), off); //for(var i=0; i<len; i++) buf[off+i] = data[p8+i];\n      //for(var i=0; i<len; i++) if(buf[off+i] != data[p8+i]) throw \"e\";\n\n      pos = p8 + len << 3;\n      off += len;\n      continue;\n    }\n\n    if (noBuf) buf = _check(buf, off + (1 << 17)); // really not enough in many cases (but PNG and ZIP provide buffer in advance)\n\n    if (BTYPE == 1) {\n      lmap = U.flmap;\n      dmap = U.fdmap;\n      ML = (1 << 9) - 1;\n      MD = (1 << 5) - 1;\n    }\n\n    if (BTYPE == 2) {\n      HLIT = bitsE(data, pos, 5) + 257;\n      HDIST = bitsE(data, pos + 5, 5) + 1;\n      HCLEN = bitsE(data, pos + 10, 4) + 4;\n      pos += 14;\n\n      for (var i = 0; i < 38; i += 2) {\n        U.itree[i] = 0;\n        U.itree[i + 1] = 0;\n      }\n\n      var tl = 1;\n\n      for (var i = 0; i < HCLEN; i++) {\n        var l = bitsE(data, pos + i * 3, 3);\n        U.itree[(U.ordr[i] << 1) + 1] = l;\n        if (l > tl) tl = l;\n      }\n\n      pos += 3 * HCLEN; //console.log(itree);\n\n      makeCodes(U.itree, tl);\n      codes2map(U.itree, tl, U.imap);\n      lmap = U.lmap;\n      dmap = U.dmap;\n      pos = decodeTiny(U.imap, (1 << tl) - 1, HLIT + HDIST, data, pos, U.ttree);\n\n      var mx0 = _copyOut(U.ttree, 0, HLIT, U.ltree);\n\n      ML = (1 << mx0) - 1;\n\n      var mx1 = _copyOut(U.ttree, HLIT, HDIST, U.dtree);\n\n      MD = (1 << mx1) - 1; //var ml = decodeTiny(U.imap, (1<<tl)-1, HLIT , data, pos, U.ltree); ML = (1<<(ml>>>24))-1;  pos+=(ml&0xffffff);\n\n      makeCodes(U.ltree, mx0);\n      codes2map(U.ltree, mx0, lmap); //var md = decodeTiny(U.imap, (1<<tl)-1, HDIST, data, pos, U.dtree); MD = (1<<(md>>>24))-1;  pos+=(md&0xffffff);\n\n      makeCodes(U.dtree, mx1);\n      codes2map(U.dtree, mx1, dmap);\n    } //var ooff=off, opos=pos;\n\n\n    while (true) {\n      var code = lmap[get17(data, pos) & ML];\n      pos += code & 15;\n      var lit = code >>> 4; //U.lhst[lit]++;  \n\n      if (lit >>> 8 == 0) {\n        buf[off++] = lit;\n      } else if (lit == 256) {\n        break;\n      } else {\n        var end = off + lit - 254;\n\n        if (lit > 264) {\n          var ebs = U.ldef[lit - 257];\n          end = off + (ebs >>> 3) + bitsE(data, pos, ebs & 7);\n          pos += ebs & 7;\n        } //dst[end-off]++;\n\n\n        var dcode = dmap[get17(data, pos) & MD];\n        pos += dcode & 15;\n        var dlit = dcode >>> 4;\n        var dbs = U.ddef[dlit],\n            dst = (dbs >>> 4) + bitsF(data, pos, dbs & 15);\n        pos += dbs & 15; //var o0 = off-dst, stp = Math.min(end-off, dst);\n        //if(stp>20) while(off<end) {  buf.copyWithin(off, o0, o0+stp);  off+=stp;  }  else\n        //if(end-dst<=off) buf.copyWithin(off, off-dst, end-dst);  else\n        //if(dst==1) buf.fill(buf[off-1], off, end);  else\n\n        if (noBuf) buf = _check(buf, off + (1 << 17));\n\n        while (off < end) {\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n        }\n\n        off = end; //while(off!=end) {  buf[off]=buf[off++-dst];  }\n      }\n    } //console.log(off-ooff, (pos-opos)>>>3);\n\n  } //console.log(dst);\n  //console.log(tlen, dlen, off-tlen+tcnt);\n\n\n  return buf.length == off ? buf : buf.slice(0, off);\n}\n\nfunction _check(buf, len) {\n  var bl = buf.length;\n  if (len <= bl) return buf;\n  var nbuf = new Uint8Array(Math.max(bl << 1, len));\n  nbuf.set(buf, 0); //for(var i=0; i<bl; i+=4) {  nbuf[i]=buf[i];  nbuf[i+1]=buf[i+1];  nbuf[i+2]=buf[i+2];  nbuf[i+3]=buf[i+3];  }\n\n  return nbuf;\n}\n\nfunction _decodeTiny(lmap, LL, len, data, pos, tree) {\n  var bitsE = _bitsE,\n      get17 = _get17;\n  var i = 0;\n\n  while (i < len) {\n    var code = lmap[get17(data, pos) & LL];\n    pos += code & 15;\n    var lit = code >>> 4;\n\n    if (lit <= 15) {\n      tree[i] = lit;\n      i++;\n    } else {\n      var ll = 0,\n          n = 0;\n\n      if (lit == 16) {\n        n = 3 + bitsE(data, pos, 2);\n        pos += 2;\n        ll = tree[i - 1];\n      } else if (lit == 17) {\n        n = 3 + bitsE(data, pos, 3);\n        pos += 3;\n      } else if (lit == 18) {\n        n = 11 + bitsE(data, pos, 7);\n        pos += 7;\n      }\n\n      var ni = i + n;\n\n      while (i < ni) {\n        tree[i] = ll;\n        i++;\n      }\n    }\n  }\n\n  return pos;\n}\n\nfunction _copyOut(src, off, len, tree) {\n  var mx = 0,\n      i = 0,\n      tl = tree.length >>> 1;\n\n  while (i < len) {\n    var v = src[i + off];\n    tree[i << 1] = 0;\n    tree[(i << 1) + 1] = v;\n    if (v > mx) mx = v;\n    i++;\n  }\n\n  while (i < tl) {\n    tree[i << 1] = 0;\n    tree[(i << 1) + 1] = 0;\n    i++;\n  }\n\n  return mx;\n}\n\nfunction makeCodes(tree, MAX_BITS) {\n  // code, length\n  var max_code = tree.length;\n  var code, bits, n, i, len;\n  var bl_count = U.bl_count;\n\n  for (var i = 0; i <= MAX_BITS; i++) bl_count[i] = 0;\n\n  for (i = 1; i < max_code; i += 2) bl_count[tree[i]]++;\n\n  var next_code = U.next_code; // smallest code for each length\n\n  code = 0;\n  bl_count[0] = 0;\n\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    code = code + bl_count[bits - 1] << 1;\n    next_code[bits] = code;\n  }\n\n  for (n = 0; n < max_code; n += 2) {\n    len = tree[n + 1];\n\n    if (len != 0) {\n      tree[n] = next_code[len];\n      next_code[len]++;\n    }\n  }\n}\n\nfunction codes2map(tree, MAX_BITS, map) {\n  var max_code = tree.length;\n  var r15 = U.rev15;\n\n  for (var i = 0; i < max_code; i += 2) if (tree[i + 1] != 0) {\n    var lit = i >> 1;\n    var cl = tree[i + 1],\n        val = lit << 4 | cl; // :  (0x8000 | (U.of0[lit-257]<<7) | (U.exb[lit-257]<<4) | cl);\n\n    var rest = MAX_BITS - cl,\n        i0 = tree[i] << rest,\n        i1 = i0 + (1 << rest); //tree[i]=r15[i0]>>>(15-MAX_BITS);\n\n    while (i0 != i1) {\n      var p0 = r15[i0] >>> 15 - MAX_BITS;\n      map[p0] = val;\n      i0++;\n    }\n  }\n}\n\nfunction revCodes(tree, MAX_BITS) {\n  var r15 = U.rev15,\n      imb = 15 - MAX_BITS;\n\n  for (var i = 0; i < tree.length; i += 2) {\n    var i0 = tree[i] << MAX_BITS - tree[i + 1];\n    tree[i] = r15[i0] >>> imb;\n  }\n}\n\nfunction _bitsE(dt, pos, length) {\n  return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8) >>> (pos & 7) & (1 << length) - 1;\n}\n\nfunction _bitsF(dt, pos, length) {\n  return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8 | dt[(pos >>> 3) + 2] << 16) >>> (pos & 7) & (1 << length) - 1;\n}\n/*\nfunction _get9(dt, pos) {\n\treturn ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8))>>>(pos&7))&511;\n} */\n\n\nfunction _get17(dt, pos) {\n  // return at least 17 meaningful bytes\n  return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8 | dt[(pos >>> 3) + 2] << 16) >>> (pos & 7);\n}\n\nconst U = function () {\n  var u16 = Uint16Array,\n      u32 = Uint32Array;\n  return {\n    next_code: new u16(16),\n    bl_count: new u16(16),\n    ordr: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\n    of0: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],\n    exb: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],\n    ldef: new u16(32),\n    df0: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],\n    dxb: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],\n    ddef: new u32(32),\n    flmap: new u16(512),\n    fltree: [],\n    fdmap: new u16(32),\n    fdtree: [],\n    lmap: new u16(32768),\n    ltree: [],\n    ttree: [],\n    dmap: new u16(32768),\n    dtree: [],\n    imap: new u16(512),\n    itree: [],\n    //rev9 : new u16(  512)\n    rev15: new u16(1 << 15),\n    lhst: new u32(286),\n    dhst: new u32(30),\n    ihst: new u32(19),\n    lits: new u32(15000),\n    strt: new u16(1 << 16),\n    prev: new u16(1 << 15)\n  };\n}();\n\n(function () {\n  var len = 1 << 15;\n\n  for (var i = 0; i < len; i++) {\n    var x = i;\n    x = (x & 0xaaaaaaaa) >>> 1 | (x & 0x55555555) << 1;\n    x = (x & 0xcccccccc) >>> 2 | (x & 0x33333333) << 2;\n    x = (x & 0xf0f0f0f0) >>> 4 | (x & 0x0f0f0f0f) << 4;\n    x = (x & 0xff00ff00) >>> 8 | (x & 0x00ff00ff) << 8;\n    U.rev15[i] = (x >>> 16 | x << 16) >>> 17;\n  }\n\n  function pushV(tgt, n, sv) {\n    while (n-- != 0) tgt.push(0, sv);\n  }\n\n  for (var i = 0; i < 32; i++) {\n    U.ldef[i] = U.of0[i] << 3 | U.exb[i];\n    U.ddef[i] = U.df0[i] << 4 | U.dxb[i];\n  }\n\n  pushV(U.fltree, 144, 8);\n  pushV(U.fltree, 255 - 143, 9);\n  pushV(U.fltree, 279 - 255, 7);\n  pushV(U.fltree, 287 - 279, 8);\n  /*\n  var i = 0;\n  for(; i<=143; i++) U.fltree.push(0,8);\n  for(; i<=255; i++) U.fltree.push(0,9);\n  for(; i<=279; i++) U.fltree.push(0,7);\n  for(; i<=287; i++) U.fltree.push(0,8);\n  */\n\n  makeCodes(U.fltree, 9);\n  codes2map(U.fltree, 9, U.flmap);\n  revCodes(U.fltree, 9);\n  pushV(U.fdtree, 32, 5); //for(i=0;i<32; i++) U.fdtree.push(0,5);\n\n  makeCodes(U.fdtree, 5);\n  codes2map(U.fdtree, 5, U.fdmap);\n  revCodes(U.fdtree, 5);\n  pushV(U.itree, 19, 0);\n  pushV(U.ltree, 286, 0);\n  pushV(U.dtree, 30, 0);\n  pushV(U.ttree, 320, 0);\n  /*\n  for(var i=0; i< 19; i++) U.itree.push(0,0);\n  for(var i=0; i<286; i++) U.ltree.push(0,0);\n  for(var i=0; i< 30; i++) U.dtree.push(0,0);\n  for(var i=0; i<320; i++) U.ttree.push(0,0);\n  */\n})();\n\nconst crc = {\n  table: function () {\n    var tab = new Uint32Array(256);\n\n    for (var n = 0; n < 256; n++) {\n      var c = n;\n\n      for (var k = 0; k < 8; k++) {\n        if (c & 1) c = 0xedb88320 ^ c >>> 1;else c = c >>> 1;\n      }\n\n      tab[n] = c;\n    }\n\n    return tab;\n  }(),\n  update: function (c, buf, off, len) {\n    for (var i = 0; i < len; i++) c = crc.table[(c ^ buf[off + i]) & 0xff] ^ c >>> 8;\n\n    return c;\n  },\n  crc: function (b, o, l) {\n    return crc.update(0xffffffff, b, o, l) ^ 0xffffffff;\n  }\n};\n\nfunction inflateRaw(file, buf) {\n  return inflate(file, buf);\n}\n/* global module */\n\n\nconst config = {\n  numWorkers: 1,\n  workerURL: '',\n  useWorkers: false\n};\nlet nextId = 0; // Requests are put on a queue.\n// We don't send the request to the worker until the worker\n// is finished. This probably adds a small amount of latency\n// but the issue is imagine you have 2 workers. You give worker\n// A x seconds of work to do and worker B y seconds of work to\n// do. You don't know which will finish first. If you give\n// the worker with more work to do the request then you'll\n// waste time.\n// note: we can't check `workers.length` for deciding if\n// we've reached `config.numWorkers` because creation the worker\n// is async which means other requests to make workers might\n// come in before a worker gets added to `workers`\n\nlet numWorkers = 0;\nlet canUseWorkers = true; // gets set to false if we can't start a worker\n\nconst workers = [];\nconst availableWorkers = [];\nconst waitingForWorkerQueue = [];\nconst currentlyProcessingIdToRequestMap = new Map();\n\nfunction handleResult(e) {\n  makeWorkerAvailable(e.target);\n  const {\n    id,\n    error,\n    data\n  } = e.data;\n  const request = currentlyProcessingIdToRequestMap.get(id);\n  currentlyProcessingIdToRequestMap.delete(id);\n\n  if (error) {\n    request.reject(error);\n  } else {\n    request.resolve(data);\n  }\n} // Because Firefox uses non-standard onerror to signal an error.\n\n\nfunction startWorker(url) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker(url);\n\n    worker.onmessage = e => {\n      if (e.data === 'start') {\n        worker.onerror = undefined;\n        worker.onmessage = undefined;\n        resolve(worker);\n      } else {\n        reject(new Error(`unexpected message: ${e.data}`));\n      }\n    };\n\n    worker.onerror = reject;\n  });\n}\n\nfunction dynamicRequire(mod, request) {\n  return mod.require(request);\n}\n\nconst workerHelper = function () {\n  if (isNode) {\n    // We need to use `dynamicRequire` because `require` on it's own will be optimized by webpack.\n    const {\n      Worker\n    } = dynamicRequire(module, 'worker_threads');\n    return {\n      async createWorker(url) {\n        return new Worker(url);\n      },\n\n      addEventListener(worker, fn) {\n        worker.on('message', data => {\n          fn({\n            target: worker,\n            data\n          });\n        });\n      },\n\n      async terminate(worker) {\n        await worker.terminate();\n      }\n\n    };\n  } else {\n    return {\n      async createWorker(url) {\n        // I don't understand this security issue\n        // Apparently there is some iframe setting or http header\n        // that prevents cross domain workers. But, I can manually\n        // download the text and do it. I reported this to Chrome\n        // and they said it was fine so ¯\\_(ツ)_/¯\n        try {\n          const worker = await startWorker(url);\n          return worker;\n        } catch (e) {\n          console.warn('could not load worker:', url);\n        }\n\n        let text;\n\n        try {\n          const req = await fetch(url, {\n            mode: 'cors'\n          });\n\n          if (!req.ok) {\n            throw new Error(`could not load: ${url}`);\n          }\n\n          text = await req.text();\n          url = URL.createObjectURL(new Blob([text], {\n            type: 'application/javascript'\n          }));\n          const worker = await startWorker(url);\n          config.workerURL = url; // this is a hack. What's a better way to structure this code?\n\n          return worker;\n        } catch (e) {\n          console.warn('could not load worker via fetch:', url);\n        }\n\n        if (text !== undefined) {\n          try {\n            url = `data:application/javascript;base64,${btoa(text)}`;\n            const worker = await startWorker(url);\n            config.workerURL = url;\n            return worker;\n          } catch (e) {\n            console.warn('could not load worker via dataURI');\n          }\n        }\n\n        console.warn('workers will not be used');\n        throw new Error('can not start workers');\n      },\n\n      addEventListener(worker, fn) {\n        worker.addEventListener('message', fn);\n      },\n\n      async terminate(worker) {\n        worker.terminate();\n      }\n\n    };\n  }\n}();\n\nfunction makeWorkerAvailable(worker) {\n  availableWorkers.push(worker);\n  processWaitingForWorkerQueue();\n}\n\nasync function getAvailableWorker() {\n  if (availableWorkers.length === 0 && numWorkers < config.numWorkers) {\n    ++numWorkers; // see comment at numWorkers declaration\n\n    try {\n      const worker = await workerHelper.createWorker(config.workerURL);\n      workers.push(worker);\n      availableWorkers.push(worker);\n      workerHelper.addEventListener(worker, handleResult);\n    } catch (e) {\n      // set this global out-of-band (needs refactor)\n      canUseWorkers = false;\n    }\n  }\n\n  return availableWorkers.pop();\n} // @param {Uint8Array} src\n// @param {number} uncompressedSize\n// @param {string} [type] mime-type\n// @returns {ArrayBuffer|Blob} ArrayBuffer if type is falsy or Blob otherwise.\n\n\nfunction inflateRawLocal(src, uncompressedSize, type, resolve) {\n  const dst = new Uint8Array(uncompressedSize);\n  inflateRaw(src, dst);\n  resolve(type ? new Blob([dst], {\n    type\n  }) : dst.buffer);\n}\n\nasync function processWaitingForWorkerQueue() {\n  if (waitingForWorkerQueue.length === 0) {\n    return;\n  }\n\n  if (config.useWorkers && canUseWorkers) {\n    const worker = await getAvailableWorker(); // canUseWorkers might have been set out-of-band (need refactor)\n\n    if (canUseWorkers) {\n      if (worker) {\n        if (waitingForWorkerQueue.length === 0) {\n          // the queue might be empty while we awaited for a worker.\n          makeWorkerAvailable(worker);\n          return;\n        }\n\n        const {\n          id,\n          src,\n          uncompressedSize,\n          type,\n          resolve,\n          reject\n        } = waitingForWorkerQueue.shift();\n        currentlyProcessingIdToRequestMap.set(id, {\n          id,\n          resolve,\n          reject\n        });\n        const transferables = []; // NOTE: Originally I thought you could transfer an ArrayBuffer.\n        // The code on this side is often using views into the entire file\n        // which means if we transferred we'd lose the entire file. That sucks\n        // because it means there's an expensive copy to send the uncompressed\n        // data to the worker.\n        //\n        // Also originally I thought we could send a Blob but we'd need to refactor\n        // the code in unzipit/readEntryData as currently it reads the uncompressed\n        // bytes.\n        //\n        //if (!isBlob(src) && !isSharedArrayBuffer(src)) {\n        //  transferables.push(src);\n        //}\n\n        worker.postMessage({\n          type: 'inflate',\n          data: {\n            id,\n            type,\n            src,\n            uncompressedSize\n          }\n        }, transferables);\n      }\n\n      return;\n    }\n  } // inflate locally\n  // We loop here because what happens if many requests happen at once\n  // the first N requests will try to async make a worker. Other requests\n  // will then be on the queue. But if we fail to make workers then there\n  // are pending requests.\n\n\n  while (waitingForWorkerQueue.length) {\n    const {\n      src,\n      uncompressedSize,\n      type,\n      resolve\n    } = waitingForWorkerQueue.shift();\n    let data = src;\n\n    if (isBlob(src)) {\n      data = await readBlobAsUint8Array(src);\n    }\n\n    inflateRawLocal(data, uncompressedSize, type, resolve);\n  }\n}\n\nfunction setOptions(options) {\n  config.workerURL = options.workerURL || config.workerURL; // there's no reason to set the workerURL if you're not going to use workers\n\n  if (options.workerURL) {\n    config.useWorkers = true;\n  }\n\n  config.useWorkers = options.useWorkers !== undefined ? options.useWorkers : config.useWorkers;\n  config.numWorkers = options.numWorkers || config.numWorkers;\n} // It has to take non-zero time to put a large typed array in a Blob since the very\n// next instruction you could change the contents of the array. So, if you're reading\n// the zip file for images/video/audio then all you want is a Blob on which to get a URL.\n// so that operation of putting the data in a Blob should happen in the worker.\n//\n// Conversely if you want the data itself then you want an ArrayBuffer immediately\n// since the worker can transfer its ArrayBuffer zero copy.\n//\n// @param {Uint8Array|Blob} src\n// @param {number} uncompressedSize\n// @param {string} [type] falsy or mimeType string (eg: 'image/png')\n// @returns {ArrayBuffer|Blob} ArrayBuffer if type is falsy or Blob otherwise.\n\n\nfunction inflateRawAsync(src, uncompressedSize, type) {\n  return new Promise((resolve, reject) => {\n    // note: there is potential an expensive copy here. In order for the data\n    // to make it into the worker we need to copy the data to the worker unless\n    // it's a Blob or a SharedArrayBuffer.\n    //\n    // Solutions:\n    //\n    // 1. A minor enhancement, if `uncompressedSize` is small don't call the worker.\n    //\n    //    might be a win period as their is overhead calling the worker\n    //\n    // 2. Move the entire library to the worker\n    //\n    //    Good, Maybe faster if you pass a URL, Blob, or SharedArrayBuffer? Not sure about that\n    //    as those are also easy to transfer. Still slow if you pass an ArrayBuffer\n    //    as the ArrayBuffer has to be copied to the worker.\n    //\n    // I guess benchmarking is really the only thing to try.\n    waitingForWorkerQueue.push({\n      src,\n      uncompressedSize,\n      type,\n      resolve,\n      reject,\n      id: nextId++\n    });\n    processWaitingForWorkerQueue();\n  });\n}\n\nfunction clearArray(arr) {\n  arr.splice(0, arr.length);\n}\n\nasync function cleanup() {\n  for (const worker of workers) {\n    await workerHelper.terminate(worker);\n  }\n\n  clearArray(workers);\n  clearArray(availableWorkers);\n  clearArray(waitingForWorkerQueue);\n  currentlyProcessingIdToRequestMap.clear();\n  numWorkers = 0;\n  canUseWorkers = true;\n}\n/*\nclass Zip {\n  constructor(reader) {\n    comment,  // the comment for this entry\n    commentBytes, // the raw comment for this entry\n  }\n}\n*/\n\n\nfunction dosDateTimeToDate(date, time) {\n  const day = date & 0x1f; // 1-31\n\n  const month = (date >> 5 & 0xf) - 1; // 1-12, 0-11\n\n  const year = (date >> 9 & 0x7f) + 1980; // 0-128, 1980-2108\n\n  const millisecond = 0;\n  const second = (time & 0x1f) * 2; // 0-29, 0-58 (even numbers)\n\n  const minute = time >> 5 & 0x3f; // 0-59\n\n  const hour = time >> 11 & 0x1f; // 0-23\n\n  return new Date(year, month, day, hour, minute, second, millisecond);\n}\n\nclass ZipEntry {\n  constructor(reader, rawEntry) {\n    this._reader = reader;\n    this._rawEntry = rawEntry;\n    this.name = rawEntry.name;\n    this.nameBytes = rawEntry.nameBytes;\n    this.size = rawEntry.uncompressedSize;\n    this.compressedSize = rawEntry.compressedSize;\n    this.comment = rawEntry.comment;\n    this.commentBytes = rawEntry.commentBytes;\n    this.compressionMethod = rawEntry.compressionMethod;\n    this.lastModDate = dosDateTimeToDate(rawEntry.lastModFileDate, rawEntry.lastModFileTime);\n    this.isDirectory = rawEntry.uncompressedSize === 0 && rawEntry.name.endsWith('/');\n    this.encrypted = !!(rawEntry.generalPurposeBitFlag & 0x1);\n  } // returns a promise that returns a Blob for this entry\n\n\n  async blob(type = 'application/octet-stream') {\n    return await readEntryDataAsBlob(this._reader, this._rawEntry, type);\n  } // returns a promise that returns an ArrayBuffer for this entry\n\n\n  async arrayBuffer() {\n    return await readEntryDataAsArrayBuffer(this._reader, this._rawEntry);\n  } // returns text, assumes the text is valid utf8. If you want more options decode arrayBuffer yourself\n\n\n  async text() {\n    const buffer = await this.arrayBuffer();\n    return decodeBuffer(new Uint8Array(buffer));\n  } // returns text with JSON.parse called on it. If you want more options decode arrayBuffer yourself\n\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n\n}\n\nconst EOCDR_WITHOUT_COMMENT_SIZE = 22;\nconst MAX_COMMENT_SIZE = 0xffff; // 2-byte size\n\nconst EOCDR_SIGNATURE = 0x06054b50;\nconst ZIP64_EOCDR_SIGNATURE = 0x06064b50;\n\nasync function readAs(reader, offset, length) {\n  return await reader.read(offset, length);\n} // The point of this function is we want to be able to pass the data\n// to a worker as fast as possible so when decompressing if the data\n// is already a blob and we can get a blob then get a blob.\n//\n// I'm not sure what a better way to refactor this is. We've got examples\n// of multiple readers. Ideally, for every type of reader we could ask\n// it, \"give me a type that is zero copy both locally and when sent to a worker\".\n//\n// The problem is the worker would also have to know the how to handle this\n// opaque type. I suppose the correct solution is to register different\n// reader handlers in the worker so BlobReader would register some\n// `handleZeroCopyType<BlobReader>`. At the moment I don't feel like\n// refactoring. As it is you just pass in an instance of the reader\n// but instead you'd have to register the reader and some how get the\n// source for the `handleZeroCopyType` handler function into the worker.\n// That sounds like a huge PITA, requiring you to put the implementation\n// in a separate file so the worker can load it or some other workaround\n// hack.\n//\n// For now this hack works even if it's not generic.\n\n\nasync function readAsBlobOrTypedArray(reader, offset, length, type) {\n  if (reader.sliceAsBlob) {\n    return await reader.sliceAsBlob(offset, length, type);\n  }\n\n  return await reader.read(offset, length);\n}\n\nconst crc$1 = {\n  unsigned() {\n    return 0;\n  }\n\n};\n\nfunction getUint16LE(uint8View, offset) {\n  return uint8View[offset] + uint8View[offset + 1] * 0x100;\n}\n\nfunction getUint32LE(uint8View, offset) {\n  return uint8View[offset] + uint8View[offset + 1] * 0x100 + uint8View[offset + 2] * 0x10000 + uint8View[offset + 3] * 0x1000000;\n}\n\nfunction getUint64LE(uint8View, offset) {\n  return getUint32LE(uint8View, offset) + getUint32LE(uint8View, offset + 4) * 0x100000000;\n}\n/* eslint-disable no-irregular-whitespace */\n// const decodeCP437 = (function() {\n//   const cp437 = '\\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ';\n//\n//   return function(uint8view) {\n//     return Array.from(uint8view).map(v => cp437[v]).join('');\n//   };\n// }());\n\n/* eslint-enable no-irregular-whitespace */\n\n\nconst utf8Decoder = new TextDecoder();\n\nfunction decodeBuffer(uint8View, isUTF8) {\n  /* eslint-disable-line no-unused-vars */\n\n  /* lgtm [js/superfluous-trailing-arguments] */\n  if (isSharedArrayBuffer(uint8View.buffer)) {\n    uint8View = new Uint8Array(uint8View);\n  }\n\n  return utf8Decoder.decode(uint8View);\n  /*\n  AFAICT the UTF8 flat is not set so it's 100% up to the user\n  to self decode if their file is not utf8 filenames\n  return isUTF8\n      ? utf8Decoder.decode(uint8View)\n      : decodeCP437(uint8View);\n  */\n}\n\nasync function findEndOfCentralDirector(reader, totalLength) {\n  const size = Math.min(EOCDR_WITHOUT_COMMENT_SIZE + MAX_COMMENT_SIZE, totalLength);\n  const readStart = totalLength - size;\n  const data = await readAs(reader, readStart, size);\n\n  for (let i = size - EOCDR_WITHOUT_COMMENT_SIZE; i >= 0; --i) {\n    if (getUint32LE(data, i) !== EOCDR_SIGNATURE) {\n      continue;\n    } // 0 - End of central directory signature\n\n\n    const eocdr = new Uint8Array(data.buffer, data.byteOffset + i, data.byteLength - i); // 4 - Number of this disk\n\n    const diskNumber = getUint16LE(eocdr, 4);\n\n    if (diskNumber !== 0) {\n      throw new Error(`multi-volume zip files are not supported. This is volume: ${diskNumber}`);\n    } // 6 - Disk where central directory starts\n    // 8 - Number of central directory records on this disk\n    // 10 - Total number of central directory records\n\n\n    const entryCount = getUint16LE(eocdr, 10); // 12 - Size of central directory (bytes)\n\n    const centralDirectorySize = getUint32LE(eocdr, 12); // 16 - Offset of start of central directory, relative to start of archive\n\n    const centralDirectoryOffset = getUint32LE(eocdr, 16); // 20 - Comment length\n\n    const commentLength = getUint16LE(eocdr, 20);\n    const expectedCommentLength = eocdr.length - EOCDR_WITHOUT_COMMENT_SIZE;\n\n    if (commentLength !== expectedCommentLength) {\n      throw new Error(`invalid comment length. expected: ${expectedCommentLength}, actual: ${commentLength}`);\n    } // 22 - Comment\n    // the encoding is always cp437.\n\n\n    const commentBytes = new Uint8Array(eocdr.buffer, eocdr.byteOffset + 22, commentLength);\n    const comment = decodeBuffer(commentBytes);\n\n    if (entryCount === 0xffff || centralDirectoryOffset === 0xffffffff) {\n      return await readZip64CentralDirectory(reader, readStart + i, comment, commentBytes);\n    } else {\n      return await readEntries(reader, centralDirectoryOffset, centralDirectorySize, entryCount, comment, commentBytes);\n    }\n  }\n\n  throw new Error('could not find end of central directory. maybe not zip file');\n}\n\nconst END_OF_CENTRAL_DIRECTORY_LOCATOR_SIGNATURE = 0x07064b50;\n\nasync function readZip64CentralDirectory(reader, offset, comment, commentBytes) {\n  // ZIP64 Zip64 end of central directory locator\n  const zip64EocdlOffset = offset - 20;\n  const eocdl = await readAs(reader, zip64EocdlOffset, 20); // 0 - zip64 end of central dir locator signature\n\n  if (getUint32LE(eocdl, 0) !== END_OF_CENTRAL_DIRECTORY_LOCATOR_SIGNATURE) {\n    throw new Error('invalid zip64 end of central directory locator signature');\n  } // 4 - number of the disk with the start of the zip64 end of central directory\n  // 8 - relative offset of the zip64 end of central directory record\n\n\n  const zip64EocdrOffset = getUint64LE(eocdl, 8); // 16 - total number of disks\n  // ZIP64 end of central directory record\n\n  const zip64Eocdr = await readAs(reader, zip64EocdrOffset, 56); // 0 - zip64 end of central dir signature                           4 bytes  (0x06064b50)\n\n  if (getUint32LE(zip64Eocdr, 0) !== ZIP64_EOCDR_SIGNATURE) {\n    throw new Error('invalid zip64 end of central directory record signature');\n  } // 4 - size of zip64 end of central directory record                8 bytes\n  // 12 - version made by                                             2 bytes\n  // 14 - version needed to extract                                   2 bytes\n  // 16 - number of this disk                                         4 bytes\n  // 20 - number of the disk with the start of the central directory  4 bytes\n  // 24 - total number of entries in the central directory on this disk         8 bytes\n  // 32 - total number of entries in the central directory            8 bytes\n\n\n  const entryCount = getUint64LE(zip64Eocdr, 32); // 40 - size of the central directory                               8 bytes\n\n  const centralDirectorySize = getUint64LE(zip64Eocdr, 40); // 48 - offset of start of central directory with respect to the starting disk number     8 bytes\n\n  const centralDirectoryOffset = getUint64LE(zip64Eocdr, 48); // 56 - zip64 extensible data sector                                (variable size)\n\n  return readEntries(reader, centralDirectoryOffset, centralDirectorySize, entryCount, comment, commentBytes);\n}\n\nconst CENTRAL_DIRECTORY_FILE_HEADER_SIGNATURE = 0x02014b50;\n\nasync function readEntries(reader, centralDirectoryOffset, centralDirectorySize, rawEntryCount, comment, commentBytes) {\n  let readEntryCursor = 0;\n  const allEntriesBuffer = await readAs(reader, centralDirectoryOffset, centralDirectorySize);\n  const rawEntries = [];\n\n  for (let e = 0; e < rawEntryCount; ++e) {\n    const buffer = allEntriesBuffer.subarray(readEntryCursor, readEntryCursor + 46); // 0 - Central directory file header signature\n\n    const signature = getUint32LE(buffer, 0);\n\n    if (signature !== CENTRAL_DIRECTORY_FILE_HEADER_SIGNATURE) {\n      throw new Error(`invalid central directory file header signature: 0x${signature.toString(16)}`);\n    }\n\n    const rawEntry = {\n      // 4 - Version made by\n      versionMadeBy: getUint16LE(buffer, 4),\n      // 6 - Version needed to extract (minimum)\n      versionNeededToExtract: getUint16LE(buffer, 6),\n      // 8 - General purpose bit flag\n      generalPurposeBitFlag: getUint16LE(buffer, 8),\n      // 10 - Compression method\n      compressionMethod: getUint16LE(buffer, 10),\n      // 12 - File last modification time\n      lastModFileTime: getUint16LE(buffer, 12),\n      // 14 - File last modification date\n      lastModFileDate: getUint16LE(buffer, 14),\n      // 16 - CRC-32\n      crc32: getUint32LE(buffer, 16),\n      // 20 - Compressed size\n      compressedSize: getUint32LE(buffer, 20),\n      // 24 - Uncompressed size\n      uncompressedSize: getUint32LE(buffer, 24),\n      // 28 - File name length (n)\n      fileNameLength: getUint16LE(buffer, 28),\n      // 30 - Extra field length (m)\n      extraFieldLength: getUint16LE(buffer, 30),\n      // 32 - File comment length (k)\n      fileCommentLength: getUint16LE(buffer, 32),\n      // 34 - Disk number where file starts\n      // 36 - Internal file attributes\n      internalFileAttributes: getUint16LE(buffer, 36),\n      // 38 - External file attributes\n      externalFileAttributes: getUint32LE(buffer, 38),\n      // 42 - Relative offset of local file header\n      relativeOffsetOfLocalHeader: getUint32LE(buffer, 42)\n    };\n\n    if (rawEntry.generalPurposeBitFlag & 0x40) {\n      throw new Error('strong encryption is not supported');\n    }\n\n    readEntryCursor += 46;\n    const data = allEntriesBuffer.subarray(readEntryCursor, readEntryCursor + rawEntry.fileNameLength + rawEntry.extraFieldLength + rawEntry.fileCommentLength);\n    rawEntry.nameBytes = data.slice(0, rawEntry.fileNameLength);\n    rawEntry.name = decodeBuffer(rawEntry.nameBytes); // 46+n - Extra field\n\n    const fileCommentStart = rawEntry.fileNameLength + rawEntry.extraFieldLength;\n    const extraFieldBuffer = data.slice(rawEntry.fileNameLength, fileCommentStart);\n    rawEntry.extraFields = [];\n    let i = 0;\n\n    while (i < extraFieldBuffer.length - 3) {\n      const headerId = getUint16LE(extraFieldBuffer, i + 0);\n      const dataSize = getUint16LE(extraFieldBuffer, i + 2);\n      const dataStart = i + 4;\n      const dataEnd = dataStart + dataSize;\n\n      if (dataEnd > extraFieldBuffer.length) {\n        throw new Error('extra field length exceeds extra field buffer size');\n      }\n\n      rawEntry.extraFields.push({\n        id: headerId,\n        data: extraFieldBuffer.slice(dataStart, dataEnd)\n      });\n      i = dataEnd;\n    } // 46+n+m - File comment\n\n\n    rawEntry.commentBytes = data.slice(fileCommentStart, fileCommentStart + rawEntry.fileCommentLength);\n    rawEntry.comment = decodeBuffer(rawEntry.commentBytes);\n    readEntryCursor += data.length;\n\n    if (rawEntry.uncompressedSize === 0xffffffff || rawEntry.compressedSize === 0xffffffff || rawEntry.relativeOffsetOfLocalHeader === 0xffffffff) {\n      // ZIP64 format\n      // find the Zip64 Extended Information Extra Field\n      const zip64ExtraField = rawEntry.extraFields.find(e => e.id === 0x0001);\n\n      if (!zip64ExtraField) {\n        return new Error('expected zip64 extended information extra field');\n      }\n\n      const zip64EiefBuffer = zip64ExtraField.data;\n      let index = 0; // 0 - Original Size          8 bytes\n\n      if (rawEntry.uncompressedSize === 0xffffffff) {\n        if (index + 8 > zip64EiefBuffer.length) {\n          throw new Error('zip64 extended information extra field does not include uncompressed size');\n        }\n\n        rawEntry.uncompressedSize = getUint64LE(zip64EiefBuffer, index);\n        index += 8;\n      } // 8 - Compressed Size        8 bytes\n\n\n      if (rawEntry.compressedSize === 0xffffffff) {\n        if (index + 8 > zip64EiefBuffer.length) {\n          throw new Error('zip64 extended information extra field does not include compressed size');\n        }\n\n        rawEntry.compressedSize = getUint64LE(zip64EiefBuffer, index);\n        index += 8;\n      } // 16 - Relative Header Offset 8 bytes\n\n\n      if (rawEntry.relativeOffsetOfLocalHeader === 0xffffffff) {\n        if (index + 8 > zip64EiefBuffer.length) {\n          throw new Error('zip64 extended information extra field does not include relative header offset');\n        }\n\n        rawEntry.relativeOffsetOfLocalHeader = getUint64LE(zip64EiefBuffer, index);\n        index += 8;\n      } // 24 - Disk Start Number      4 bytes\n\n    } // check for Info-ZIP Unicode Path Extra Field (0x7075)\n    // see https://github.com/thejoshwolfe/yauzl/issues/33\n\n\n    const nameField = rawEntry.extraFields.find(e => e.id === 0x7075 && e.data.length >= 6 && // too short to be meaningful\n    e.data[0] === 1 && // Version       1 byte      version of this extra field, currently 1\n    getUint32LE(e.data, 1), crc$1.unsigned(rawEntry.nameBytes)); // NameCRC32     4 bytes     File Name Field CRC32 Checksum\n    // > If the CRC check fails, this UTF-8 Path Extra Field should be\n    // > ignored and the File Name field in the header should be used instead.\n\n    if (nameField) {\n      // UnicodeName Variable UTF-8 version of the entry File Name\n      rawEntry.fileName = decodeBuffer(nameField.data.slice(5));\n    } // validate file size\n\n\n    if (rawEntry.compressionMethod === 0) {\n      let expectedCompressedSize = rawEntry.uncompressedSize;\n\n      if ((rawEntry.generalPurposeBitFlag & 0x1) !== 0) {\n        // traditional encryption prefixes the file data with a header\n        expectedCompressedSize += 12;\n      }\n\n      if (rawEntry.compressedSize !== expectedCompressedSize) {\n        throw new Error(`compressed size mismatch for stored file: ${rawEntry.compressedSize} != ${expectedCompressedSize}`);\n      }\n    }\n\n    rawEntries.push(rawEntry);\n  }\n\n  const zip = {\n    comment,\n    commentBytes\n  };\n  return {\n    zip,\n    entries: rawEntries.map(e => new ZipEntry(reader, e))\n  };\n}\n\nasync function readEntryDataHeader(reader, rawEntry) {\n  if (rawEntry.generalPurposeBitFlag & 0x1) {\n    throw new Error('encrypted entries not supported');\n  }\n\n  const buffer = await readAs(reader, rawEntry.relativeOffsetOfLocalHeader, 30); // note: maybe this should be passed in or cached on entry\n  // as it's async so there will be at least one tick (not sure about that)\n\n  const totalLength = await reader.getLength(); // 0 - Local file header signature = 0x04034b50\n\n  const signature = getUint32LE(buffer, 0);\n\n  if (signature !== 0x04034b50) {\n    throw new Error(`invalid local file header signature: 0x${signature.toString(16)}`);\n  } // all this should be redundant\n  // 4 - Version needed to extract (minimum)\n  // 6 - General purpose bit flag\n  // 8 - Compression method\n  // 10 - File last modification time\n  // 12 - File last modification date\n  // 14 - CRC-32\n  // 18 - Compressed size\n  // 22 - Uncompressed size\n  // 26 - File name length (n)\n\n\n  const fileNameLength = getUint16LE(buffer, 26); // 28 - Extra field length (m)\n\n  const extraFieldLength = getUint16LE(buffer, 28); // 30 - File name\n  // 30+n - Extra field\n\n  const localFileHeaderEnd = rawEntry.relativeOffsetOfLocalHeader + buffer.length + fileNameLength + extraFieldLength;\n  let decompress;\n\n  if (rawEntry.compressionMethod === 0) {\n    // 0 - The file is stored (no compression)\n    decompress = false;\n  } else if (rawEntry.compressionMethod === 8) {\n    // 8 - The file is Deflated\n    decompress = true;\n  } else {\n    throw new Error(`unsupported compression method: ${rawEntry.compressionMethod}`);\n  }\n\n  const fileDataStart = localFileHeaderEnd;\n  const fileDataEnd = fileDataStart + rawEntry.compressedSize;\n\n  if (rawEntry.compressedSize !== 0) {\n    // bounds check now, because the read streams will probably not complain loud enough.\n    // since we're dealing with an unsigned offset plus an unsigned size,\n    // we only have 1 thing to check for.\n    if (fileDataEnd > totalLength) {\n      throw new Error(`file data overflows file bounds: ${fileDataStart} +  ${rawEntry.compressedSize}  > ${totalLength}`);\n    }\n  }\n\n  return {\n    decompress,\n    fileDataStart\n  };\n}\n\nasync function readEntryDataAsArrayBuffer(reader, rawEntry) {\n  const {\n    decompress,\n    fileDataStart\n  } = await readEntryDataHeader(reader, rawEntry);\n\n  if (!decompress) {\n    const dataView = await readAs(reader, fileDataStart, rawEntry.compressedSize); // make copy?\n    //\n    // 1. The source is a Blob/file. In this case we'll get back TypedArray we can just hand to the user\n    // 2. The source is a TypedArray. In this case we'll get back TypedArray that is a view into a larger buffer\n    //    but because ultimately this is used to return an ArrayBuffer to `someEntry.arrayBuffer()`\n    //    we need to return copy since we need the `ArrayBuffer`, not the TypedArray to exactly match the data.\n    //    Note: We could add another API function `bytes()` or something that returned a `Uint8Array`\n    //    instead of an `ArrayBuffer`. This would let us skip a copy here. But this case only happens for uncompressed\n    //    data. That seems like a rare enough case that adding a new API is not worth it? Or is it? A zip of jpegs or mp3s\n    //    might not be compressed. For now that's a TBD.\n\n    return isTypedArraySameAsArrayBuffer(dataView) ? dataView.buffer : dataView.slice().buffer;\n  } // see comment in readEntryDateAsBlob\n\n\n  const typedArrayOrBlob = await readAsBlobOrTypedArray(reader, fileDataStart, rawEntry.compressedSize);\n  const result = await inflateRawAsync(typedArrayOrBlob, rawEntry.uncompressedSize);\n  return result;\n}\n\nasync function readEntryDataAsBlob(reader, rawEntry, type) {\n  const {\n    decompress,\n    fileDataStart\n  } = await readEntryDataHeader(reader, rawEntry);\n\n  if (!decompress) {\n    const typedArrayOrBlob = await readAsBlobOrTypedArray(reader, fileDataStart, rawEntry.compressedSize, type);\n\n    if (isBlob(typedArrayOrBlob)) {\n      return typedArrayOrBlob;\n    }\n\n    return new Blob([isSharedArrayBuffer(typedArrayOrBlob.buffer) ? new Uint8Array(typedArrayOrBlob) : typedArrayOrBlob], {\n      type\n    });\n  } // Here's the issue with this mess (should refactor?)\n  // if the source is a blob then we really want to pass a blob to inflateRawAsync to avoid a large\n  // copy if we're going to a worker.\n\n\n  const typedArrayOrBlob = await readAsBlobOrTypedArray(reader, fileDataStart, rawEntry.compressedSize);\n  const result = await inflateRawAsync(typedArrayOrBlob, rawEntry.uncompressedSize, type);\n  return result;\n}\n\nfunction setOptions$1(options) {\n  setOptions(options);\n}\n\nasync function unzipRaw(source) {\n  let reader;\n\n  if (typeof Blob !== 'undefined' && source instanceof Blob) {\n    reader = new BlobReader(source);\n  } else if (source instanceof ArrayBuffer || source && source.buffer && source.buffer instanceof ArrayBuffer) {\n    reader = new ArrayBufferReader(source);\n  } else if (isSharedArrayBuffer(source) || isSharedArrayBuffer(source.buffer)) {\n    reader = new ArrayBufferReader(source);\n  } else if (typeof source === 'string') {\n    const req = await fetch(source);\n\n    if (!req.ok) {\n      throw new Error(`failed http request ${source}, status: ${req.status}: ${req.statusText}`);\n    }\n\n    const blob = await req.blob();\n    reader = new BlobReader(blob);\n  } else if (typeof source.getLength === 'function' && typeof source.read === 'function') {\n    reader = source;\n  } else {\n    throw new Error('unsupported source type');\n  }\n\n  const totalLength = await reader.getLength();\n\n  if (totalLength > Number.MAX_SAFE_INTEGER) {\n    throw new Error(`file too large. size: ${totalLength}. Only file sizes up 4503599627370496 bytes are supported`);\n  }\n\n  return await findEndOfCentralDirector(reader, totalLength);\n} // If the names are not utf8 you should use unzipitRaw\n\n\nasync function unzip(source) {\n  const {\n    zip,\n    entries\n  } = await unzipRaw(source);\n  return {\n    zip,\n    entries: Object.fromEntries(entries.map(v => [v.name, v]))\n  };\n}\n\nfunction cleanup$1() {\n  cleanup();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/unzipit/dist/unzipit.module.js\n");

/***/ }),

/***/ "./actions/set-archive.js":
/*!********************************!*\
  !*** ./actions/set-archive.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((state, archive) => {\n  return {\n    archive\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hY3Rpb25zL3NldC1hcmNoaXZlLmpzPzE3YzIiXSwibmFtZXMiOlsic3RhdGUiLCJhcmNoaXZlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsQ0FBQ0EsS0FBRCxFQUFRQyxPQUFSLEtBQW9CO0FBQ2xDLFNBQU87QUFBQ0E7QUFBRCxHQUFQO0FBQ0EsQ0FGRCIsImZpbGUiOiIuL2FjdGlvbnMvc2V0LWFyY2hpdmUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoc3RhdGUsIGFyY2hpdmUpID0+IHtcblx0cmV0dXJuIHthcmNoaXZlfTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./actions/set-archive.js\n");

/***/ }),

/***/ "./actions/set-channel-scroll-state.js":
/*!*********************************************!*\
  !*** ./actions/set-channel-scroll-state.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"fixupMessageStart\": () => (/* reexport safe */ _util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_0__.fixupMessageStart),\n/* harmony export */   \"fixupMessageEnd\": () => (/* reexport safe */ _util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_0__.fixupMessageEnd)\n/* harmony export */ });\n/* harmony import */ var _util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/fixup-message-boundaries */ \"./util/fixup-message-boundaries.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((state, channelID, start, end) => {\n  const {\n    messages\n  } = state.archive.channels.get(channelID);\n  return {\n    channelScrollState: { ...state.channelScrollState,\n      [channelID]: {\n        start: (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_0__.fixupMessageStart)(start, messages),\n        end: (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_0__.fixupMessageEnd)(end, messages)\n      }\n    }\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hY3Rpb25zL3NldC1jaGFubmVsLXNjcm9sbC1zdGF0ZS5qcz85ZjkzIl0sIm5hbWVzIjpbInN0YXRlIiwiY2hhbm5lbElEIiwic3RhcnQiLCJlbmQiLCJtZXNzYWdlcyIsImFyY2hpdmUiLCJjaGFubmVscyIsImdldCIsImNoYW5uZWxTY3JvbGxTdGF0ZSIsImZpeHVwTWVzc2FnZVN0YXJ0IiwiZml4dXBNZXNzYWdlRW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFFQSxpRUFBZSxDQUFDQSxLQUFELEVBQVFDLFNBQVIsRUFBbUJDLEtBQW5CLEVBQTBCQyxHQUExQixLQUFrQztBQUNoRCxRQUFNO0FBQUNDO0FBQUQsTUFBYUosS0FBSyxDQUFDSyxPQUFOLENBQWNDLFFBQWQsQ0FBdUJDLEdBQXZCLENBQTJCTixTQUEzQixDQUFuQjtBQUNBLFNBQU87QUFDTk8sc0JBQWtCLEVBQUUsRUFDbkIsR0FBR1IsS0FBSyxDQUFDUSxrQkFEVTtBQUVuQixPQUFDUCxTQUFELEdBQWE7QUFDWkMsYUFBSyxFQUFFTyxpRkFBaUIsQ0FBQ1AsS0FBRCxFQUFRRSxRQUFSLENBRFo7QUFFWkQsV0FBRyxFQUFFTywrRUFBZSxDQUFDUCxHQUFELEVBQU1DLFFBQU47QUFGUjtBQUZNO0FBRGQsR0FBUDtBQVNBLENBWEQiLCJmaWxlIjoiLi9hY3Rpb25zL3NldC1jaGFubmVsLXNjcm9sbC1zdGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Zml4dXBNZXNzYWdlU3RhcnQsIGZpeHVwTWVzc2FnZUVuZH0gZnJvbSAnLi4vdXRpbC9maXh1cC1tZXNzYWdlLWJvdW5kYXJpZXMnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUsIGNoYW5uZWxJRCwgc3RhcnQsIGVuZCkgPT4ge1xuXHRjb25zdCB7bWVzc2FnZXN9ID0gc3RhdGUuYXJjaGl2ZS5jaGFubmVscy5nZXQoY2hhbm5lbElEKTtcblx0cmV0dXJuIHtcblx0XHRjaGFubmVsU2Nyb2xsU3RhdGU6IHtcblx0XHRcdC4uLnN0YXRlLmNoYW5uZWxTY3JvbGxTdGF0ZSxcblx0XHRcdFtjaGFubmVsSURdOiB7XG5cdFx0XHRcdHN0YXJ0OiBmaXh1cE1lc3NhZ2VTdGFydChzdGFydCwgbWVzc2FnZXMpLFxuXHRcdFx0XHRlbmQ6IGZpeHVwTWVzc2FnZUVuZChlbmQsIG1lc3NhZ2VzKVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmV4cG9ydCB7Zml4dXBNZXNzYWdlU3RhcnQsIGZpeHVwTWVzc2FnZUVuZH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./actions/set-channel-scroll-state.js\n");

/***/ }),

/***/ "./actions/set-current-channel.js":
/*!****************************************!*\
  !*** ./actions/set-current-channel.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/fixup-message-boundaries */ \"./util/fixup-message-boundaries.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((state, currentChannel) => {\n  if (currentChannel === null) return {\n    currentChannel\n  };\n  const channel = state.archive.channels.get(currentChannel);\n  const {\n    messages\n  } = channel;\n  const newState = { ...state,\n    currentChannel\n  };\n\n  if (!Object.prototype.hasOwnProperty.call(newState.channelScrollState, currentChannel)) {\n    newState.channelScrollState = { ...newState.channelScrollState,\n      [currentChannel]: {\n        start: (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_0__.fixupMessageStart)(0, messages),\n        end: (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_0__.fixupMessageEnd)(50, messages)\n      }\n    };\n  }\n\n  return newState;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hY3Rpb25zL3NldC1jdXJyZW50LWNoYW5uZWwuanM/MTBjMiJdLCJuYW1lcyI6WyJzdGF0ZSIsImN1cnJlbnRDaGFubmVsIiwiY2hhbm5lbCIsImFyY2hpdmUiLCJjaGFubmVscyIsImdldCIsIm1lc3NhZ2VzIiwibmV3U3RhdGUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjaGFubmVsU2Nyb2xsU3RhdGUiLCJzdGFydCIsImZpeHVwTWVzc2FnZVN0YXJ0IiwiZW5kIiwiZml4dXBNZXNzYWdlRW5kIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBRUEsaUVBQWUsQ0FBQ0EsS0FBRCxFQUFRQyxjQUFSLEtBQTJCO0FBQ3pDLE1BQUlBLGNBQWMsS0FBSyxJQUF2QixFQUE2QixPQUFPO0FBQUNBO0FBQUQsR0FBUDtBQUM3QixRQUFNQyxPQUFPLEdBQUdGLEtBQUssQ0FBQ0csT0FBTixDQUFjQyxRQUFkLENBQXVCQyxHQUF2QixDQUEyQkosY0FBM0IsQ0FBaEI7QUFDQSxRQUFNO0FBQUNLO0FBQUQsTUFBYUosT0FBbkI7QUFDQSxRQUFNSyxRQUFRLEdBQUcsRUFBQyxHQUFHUCxLQUFKO0FBQVdDO0FBQVgsR0FBakI7O0FBRUEsTUFBSSxDQUFDTyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ0osUUFBUSxDQUFDSyxrQkFBOUMsRUFBa0VYLGNBQWxFLENBQUwsRUFBd0Y7QUFDdkZNLFlBQVEsQ0FBQ0ssa0JBQVQsR0FBOEIsRUFDN0IsR0FBR0wsUUFBUSxDQUFDSyxrQkFEaUI7QUFFN0IsT0FBQ1gsY0FBRCxHQUFrQjtBQUFDWSxhQUFLLEVBQUVDLGlGQUFpQixDQUFDLENBQUQsRUFBSVIsUUFBSixDQUF6QjtBQUF3Q1MsV0FBRyxFQUFFQywrRUFBZSxDQUFDLEVBQUQsRUFBS1YsUUFBTDtBQUE1RDtBQUZXLEtBQTlCO0FBS0E7O0FBRUQsU0FBT0MsUUFBUDtBQUNBLENBZkQiLCJmaWxlIjoiLi9hY3Rpb25zL3NldC1jdXJyZW50LWNoYW5uZWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2ZpeHVwTWVzc2FnZVN0YXJ0LCBmaXh1cE1lc3NhZ2VFbmR9IGZyb20gJy4uL3V0aWwvZml4dXAtbWVzc2FnZS1ib3VuZGFyaWVzJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlLCBjdXJyZW50Q2hhbm5lbCkgPT4ge1xuXHRpZiAoY3VycmVudENoYW5uZWwgPT09IG51bGwpIHJldHVybiB7Y3VycmVudENoYW5uZWx9O1xuXHRjb25zdCBjaGFubmVsID0gc3RhdGUuYXJjaGl2ZS5jaGFubmVscy5nZXQoY3VycmVudENoYW5uZWwpO1xuXHRjb25zdCB7bWVzc2FnZXN9ID0gY2hhbm5lbDtcblx0Y29uc3QgbmV3U3RhdGUgPSB7Li4uc3RhdGUsIGN1cnJlbnRDaGFubmVsfTtcblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXdTdGF0ZS5jaGFubmVsU2Nyb2xsU3RhdGUsIGN1cnJlbnRDaGFubmVsKSkge1xuXHRcdG5ld1N0YXRlLmNoYW5uZWxTY3JvbGxTdGF0ZSA9IHtcblx0XHRcdC4uLm5ld1N0YXRlLmNoYW5uZWxTY3JvbGxTdGF0ZSxcblx0XHRcdFtjdXJyZW50Q2hhbm5lbF06IHtzdGFydDogZml4dXBNZXNzYWdlU3RhcnQoMCwgbWVzc2FnZXMpLCBlbmQ6IGZpeHVwTWVzc2FnZUVuZCg1MCwgbWVzc2FnZXMpfVxuXHRcdH07XG5cblx0fVxuXG5cdHJldHVybiBuZXdTdGF0ZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./actions/set-current-channel.js\n");

/***/ }),

/***/ "./actions/set-reaction-info-index.js":
/*!********************************************!*\
  !*** ./actions/set-reaction-info-index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((state, idx) => {\n  return {\n    showReactionIndex: idx\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hY3Rpb25zL3NldC1yZWFjdGlvbi1pbmZvLWluZGV4LmpzPzg4OTMiXSwibmFtZXMiOlsic3RhdGUiLCJpZHgiLCJzaG93UmVhY3Rpb25JbmRleCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLENBQUNBLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtBQUM5QixTQUFPO0FBQ05DLHFCQUFpQixFQUFFRDtBQURiLEdBQVA7QUFHQSxDQUpEIiwiZmlsZSI6Ii4vYWN0aW9ucy9zZXQtcmVhY3Rpb24taW5mby1pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IChzdGF0ZSwgaWR4KSA9PiB7XG5cdHJldHVybiB7XG5cdFx0c2hvd1JlYWN0aW9uSW5kZXg6IGlkeFxuXHR9O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./actions/set-reaction-info-index.js\n");

/***/ }),

/***/ "./actions/set-reaction-info.js":
/*!**************************************!*\
  !*** ./actions/set-reaction-info.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((state, reactions, idx) => {\n  return {\n    reactionsToShow: reactions,\n    showReactionIndex: idx\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hY3Rpb25zL3NldC1yZWFjdGlvbi1pbmZvLmpzP2M3MDQiXSwibmFtZXMiOlsic3RhdGUiLCJyZWFjdGlvbnMiLCJpZHgiLCJyZWFjdGlvbnNUb1Nob3ciLCJzaG93UmVhY3Rpb25JbmRleCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLENBQUNBLEtBQUQsRUFBUUMsU0FBUixFQUFtQkMsR0FBbkIsS0FBMkI7QUFDekMsU0FBTztBQUNOQyxtQkFBZSxFQUFFRixTQURYO0FBRU5HLHFCQUFpQixFQUFFRjtBQUZiLEdBQVA7QUFJQSxDQUxEIiwiZmlsZSI6Ii4vYWN0aW9ucy9zZXQtcmVhY3Rpb24taW5mby5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IChzdGF0ZSwgcmVhY3Rpb25zLCBpZHgpID0+IHtcblx0cmV0dXJuIHtcblx0XHRyZWFjdGlvbnNUb1Nob3c6IHJlYWN0aW9ucyxcblx0XHRzaG93UmVhY3Rpb25JbmRleDogaWR4XG5cdH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./actions/set-reaction-info.js\n");

/***/ }),

/***/ "./actions/set-user-info-id.js":
/*!*************************************!*\
  !*** ./actions/set-user-info-id.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((state, newID) => {\n  return {\n    showInfoOfUserID: newID\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hY3Rpb25zL3NldC11c2VyLWluZm8taWQuanM/MzJmNSJdLCJuYW1lcyI6WyJzdGF0ZSIsIm5ld0lEIiwic2hvd0luZm9PZlVzZXJJRCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLENBQUNBLEtBQUQsRUFBUUMsS0FBUixLQUFrQjtBQUNoQyxTQUFPO0FBQUNDLG9CQUFnQixFQUFFRDtBQUFuQixHQUFQO0FBQ0EsQ0FGRCIsImZpbGUiOiIuL2FjdGlvbnMvc2V0LXVzZXItaW5mby1pZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IChzdGF0ZSwgbmV3SUQpID0+IHtcblx0cmV0dXJuIHtzaG93SW5mb09mVXNlcklEOiBuZXdJRH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./actions/set-user-info-id.js\n");

/***/ }),

/***/ "./actions/toggle-sidebar.js":
/*!***********************************!*\
  !*** ./actions/toggle-sidebar.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (state => {\n  return {\n    showSidebar: !state.showSidebar\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hY3Rpb25zL3RvZ2dsZS1zaWRlYmFyLmpzPzkzZTEiXSwibmFtZXMiOlsic3RhdGUiLCJzaG93U2lkZWJhciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlQSxLQUFLLElBQUk7QUFDdkIsU0FBTztBQUFDQyxlQUFXLEVBQUUsQ0FBQ0QsS0FBSyxDQUFDQztBQUFyQixHQUFQO0FBQ0EsQ0FGRCIsImZpbGUiOiIuL2FjdGlvbnMvdG9nZ2xlLXNpZGViYXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBzdGF0ZSA9PiB7XG5cdHJldHVybiB7c2hvd1NpZGViYXI6ICFzdGF0ZS5zaG93U2lkZWJhcn07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./actions/toggle-sidebar.js\n");

/***/ }),

/***/ "./components/App/App.jsx":
/*!********************************!*\
  !*** ./components/App/App.jsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Main)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./components/App/style.scss\");\n/* harmony import */ var _vendor_normalize_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../vendor/normalize.css */ \"../vendor/normalize.css\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unistore */ \"../node_modules/unistore/dist/unistore.es.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _deserialization_deserialization__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../deserialization/deserialization */ \"./deserialization/deserialization.js\");\n/* harmony import */ var _ChannelList_ChannelList__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ChannelList/ChannelList */ \"./components/ChannelList/ChannelList.jsx\");\n/* harmony import */ var _ChannelView_ChannelView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ChannelView/ChannelView */ \"./components/ChannelView/ChannelView.jsx\");\n/* harmony import */ var _Sidebar_Sidebar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Sidebar/Sidebar */ \"./components/Sidebar/Sidebar.jsx\");\n/* harmony import */ var _Modal_Modal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Modal/Modal */ \"./components/Modal/Modal.jsx\");\n/* harmony import */ var _UserInfo_UserInfo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../UserInfo/UserInfo */ \"./components/UserInfo/UserInfo.jsx\");\n/* harmony import */ var _ReactionInfo_ReactionInfo__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ReactionInfo/ReactionInfo */ \"./components/ReactionInfo/ReactionInfo.jsx\");\n/* harmony import */ var _ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ErrorBoundary/ErrorBoundary */ \"./components/ErrorBoundary/ErrorBoundary.jsx\");\n/* harmony import */ var _actions_set_archive__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../actions/set-archive */ \"./actions/set-archive.js\");\n/* harmony import */ var _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../actions/set-user-info-id */ \"./actions/set-user-info-id.js\");\n/* harmony import */ var _actions_set_reaction_info__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../actions/set-reaction-info */ \"./actions/set-reaction-info.js\");\n/* harmony import */ var _actions_set_current_channel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../actions/set-current-channel */ \"./actions/set-current-channel.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst store = (0,unistore__WEBPACK_IMPORTED_MODULE_3__.default)({\n  archive: null,\n  currentChannel: null,\n  showInfoOfUserID: null,\n  reactionsToShow: null,\n  showReactionIndex: null,\n  channelScrollState: {},\n  showSidebar: true\n});\n\nclass _App extends preact__WEBPACK_IMPORTED_MODULE_2__.Component {\n  constructor(props) {\n    super(props);\n    this.handleUpload = this.handleUpload.bind(this);\n    this.hideUserInfo = this.hideUserInfo.bind(this);\n    this.hideReactionInfo = this.hideReactionInfo.bind(this);\n  }\n\n  handleUpload(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n    (0,_deserialization_deserialization__WEBPACK_IMPORTED_MODULE_5__.default)(file).then(archive => {\n      // TODO: race condition from disposing new archive before old one is set?\n      if (this.props.archive) this.props.archive.dispose();\n      this.props.setArchive(archive);\n      this.props.setCurrentChannel(archive.channels.size === 1 ? archive.channels.values().next().value.id : null);\n    });\n  }\n\n  hideUserInfo() {\n    this.props.setUserInfoID(null);\n  }\n\n  hideReactionInfo() {\n    this.props.setReactionInfo(null, null);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.app\n    }, this.props.archive ? /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"channels-and-messages\"]\n    }, this.props.archive.type === 'server' ? /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"channel-list-panel\"]\n    }, /*#__PURE__*/React.createElement(_ChannelList_ChannelList__WEBPACK_IMPORTED_MODULE_6__.default, {\n      channels: this.props.archive ? this.props.archive.channels : null\n    })) : null, /*#__PURE__*/React.createElement(_ChannelView_ChannelView__WEBPACK_IMPORTED_MODULE_7__.default, {\n      channel: this.props.archive ? this.props.archive.channels.get(this.props.currentChannel) : null\n    }), /*#__PURE__*/React.createElement(_Sidebar_Sidebar__WEBPACK_IMPORTED_MODULE_8__.default, null)) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"json-file-upload-form\"]\n    }, /*#__PURE__*/React.createElement(\"span\", null, \".json or .zip log file: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleUpload\n    })), this.props.showInfoOfUserID ? /*#__PURE__*/React.createElement(_Modal_Modal__WEBPACK_IMPORTED_MODULE_9__.default, {\n      onClose: this.hideUserInfo\n    }, /*#__PURE__*/React.createElement(_UserInfo_UserInfo__WEBPACK_IMPORTED_MODULE_10__.default, {\n      userID: this.props.showInfoOfUserID\n    })) : null, this.props.reactionsToShow ? /*#__PURE__*/React.createElement(_Modal_Modal__WEBPACK_IMPORTED_MODULE_9__.default, {\n      onClose: this.hideReactionInfo\n    }, /*#__PURE__*/React.createElement(_ReactionInfo_ReactionInfo__WEBPACK_IMPORTED_MODULE_11__.default, null)) : null);\n  }\n\n}\n\nconst App = (0,_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_12__.ErrorBoundaryHOC)((0,unistore_preact__WEBPACK_IMPORTED_MODULE_4__.connect)(['archive', 'currentChannel', 'showInfoOfUserID', 'reactionsToShow'], {\n  setUserInfoID: _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_14__.default,\n  setReactionInfo: _actions_set_reaction_info__WEBPACK_IMPORTED_MODULE_15__.default,\n  setArchive: _actions_set_archive__WEBPACK_IMPORTED_MODULE_13__.default,\n  setCurrentChannel: _actions_set_current_channel__WEBPACK_IMPORTED_MODULE_16__.default\n})(_App));\nclass Main extends preact__WEBPACK_IMPORTED_MODULE_2__.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(unistore_preact__WEBPACK_IMPORTED_MODULE_4__.Provider, {\n      store: store\n    }, /*#__PURE__*/React.createElement(App, null));\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0FwcC9BcHAuanN4PzE4MzMiXSwibmFtZXMiOlsic3RvcmUiLCJjcmVhdGVTdG9yZSIsImFyY2hpdmUiLCJjdXJyZW50Q2hhbm5lbCIsInNob3dJbmZvT2ZVc2VySUQiLCJyZWFjdGlvbnNUb1Nob3ciLCJzaG93UmVhY3Rpb25JbmRleCIsImNoYW5uZWxTY3JvbGxTdGF0ZSIsInNob3dTaWRlYmFyIiwiX0FwcCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJoYW5kbGVVcGxvYWQiLCJiaW5kIiwiaGlkZVVzZXJJbmZvIiwiaGlkZVJlYWN0aW9uSW5mbyIsImV2ZW50IiwiZmlsZSIsInRhcmdldCIsImZpbGVzIiwiZGVzZXJpYWxpemVBcmNoaXZlRmlsZSIsInRoZW4iLCJkaXNwb3NlIiwic2V0QXJjaGl2ZSIsInNldEN1cnJlbnRDaGFubmVsIiwiY2hhbm5lbHMiLCJzaXplIiwidmFsdWVzIiwibmV4dCIsInZhbHVlIiwiaWQiLCJzZXRVc2VySW5mb0lEIiwic2V0UmVhY3Rpb25JbmZvIiwicmVuZGVyIiwic3R5bGUiLCJhcHAiLCJ0eXBlIiwiZ2V0IiwiQXBwIiwiRXJyb3JCb3VuZGFyeUhPQyIsImNvbm5lY3QiLCJNYWluIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxpREFBVyxDQUFDO0FBQ3pCQyxTQUFPLEVBQUUsSUFEZ0I7QUFFekJDLGdCQUFjLEVBQUUsSUFGUztBQUd6QkMsa0JBQWdCLEVBQUUsSUFITztBQUl6QkMsaUJBQWUsRUFBRSxJQUpRO0FBS3pCQyxtQkFBaUIsRUFBRSxJQUxNO0FBTXpCQyxvQkFBa0IsRUFBRSxFQU5LO0FBT3pCQyxhQUFXLEVBQUU7QUFQWSxDQUFE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T0FERCxDQURBLEdBSUEsSUF0Q0YsQ0FERDtBQTBDQTs7QUEzRTJCOztBQThFN0IsTUFBTXVCLEdBQUcsR0FBR0MsK0VBQWdCLENBQzNCQyx3REFBTyxDQUNOLENBQUMsU0FBRCxFQUFZLGdCQUFaLEVBQThCLGtCQUE5QixFQUFrRCxpQkFBbEQsQ0FETSxFQUVOO0FBQUNULGVBQUQ7QUFBZ0JDLGlCQUFoQjtBQUFpQ1QsWUFBakM7QUFBNkNDLG1CQUFpQkE7QUFBOUQsQ0FGTSxDQUFQLENBR0VoQixJQUhGLENBRDJCLENBQTVCO0FBT2UsTUFBTWlDLElBQU4sU0FBbUJoQyw2Q0FBbkIsQ0FBNkI7QUFDM0N3QixRQUFNLEdBQUk7QUFDVCx3QkFDQyxvQkFBQyxxREFBRDtBQUFVLFdBQUssRUFBRWxDO0FBQWpCLG9CQUNDLG9CQUFDLEdBQUQsT0FERCxDQUREO0FBS0E7O0FBUDBDIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9BcHAvQXBwLmpzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlLnNjc3MnO1xuaW1wb3J0ICcuLi8uLi8uLi92ZW5kb3Ivbm9ybWFsaXplLmNzcyc7XG5pbXBvcnQge0NvbXBvbmVudH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCBjcmVhdGVTdG9yZSBmcm9tICd1bmlzdG9yZSc7XG5pbXBvcnQge1Byb3ZpZGVyLCBjb25uZWN0fSBmcm9tICd1bmlzdG9yZS9wcmVhY3QnO1xuXG5pbXBvcnQgZGVzZXJpYWxpemVBcmNoaXZlRmlsZSBmcm9tICcuLi8uLi9kZXNlcmlhbGl6YXRpb24vZGVzZXJpYWxpemF0aW9uJztcblxuaW1wb3J0IENoYW5uZWxMaXN0IGZyb20gJy4uL0NoYW5uZWxMaXN0L0NoYW5uZWxMaXN0JztcbmltcG9ydCBDaGFubmVsVmlldyBmcm9tICcuLi9DaGFubmVsVmlldy9DaGFubmVsVmlldyc7XG5pbXBvcnQgU2lkZWJhciBmcm9tICcuLi9TaWRlYmFyL1NpZGViYXInO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsL01vZGFsJztcbmltcG9ydCBVc2VySW5mbyBmcm9tICcuLi9Vc2VySW5mby9Vc2VySW5mbyc7XG5pbXBvcnQgUmVhY3Rpb25JbmZvIGZyb20gJy4uL1JlYWN0aW9uSW5mby9SZWFjdGlvbkluZm8nO1xuaW1wb3J0IHtFcnJvckJvdW5kYXJ5SE9DfSBmcm9tICcuLi9FcnJvckJvdW5kYXJ5L0Vycm9yQm91bmRhcnknO1xuXG5pbXBvcnQgc2V0QXJjaGl2ZSBmcm9tICcuLi8uLi9hY3Rpb25zL3NldC1hcmNoaXZlJztcbmltcG9ydCBzZXRVc2VySW5mb0lEIGZyb20gJy4uLy4uL2FjdGlvbnMvc2V0LXVzZXItaW5mby1pZCc7XG5pbXBvcnQgc2V0UmVhY3Rpb25JbmZvIGZyb20gJy4uLy4uL2FjdGlvbnMvc2V0LXJlYWN0aW9uLWluZm8nO1xuaW1wb3J0IHNldEN1cnJlbnRDaGFubmVsIGZyb20gJy4uLy4uL2FjdGlvbnMvc2V0LWN1cnJlbnQtY2hhbm5lbCc7XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoe1xuXHRhcmNoaXZlOiBudWxsLFxuXHRjdXJyZW50Q2hhbm5lbDogbnVsbCxcblx0c2hvd0luZm9PZlVzZXJJRDogbnVsbCxcblx0cmVhY3Rpb25zVG9TaG93OiBudWxsLFxuXHRzaG93UmVhY3Rpb25JbmRleDogbnVsbCxcblx0Y2hhbm5lbFNjcm9sbFN0YXRlOiB7fSxcblx0c2hvd1NpZGViYXI6IHRydWVcbn0pO1xuXG5jbGFzcyBfQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKHByb3BzKSB7XG5cdFx0c3VwZXIocHJvcHMpO1xuXG5cdFx0dGhpcy5oYW5kbGVVcGxvYWQgPSB0aGlzLmhhbmRsZVVwbG9hZC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuaGlkZVVzZXJJbmZvID0gdGhpcy5oaWRlVXNlckluZm8uYmluZCh0aGlzKTtcblx0XHR0aGlzLmhpZGVSZWFjdGlvbkluZm8gPSB0aGlzLmhpZGVSZWFjdGlvbkluZm8uYmluZCh0aGlzKTtcblx0fVxuXG5cdGhhbmRsZVVwbG9hZCAoZXZlbnQpIHtcblx0XHRjb25zdCBmaWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdO1xuXHRcdGlmICghZmlsZSkgcmV0dXJuO1xuXG5cdFx0ZGVzZXJpYWxpemVBcmNoaXZlRmlsZShmaWxlKVxuXHRcdFx0LnRoZW4oYXJjaGl2ZSA9PiB7XG5cdFx0XHRcdC8vIFRPRE86IHJhY2UgY29uZGl0aW9uIGZyb20gZGlzcG9zaW5nIG5ldyBhcmNoaXZlIGJlZm9yZSBvbGQgb25lIGlzIHNldD9cblx0XHRcdFx0aWYgKHRoaXMucHJvcHMuYXJjaGl2ZSkgdGhpcy5wcm9wcy5hcmNoaXZlLmRpc3Bvc2UoKTtcblx0XHRcdFx0dGhpcy5wcm9wcy5zZXRBcmNoaXZlKGFyY2hpdmUpO1xuXHRcdFx0XHR0aGlzLnByb3BzLnNldEN1cnJlbnRDaGFubmVsKGFyY2hpdmUuY2hhbm5lbHMuc2l6ZSA9PT0gMSA/XG5cdFx0XHRcdFx0YXJjaGl2ZS5jaGFubmVscy52YWx1ZXMoKS5uZXh0KCkudmFsdWUuaWQgOlxuXHRcdFx0XHRcdG51bGwpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRoaWRlVXNlckluZm8gKCkge1xuXHRcdHRoaXMucHJvcHMuc2V0VXNlckluZm9JRChudWxsKTtcblx0fVxuXG5cdGhpZGVSZWFjdGlvbkluZm8gKCkge1xuXHRcdHRoaXMucHJvcHMuc2V0UmVhY3Rpb25JbmZvKG51bGwsIG51bGwpO1xuXHR9XG5cblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBpZD17c3R5bGUuYXBwfT5cblx0XHRcdFx0e3RoaXMucHJvcHMuYXJjaGl2ZSA/XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydjaGFubmVscy1hbmQtbWVzc2FnZXMnXX0+XG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRoaXMucHJvcHMuYXJjaGl2ZS50eXBlID09PSAnc2VydmVyJyA/XG5cdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydjaGFubmVsLWxpc3QtcGFuZWwnXX0+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8Q2hhbm5lbExpc3QgY2hhbm5lbHM9e3RoaXMucHJvcHMuYXJjaGl2ZSA/IHRoaXMucHJvcHMuYXJjaGl2ZS5jaGFubmVscyA6IG51bGx9IC8+XG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+IDpcblx0XHRcdFx0XHRcdFx0XHRudWxsXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQ8Q2hhbm5lbFZpZXcgY2hhbm5lbD17dGhpcy5wcm9wcy5hcmNoaXZlID9cblx0XHRcdFx0XHRcdFx0dGhpcy5wcm9wcy5hcmNoaXZlLmNoYW5uZWxzLmdldCh0aGlzLnByb3BzLmN1cnJlbnRDaGFubmVsKSA6XG5cdFx0XHRcdFx0XHRcdG51bGxcblx0XHRcdFx0XHRcdH0vPlxuXHRcdFx0XHRcdFx0PFNpZGViYXIgLz5cblx0XHRcdFx0XHQ8L2Rpdj4gOlxuXHRcdFx0XHRcdG51bGxcblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydqc29uLWZpbGUtdXBsb2FkLWZvcm0nXX0+XG5cdFx0XHRcdFx0PHNwYW4+Lmpzb24gb3IgLnppcCBsb2cgZmlsZTogPC9zcGFuPlxuXHRcdFx0XHRcdDxpbnB1dFxuXHRcdFx0XHRcdFx0dHlwZT1cImZpbGVcIlxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMuaGFuZGxlVXBsb2FkfVxuXHRcdFx0XHRcdD48L2lucHV0PlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHR7dGhpcy5wcm9wcy5zaG93SW5mb09mVXNlcklEID9cblx0XHRcdFx0XHQ8TW9kYWwgb25DbG9zZT17dGhpcy5oaWRlVXNlckluZm99PlxuXHRcdFx0XHRcdFx0PFVzZXJJbmZvIHVzZXJJRD17dGhpcy5wcm9wcy5zaG93SW5mb09mVXNlcklEfS8+XG5cdFx0XHRcdFx0PC9Nb2RhbD4gOlxuXHRcdFx0XHRcdG51bGx9XG5cblx0XHRcdFx0e3RoaXMucHJvcHMucmVhY3Rpb25zVG9TaG93ID9cblx0XHRcdFx0XHQ8TW9kYWwgb25DbG9zZT17dGhpcy5oaWRlUmVhY3Rpb25JbmZvfT5cblx0XHRcdFx0XHRcdDxSZWFjdGlvbkluZm8gLz5cblx0XHRcdFx0XHQ8L01vZGFsPiA6XG5cdFx0XHRcdFx0bnVsbH1cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cbn1cblxuY29uc3QgQXBwID0gRXJyb3JCb3VuZGFyeUhPQyhcblx0Y29ubmVjdChcblx0XHRbJ2FyY2hpdmUnLCAnY3VycmVudENoYW5uZWwnLCAnc2hvd0luZm9PZlVzZXJJRCcsICdyZWFjdGlvbnNUb1Nob3cnXSxcblx0XHR7c2V0VXNlckluZm9JRCwgc2V0UmVhY3Rpb25JbmZvLCBzZXRBcmNoaXZlLCBzZXRDdXJyZW50Q2hhbm5lbH1cblx0KShfQXBwKVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpbiBleHRlbmRzIENvbXBvbmVudCB7XG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuXHRcdFx0XHQ8QXBwIC8+XG5cdFx0XHQ8L1Byb3ZpZGVyPlxuXHRcdCk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/App/App.jsx\n");

/***/ }),

/***/ "./components/Attachment/Attachment.jsx":
/*!**********************************************!*\
  !*** ./components/Attachment/Attachment.jsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/Attachment/style.scss\");\n\nconst MAX_IMAGE_SIZE = 500; // `width: auto; height: auto` overrides unloaded images' \"intrinsic size\", causing the scroll to jump when they load,\n// so use this JS to style them instead\n\nconst sizeImageAttachment = attachment => {\n  if (!attachment.width || !attachment.height) {\n    // fall back to CSS for dynamically-sized images\n    return `max-width: ${MAX_IMAGE_SIZE}px; max-height: ${MAX_IMAGE_SIZE}px; width: auto; height: auto;`;\n  }\n\n  const largestDimension = Math.max(attachment.width, attachment.height);\n  if (largestDimension <= MAX_IMAGE_SIZE) return '';\n  const scaleFactor = MAX_IMAGE_SIZE / largestDimension;\n  return `width: ${attachment.width * scaleFactor}px; height: ${attachment.height * scaleFactor}px;`;\n};\n\nconst Attachment = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default.attachment\n  }, /\\.(jpe?g|png|gif)$/.test(props.attachment.url.toLowerCase()) ? /*#__PURE__*/React.createElement(\"img\", {\n    width: props.attachment.width || null,\n    height: props.attachment.height || null,\n    src: props.attachment.url,\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"attachment-image\"],\n    style: sizeImageAttachment(props.attachment)\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"attachment-file\"]\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: props.attachment.url\n  }, props.attachment.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"attachment-size\"]\n  }, props.attachment.size, \" bytes\")));\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Attachment);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0F0dGFjaG1lbnQvQXR0YWNobWVudC5qc3g/OTU4NiJdLCJuYW1lcyI6WyJNQVhfSU1BR0VfU0laRSIsInNpemVJbWFnZUF0dGFjaG1lbnQiLCJhdHRhY2htZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJsYXJnZXN0RGltZW5zaW9uIiwiTWF0aCIsIm1heCIsInNjYWxlRmFjdG9yIiwiQXR0YWNobWVudCIsInByb3BzIiwic3R5bGUiLCJ0ZXN0IiwidXJsIiwidG9Mb3dlckNhc2UiLCJuYW1lIiwic2l6ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUVBLE1BQU1BLGNBQWMsR0FBRyxHQUF2QixDLENBRUE7QUFDQTs7QUFDQSxNQUFNQyxtQkFBbUIsR0FBR0MsVUFBVSxJQUFJO0FBQ3pDLE1BQUksQ0FBQ0EsVUFBVSxDQUFDQyxLQUFaLElBQXFCLENBQUNELFVBQVUsQ0FBQ0UsTUFBckMsRUFBNkM7QUFDNUM7QUFDQSxXQUFRLGNBQWFKLGNBQWUsbUJBQWtCQSxjQUFlLGdDQUFyRTtBQUNBOztBQUVELFFBQU1LLGdCQUFnQixHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBU0wsVUFBVSxDQUFDQyxLQUFwQixFQUEyQkQsVUFBVSxDQUFDRSxNQUF0QyxDQUF6QjtBQUNBLE1BQUlDLGdCQUFnQixJQUFJTCxjQUF4QixFQUF3QyxPQUFPLEVBQVA7QUFDeEMsUUFBTVEsV0FBVyxHQUFHUixjQUFjLEdBQUdLLGdCQUFyQztBQUVBLFNBQVEsVUFBU0gsVUFBVSxDQUFDQyxLQUFYLEdBQW1CSyxXQUFZLGVBQWNOLFVBQVUsQ0FBQ0UsTUFBWCxHQUFvQkksV0FBWSxLQUE5RjtBQUNBLENBWEQ7O0FBYUEsTUFBTUMsVUFBVSxHQUFHQyxLQUFLLElBQUk7QUFDM0Isc0JBQ0M7QUFBSyxhQUFTLEVBQUVDLHNEQUFnQlQ7QUFBaEMsS0FFRSxxQkFBcUJVLElBQXJCLENBQTBCRixLQUFLLENBQUNSLFVBQU4sQ0FBaUJXLEdBQWpCLENBQXFCQyxXQUFyQixFQUExQixpQkFDQztBQUNDLFNBQUssRUFBRUosS0FBSyxDQUFDUixVQUFOLENBQWlCQyxLQUFqQixJQUEwQixJQURsQztBQUVDLFVBQU0sRUFBRU8sS0FBSyxDQUFDUixVQUFOLENBQWlCRSxNQUFqQixJQUEyQixJQUZwQztBQUdDLE9BQUcsRUFBRU0sS0FBSyxDQUFDUixVQUFOLENBQWlCVyxHQUh2QjtBQUlDLGFBQVMsRUFBRUYsK0RBSlo7QUFLQyxTQUFLLEVBQUVWLG1CQUFtQixDQUFDUyxLQUFLLENBQUNSLFVBQVA7QUFMM0IsSUFERCxnQkFRQztBQUFLLGFBQVMsRUFBRVMsOERBQUs7QUFBckIsa0JBQ0M7QUFBRyxRQUFJLEVBQUVELEtBQUssQ0FBQ1IsVUFBTixDQUFpQlc7QUFBMUIsS0FBZ0NILEtBQUssQ0FBQ1IsVUFBTixDQUFpQmEsSUFBakQsQ0FERCxlQUVDO0FBQU0sYUFBUyxFQUFFSiw4REFBSztBQUF0QixLQUE0Q0QsS0FBSyxDQUFDUixVQUFOLENBQWlCYyxJQUE3RCxXQUZELENBVkgsQ0FERDtBQW1CQSxDQXBCRDs7QUFzQkEsaUVBQWVQLFVBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL0F0dGFjaG1lbnQvQXR0YWNobWVudC5qc3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5cbmNvbnN0IE1BWF9JTUFHRV9TSVpFID0gNTAwO1xuXG4vLyBgd2lkdGg6IGF1dG87IGhlaWdodDogYXV0b2Agb3ZlcnJpZGVzIHVubG9hZGVkIGltYWdlcycgXCJpbnRyaW5zaWMgc2l6ZVwiLCBjYXVzaW5nIHRoZSBzY3JvbGwgdG8ganVtcCB3aGVuIHRoZXkgbG9hZCxcbi8vIHNvIHVzZSB0aGlzIEpTIHRvIHN0eWxlIHRoZW0gaW5zdGVhZFxuY29uc3Qgc2l6ZUltYWdlQXR0YWNobWVudCA9IGF0dGFjaG1lbnQgPT4ge1xuXHRpZiAoIWF0dGFjaG1lbnQud2lkdGggfHwgIWF0dGFjaG1lbnQuaGVpZ2h0KSB7XG5cdFx0Ly8gZmFsbCBiYWNrIHRvIENTUyBmb3IgZHluYW1pY2FsbHktc2l6ZWQgaW1hZ2VzXG5cdFx0cmV0dXJuIGBtYXgtd2lkdGg6ICR7TUFYX0lNQUdFX1NJWkV9cHg7IG1heC1oZWlnaHQ6ICR7TUFYX0lNQUdFX1NJWkV9cHg7IHdpZHRoOiBhdXRvOyBoZWlnaHQ6IGF1dG87YDtcblx0fVxuXG5cdGNvbnN0IGxhcmdlc3REaW1lbnNpb24gPSBNYXRoLm1heChhdHRhY2htZW50LndpZHRoLCBhdHRhY2htZW50LmhlaWdodCk7XG5cdGlmIChsYXJnZXN0RGltZW5zaW9uIDw9IE1BWF9JTUFHRV9TSVpFKSByZXR1cm4gJyc7XG5cdGNvbnN0IHNjYWxlRmFjdG9yID0gTUFYX0lNQUdFX1NJWkUgLyBsYXJnZXN0RGltZW5zaW9uO1xuXG5cdHJldHVybiBgd2lkdGg6ICR7YXR0YWNobWVudC53aWR0aCAqIHNjYWxlRmFjdG9yfXB4OyBoZWlnaHQ6ICR7YXR0YWNobWVudC5oZWlnaHQgKiBzY2FsZUZhY3Rvcn1weDtgO1xufTtcblxuY29uc3QgQXR0YWNobWVudCA9IHByb3BzID0+IHtcblx0cmV0dXJuIChcblx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGUuYXR0YWNobWVudH0+XG5cdFx0XHR7XG5cdFx0XHRcdC9cXC4oanBlP2d8cG5nfGdpZikkLy50ZXN0KHByb3BzLmF0dGFjaG1lbnQudXJsLnRvTG93ZXJDYXNlKCkpID9cblx0XHRcdFx0XHQ8aW1nXG5cdFx0XHRcdFx0XHR3aWR0aD17cHJvcHMuYXR0YWNobWVudC53aWR0aCB8fCBudWxsfVxuXHRcdFx0XHRcdFx0aGVpZ2h0PXtwcm9wcy5hdHRhY2htZW50LmhlaWdodCB8fCBudWxsfVxuXHRcdFx0XHRcdFx0c3JjPXtwcm9wcy5hdHRhY2htZW50LnVybH1cblx0XHRcdFx0XHRcdGNsYXNzTmFtZT17c3R5bGVbJ2F0dGFjaG1lbnQtaW1hZ2UnXX1cblx0XHRcdFx0XHRcdHN0eWxlPXtzaXplSW1hZ2VBdHRhY2htZW50KHByb3BzLmF0dGFjaG1lbnQpfVxuXHRcdFx0XHRcdC8+IDpcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ2F0dGFjaG1lbnQtZmlsZSddfT5cblx0XHRcdFx0XHRcdDxhIGhyZWY9e3Byb3BzLmF0dGFjaG1lbnQudXJsfT57cHJvcHMuYXR0YWNobWVudC5uYW1lfTwvYT5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17c3R5bGVbJ2F0dGFjaG1lbnQtc2l6ZSddfT57cHJvcHMuYXR0YWNobWVudC5zaXplfSBieXRlczwvc3Bhbj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdH1cblxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXR0YWNobWVudDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Attachment/Attachment.jsx\n");

/***/ }),

/***/ "./components/Avatar/Avatar.jsx":
/*!**************************************!*\
  !*** ./components/Avatar/Avatar.jsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./components/Avatar/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n\n\n // Keep track of which avatars already failed to load so we don't make a new request to Discord every time they appear.\n// This differs on a per-archive basis (some archives store avatars, some don't, and some store out-of-date avatars),\n// so store a WeakMap mapping archives to their avatar registries.\n\nconst metaAvatarRegistry = new WeakMap(); // Generate an SVG image for a pseudorandomly-colored default avatar.\n\nconst defaultAvatar = name => {\n  let color = 0;\n\n  for (let i = 0; i < name.length; i++) {\n    color = color + (name.charCodeAt(i) << i) & 0xffffffff;\n  }\n\n  for (let i = 0; i < 4; i++) {\n    color ^= color << 13;\n    color ^= color >> 17;\n    color ^= color << 5;\n  }\n\n  color &= 0xffffff;\n  const luma = 0.2 * ((color & 0xff0000) >> 16) + 0.7 * ((color & 0x00ff00) >> 8) + 0.1 * (color & 0x0000ff);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"128\" height=\"128\">\n\t\t\t<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"#${('000000' + color.toString(16)).slice(-6)}\" />\n\t\t\t<text font-family=\"sans-serif\" x=\"50%\" y=\"50%\" fill=\"${luma > 127 ? 'black' : 'white'}\" text-anchor=\"middle\" dominant-baseline=\"central\" font-size=\"48px\">${'&#' + name.codePointAt(0) + ';'}</text>\n\t\t</svg>\n\t`;\n};\n\nclass Avatar extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      handledError: false\n    };\n    this.getUserID = this.getUserID.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.getAvatarURL = this.getAvatarURL.bind(this);\n    this.getDefaultAvatar = this.getDefaultAvatar.bind(this);\n    this.getAvatarRegistry = this.getAvatarRegistry.bind(this);\n  }\n\n  getUserID() {\n    return this.props.userID || this.props.user.id;\n  }\n\n  getAvatarURL(size) {\n    if (this.props.archive.avatars.has(this.getUserID())) {\n      return this.props.archive.avatars.get(this.getUserID());\n    }\n\n    return this.props.user.avatarURL.replace(/\\?size=\\d+/, '') + `?size=${size}`;\n  }\n\n  getDefaultAvatar() {\n    const svg = defaultAvatar(this.props.user ? this.props.user.tag : this.props.userID ? this.props.userID : '✖');\n    return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;\n  }\n\n  getAvatarRegistry() {\n    if (metaAvatarRegistry.has(this.props.archive)) {\n      return metaAvatarRegistry.get(this.props.archive);\n    }\n\n    const registry = new Map();\n    metaAvatarRegistry.set(this.props.archive, registry);\n    return registry;\n  }\n\n  handleError(e) {\n    this.getAvatarRegistry().set(this.getUserID(), false);\n    e.target.src = this.getDefaultAvatar();\n    this.setState({\n      handledError: true\n    });\n  }\n\n  render() {\n    const {\n      props\n    } = this;\n    const registry = this.getAvatarRegistry();\n    const hasAvatar = !!(props.user && props.user.avatarURL);\n    const avatarURL = hasAvatar && this.getAvatarURL(props.size);\n    const loadResultKnown = hasAvatar && registry.has(this.getUserID());\n    const knownUnsuccessful = hasAvatar && loadResultKnown && !registry.get(this.getUserID());\n    return /*#__PURE__*/React.createElement(\"img\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.avatar,\n      src: hasAvatar && !knownUnsuccessful ? avatarURL : this.getDefaultAvatar(),\n      onError: this.state.handledError ? null : this.handleError,\n      width: props.size,\n      height: props.size,\n      style: `width: ${props.size}; height: ${props.size}`\n    });\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('archive')(Avatar));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0F2YXRhci9BdmF0YXIuanN4P2M4NzUiXSwibmFtZXMiOlsibWV0YUF2YXRhclJlZ2lzdHJ5IiwiV2Vha01hcCIsImRlZmF1bHRBdmF0YXIiLCJuYW1lIiwiY29sb3IiLCJpIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsImx1bWEiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29kZVBvaW50QXQiLCJBdmF0YXIiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJoYW5kbGVkRXJyb3IiLCJnZXRVc2VySUQiLCJiaW5kIiwiaGFuZGxlRXJyb3IiLCJnZXRBdmF0YXJVUkwiLCJnZXREZWZhdWx0QXZhdGFyIiwiZ2V0QXZhdGFyUmVnaXN0cnkiLCJ1c2VySUQiLCJ1c2VyIiwiaWQiLCJzaXplIiwiYXJjaGl2ZSIsImF2YXRhcnMiLCJoYXMiLCJnZXQiLCJhdmF0YXJVUkwiLCJyZXBsYWNlIiwic3ZnIiwidGFnIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVnaXN0cnkiLCJNYXAiLCJzZXQiLCJlIiwidGFyZ2V0Iiwic3JjIiwic2V0U3RhdGUiLCJyZW5kZXIiLCJoYXNBdmF0YXIiLCJsb2FkUmVzdWx0S25vd24iLCJrbm93blVuc3VjY2Vzc2Z1bCIsInN0eWxlIiwiY29ubmVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBRUE7Q0FHQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUEsa0JBQWtCLEdBQUcsSUFBSUMsT0FBSixFQUEzQixDLENBRUE7O0FBQ0EsTUFBTUMsYUFBYSxHQUFHQyxJQUFJLElBQUk7QUFDN0IsTUFBSUMsS0FBSyxHQUFHLENBQVo7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixJQUFJLENBQUNHLE1BQXpCLEVBQWlDRCxDQUFDLEVBQWxDLEVBQXNDO0FBQ3JDRCxTQUFLLEdBQUlBLEtBQUssSUFBSUQsSUFBSSxDQUFDSSxVQUFMLENB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QztBQUNDLGVBQVMsRUFBRThCLHVEQURaO0FBRUMsU0FBRyxFQUFFSCxTQUFTLElBQUksQ0FBQ0UsaUJBQWQsR0FBa0NmLFNBQWxDLEdBQThDLEtBQUtWLGdCQUFMLEVBRnBEO0FBR0MsYUFBTyxFQUFFLEtBQUtOLEtBQUwsQ0FBV0MsWUFBWCxHQUEwQixJQUExQixHQUFpQyxLQUFLRyxXQUhoRDtBQUlDLFdBQUssRUFBRUwsS0FBSyxDQUFDWSxJQUpkO0FBS0MsWUFBTSxFQUFFWixLQUFLLENBQUNZLElBTGY7QUFNQyxXQUFLLEVBQUcsVUFBU1osS0FBSyxDQUFDWSxJQUFLLGFBQVlaLEtBQUssQ0FBQ1ksSUFBSztBQU5wRCxNQUREO0FBVUE7O0FBckU2Qjs7QUF3RS9CLGlFQUFlc0Isd0RBQU8sQ0FBQyxTQUFELENBQVAsQ0FBbUJyQyxNQUFuQixDQUFmIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9BdmF0YXIvQXZhdGFyLmpzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlLnNjc3MnO1xuXG5pbXBvcnQge0NvbXBvbmVudH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAndW5pc3RvcmUvcHJlYWN0JztcblxuLy8gS2VlcCB0cmFjayBvZiB3aGljaCBhdmF0YXJzIGFscmVhZHkgZmFpbGVkIHRvIGxvYWQgc28gd2UgZG9uJ3QgbWFrZSBhIG5ldyByZXF1ZXN0IHRvIERpc2NvcmQgZXZlcnkgdGltZSB0aGV5IGFwcGVhci5cbi8vIFRoaXMgZGlmZmVycyBvbiBhIHBlci1hcmNoaXZlIGJhc2lzIChzb21lIGFyY2hpdmVzIHN0b3JlIGF2YXRhcnMsIHNvbWUgZG9uJ3QsIGFuZCBzb21lIHN0b3JlIG91dC1vZi1kYXRlIGF2YXRhcnMpLFxuLy8gc28gc3RvcmUgYSBXZWFrTWFwIG1hcHBpbmcgYXJjaGl2ZXMgdG8gdGhlaXIgYXZhdGFyIHJlZ2lzdHJpZXMuXG5jb25zdCBtZXRhQXZhdGFyUmVnaXN0cnkgPSBuZXcgV2Vha01hcCgpO1xuXG4vLyBHZW5lcmF0ZSBhbiBTVkcgaW1hZ2UgZm9yIGEgcHNldWRvcmFuZG9tbHktY29sb3JlZCBkZWZhdWx0IGF2YXRhci5cbmNvbnN0IGRlZmF1bHRBdmF0YXIgPSBuYW1lID0+IHtcblx0bGV0IGNvbG9yID0gMDtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29sb3IgPSAoY29sb3IgKyAobmFtZS5jaGFyQ29kZUF0KGkpIDw8IGkpKSAmIDB4ZmZmZmZmZmY7XG5cdH1cblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHRcdGNvbG9yIF49IGNvbG9yIDw8IDEzO1xuXHRcdGNvbG9yIF49IGNvbG9yID4+IDE3O1xuXHRcdGNvbG9yIF49IGNvbG9yIDw8IDU7XG5cdH1cblxuXHRjb2xvciAmPSAweGZmZmZmZjtcblxuXHRjb25zdCBsdW1hID0gKDAuMiAqICgoY29sb3IgJiAweGZmMDAwMCkgPj4gMTYpKSArICgwLjcgKiAoKGNvbG9yICYgMHgwMGZmMDApID4+IDgpKSArICgwLjEgKiAoY29sb3IgJiAweDAwMDBmZikpO1xuXG5cdHJldHVybiBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIiBzdGFuZGFsb25lPVwibm9cIj8+XG5cdFx0PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMjhcIiBoZWlnaHQ9XCIxMjhcIj5cblx0XHRcdDxyZWN0IHg9XCIwXCIgeT1cIjBcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cIiMkeygnMDAwMDAwJyArIGNvbG9yLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTYpfVwiIC8+XG5cdFx0XHQ8dGV4dCBmb250LWZhbWlseT1cInNhbnMtc2VyaWZcIiB4PVwiNTAlXCIgeT1cIjUwJVwiIGZpbGw9XCIke2x1bWEgPiAxMjcgPyAnYmxhY2snIDogJ3doaXRlJ31cIiB0ZXh0LWFuY2hvcj1cIm1pZGRsZVwiIGRvbWluYW50LWJhc2VsaW5lPVwiY2VudHJhbFwiIGZvbnQtc2l6ZT1cIjQ4cHhcIj4keycmIycgKyBuYW1lLmNvZGVQb2ludEF0KDApICsgICc7J308L3RleHQ+XG5cdFx0PC9zdmc+XG5cdGA7XG59O1xuXG5jbGFzcyBBdmF0YXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3RvciAocHJvcHMpIHtcblx0XHRzdXBlcihwcm9wcyk7XG5cblx0XHR0aGlzLnN0YXRlID0ge1xuXHRcdFx0aGFuZGxlZEVycm9yOiBmYWxzZVxuXHRcdH07XG5cblx0XHR0aGlzLmdldFVzZXJJRCA9IHRoaXMuZ2V0VXNlcklELmJpbmQodGhpcyk7XG5cdFx0dGhpcy5oYW5kbGVFcnJvciA9IHRoaXMuaGFuZGxlRXJyb3IuYmluZCh0aGlzKTtcblx0XHR0aGlzLmdldEF2YXRhclVSTCA9IHRoaXMuZ2V0QXZhdGFyVVJMLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5nZXREZWZhdWx0QXZhdGFyID0gdGhpcy5nZXREZWZhdWx0QXZhdGFyLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5nZXRBdmF0YXJSZWdpc3RyeSA9IHRoaXMuZ2V0QXZhdGFyUmVnaXN0cnkuYmluZCh0aGlzKTtcblx0fVxuXG5cdGdldFVzZXJJRCAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJvcHMudXNlcklEIHx8IHRoaXMucHJvcHMudXNlci5pZDtcblx0fVxuXG5cdGdldEF2YXRhclVSTCAoc2l6ZSkge1xuXHRcdGlmICh0aGlzLnByb3BzLmFyY2hpdmUuYXZhdGFycy5oYXModGhpcy5nZXRVc2VySUQoKSkpIHtcblx0XHRcdHJldHVybiB0aGlzLnByb3BzLmFyY2hpdmUuYXZhdGFycy5nZXQodGhpcy5nZXRVc2VySUQoKSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnByb3BzLnVzZXIuYXZhdGFyVVJMLnJlcGxhY2UoL1xcP3NpemU9XFxkKy8sICcnKSArIGA/c2l6ZT0ke3NpemV9YDtcblx0fVxuXG5cdGdldERlZmF1bHRBdmF0YXIgKCkge1xuXHRcdGNvbnN0IHN2ZyA9ICBkZWZhdWx0QXZhdGFyKFxuXHRcdFx0dGhpcy5wcm9wcy51c2VyID8gdGhpcy5wcm9wcy51c2VyLnRhZyA6XG5cdFx0XHRcdHRoaXMucHJvcHMudXNlcklEID8gdGhpcy5wcm9wcy51c2VySUQgOlxuXHRcdFx0XHRcdCfinJYnKTtcblx0XHRyZXR1cm4gYGRhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LCR7ZW5jb2RlVVJJQ29tcG9uZW50KHN2Zyl9YDtcblx0fVxuXG5cdGdldEF2YXRhclJlZ2lzdHJ5ICgpIHtcblx0XHRpZiAobWV0YUF2YXRhclJlZ2lzdHJ5Lmhhcyh0aGlzLnByb3BzLmFyY2hpdmUpKSB7XG5cdFx0XHRyZXR1cm4gbWV0YUF2YXRhclJlZ2lzdHJ5LmdldCh0aGlzLnByb3BzLmFyY2hpdmUpO1xuXHRcdH1cblx0XHRjb25zdCByZWdpc3RyeSA9IG5ldyBNYXAoKTtcblx0XHRtZXRhQXZhdGFyUmVnaXN0cnkuc2V0KHRoaXMucHJvcHMuYXJjaGl2ZSwgcmVnaXN0cnkpO1xuXHRcdHJldHVybiByZWdpc3RyeTtcblx0fVxuXG5cdGhhbmRsZUVycm9yIChlKSB7XG5cdFx0dGhpcy5nZXRBdmF0YXJSZWdpc3RyeSgpLnNldCh0aGlzLmdldFVzZXJJRCgpLCBmYWxzZSk7XG5cdFx0ZS50YXJnZXQuc3JjID0gdGhpcy5nZXREZWZhdWx0QXZhdGFyKCk7XG5cblx0XHR0aGlzLnNldFN0YXRlKHtoYW5kbGVkRXJyb3I6IHRydWV9KTtcblx0fVxuXG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3Qge3Byb3BzfSA9IHRoaXM7XG5cdFx0Y29uc3QgcmVnaXN0cnkgPSB0aGlzLmdldEF2YXRhclJlZ2lzdHJ5KCk7XG5cblx0XHRjb25zdCBoYXNBdmF0YXIgPSAhIShwcm9wcy51c2VyICYmIHByb3BzLnVzZXIuYXZhdGFyVVJMKTtcblx0XHRjb25zdCBhdmF0YXJVUkwgPSBoYXNBdmF0YXIgJiYgdGhpcy5nZXRBdmF0YXJVUkwocHJvcHMuc2l6ZSk7XG5cdFx0Y29uc3QgbG9hZFJlc3VsdEtub3duID0gaGFzQXZhdGFyICYmIHJlZ2lzdHJ5Lmhhcyh0aGlzLmdldFVzZXJJRCgpKTtcblx0XHRjb25zdCBrbm93blVuc3VjY2Vzc2Z1bCA9IGhhc0F2YXRhciAmJiBsb2FkUmVzdWx0S25vd24gJiYgIXJlZ2lzdHJ5LmdldCh0aGlzLmdldFVzZXJJRCgpKTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8aW1nXG5cdFx0XHRcdGNsYXNzTmFtZT17c3R5bGVbJ2F2YXRhciddfVxuXHRcdFx0XHRzcmM9e2hhc0F2YXRhciAmJiAha25vd25VbnN1Y2Nlc3NmdWwgPyBhdmF0YXJVUkwgOiB0aGlzLmdldERlZmF1bHRBdmF0YXIoKX1cblx0XHRcdFx0b25FcnJvcj17dGhpcy5zdGF0ZS5oYW5kbGVkRXJyb3IgPyBudWxsIDogdGhpcy5oYW5kbGVFcnJvcn1cblx0XHRcdFx0d2lkdGg9e3Byb3BzLnNpemV9XG5cdFx0XHRcdGhlaWdodD17cHJvcHMuc2l6ZX1cblx0XHRcdFx0c3R5bGU9e2B3aWR0aDogJHtwcm9wcy5zaXplfTsgaGVpZ2h0OiAke3Byb3BzLnNpemV9YH1cblx0XHRcdC8+XG5cdFx0KTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KCdhcmNoaXZlJykoQXZhdGFyKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Avatar/Avatar.jsx\n");

/***/ }),

/***/ "./components/ChannelList/ChannelList.jsx":
/*!************************************************!*\
  !*** ./components/ChannelList/ChannelList.jsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/ChannelList/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _actions_set_current_channel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../actions/set-current-channel */ \"./actions/set-current-channel.js\");\n/* harmony import */ var _util_class_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/class-names */ \"./util/class-names.js\");\n\n\n\n\n // Un-flatten a channel hierarchy.\n\nfunction crawlHierarchy(parent, parentID, channels) {\n  for (const channel of channels.values()) {\n    if (channel.parentID === parentID) {\n      parent.push({\n        channel: channel,\n        childChannels: crawlHierarchy([], channel.id, channels)\n      });\n    }\n  }\n\n  parent.sort((a, b) => {\n    let chanAPosition = a.channel.position;\n    let chanBPosition = b.channel.position; // for some odd reason, categories and channels positioned above the first category\n    // both have position index of 0. offset category indices by 1 to compensate.\n\n    if (a.channel.type === 'category') chanAPosition++;\n    if (b.channel.type === 'category') chanBPosition++;\n    return chanAPosition - chanBPosition;\n  });\n  return parent;\n}\n\nclass _ChannelItem extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsed: false\n    };\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.selectChannel = this.selectChannel.bind(this);\n  }\n\n  toggleCollapse() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  selectChannel() {\n    if (this.props.channel.channel.type !== 'text') return;\n    this.props.setCurrentChannel(this.props.channel.channel.id);\n  }\n\n  render() {\n    const channel = this.props.channel;\n    return /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"div\", {\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_4__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.channel]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"text-channel\"]]: channel.channel.type === 'text',\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"voice-channel\"]]: channel.channel.type === 'voice',\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"category-channel\"]]: channel.channel.type === 'category',\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.selected]: channel.channel.id === this.props.currentChannel,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.collapsed]: this.state.collapsed\n      }),\n      onClick: channel.channel.type === 'category' ? this.toggleCollapse : this.selectChannel\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"channel-icon\"]\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"channel-name\"]\n    }, channel.channel.name)), channel.childChannels.length > 0 ? /*#__PURE__*/React.createElement(ChannelSublist, {\n      childChannels: channel.childChannels,\n      collapsed: this.state.collapsed\n    }) : null);\n  }\n\n}\n\nconst ChannelItem = (0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)(['currentChannel'], {\n  setCurrentChannel: _actions_set_current_channel__WEBPACK_IMPORTED_MODULE_3__.default\n})(_ChannelItem);\n\nconst ChannelSublist = props => /*#__PURE__*/React.createElement(\"ul\", {\n  className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_4__.default)({\n    [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"channel-list\"]]: true,\n    [_style__WEBPACK_IMPORTED_MODULE_0__.default.collapsed]: props.collapsed\n  })\n}, props.childChannels.map(channel => /*#__PURE__*/React.createElement(ChannelItem, {\n  key: channel.channel.id,\n  channel: channel\n})));\n\nconst ChannelList = props => {\n  if (props.channels === null) return null;\n  return /*#__PURE__*/React.createElement(ChannelSublist, {\n    childChannels: crawlHierarchy([], null, props.channels)\n  });\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChannelList);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/ChannelList/ChannelList.jsx\n");

/***/ }),

/***/ "./components/ChannelView/ChannelView.jsx":
/*!************************************************!*\
  !*** ./components/ChannelView/ChannelView.jsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChannelView)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/ChannelView/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var _Header_Header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Header/Header */ \"./components/Header/Header.jsx\");\n/* harmony import */ var _MessageView_MessageView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../MessageView/MessageView */ \"./components/MessageView/MessageView.jsx\");\n\n\n\n\nclass ChannelView extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  render() {\n    const channel = this.props.channel;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"channel-view\"]\n    }, /*#__PURE__*/React.createElement(_Header_Header__WEBPACK_IMPORTED_MODULE_2__.default, {\n      channel: channel\n    }), channel ? /*#__PURE__*/React.createElement(_MessageView_MessageView__WEBPACK_IMPORTED_MODULE_3__.default, {\n      key: channel.id,\n      messages: channel.messages\n    }) : null);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0NoYW5uZWxWaWV3L0NoYW5uZWxWaWV3LmpzeD8wOGI1Il0sIm5hbWVzIjpbIkNoYW5uZWxWaWV3IiwiQ29tcG9uZW50IiwicmVuZGVyIiwiY2hhbm5lbCIsInByb3BzIiwic3R5bGUiLCJpZCIsIm1lc3NhZ2VzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBRUE7QUFFQTtBQUNBO0FBRWUsTUFBTUEsV0FBTixTQUEwQkMsNkNBQTFCLENBQW9DO0FBQ2xEQyxRQUFNLEdBQUk7QUFDVCxVQUFNQyxPQUFPLEdBQUcsS0FBS0MsS0FBTCxDQUFXRCxPQUEzQjtBQUNBLHdCQUNDO0FBQUssZUFBUyxFQUFFRSwyREFBSztBQUFyQixvQkFDQyxvQkFBQyxtREFBRDtBQUFRLGFBQU8sRUFBRUY7QUFBakIsTUFERCxFQUdFQSxPQUFPLGdCQUNOLG9CQUFDLDZEQUFEO0FBQWEsU0FBRyxFQUFFQSxPQUFPLENBQUNHLEVBQTFCO0FBQThCLGNBQVEsRUFBRUgsT0FBTyxDQUFDSTtBQUFoRCxNQURNLEdBRU4sSUFMSCxDQUREO0FBVUE7O0FBYmlEIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9DaGFubmVsVmlldy9DaGFubmVsVmlldy5qc3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5cbmltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdwcmVhY3QnO1xuXG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uL0hlYWRlci9IZWFkZXInO1xuaW1wb3J0IE1lc3NhZ2VWaWV3IGZyb20gJy4uL01lc3NhZ2VWaWV3L01lc3NhZ2VWaWV3JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhbm5lbFZpZXcgZXh0ZW5kcyBDb21wb25lbnQge1xuXHRyZW5kZXIgKCkge1xuXHRcdGNvbnN0IGNoYW5uZWwgPSB0aGlzLnByb3BzLmNoYW5uZWw7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZVsnY2hhbm5lbC12aWV3J119PlxuXHRcdFx0XHQ8SGVhZGVyIGNoYW5uZWw9e2NoYW5uZWx9IC8+XG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjaGFubmVsID9cblx0XHRcdFx0XHRcdDxNZXNzYWdlVmlldyBrZXk9e2NoYW5uZWwuaWR9IG1lc3NhZ2VzPXtjaGFubmVsLm1lc3NhZ2VzfSAvPiA6XG5cdFx0XHRcdFx0XHRudWxsXG5cdFx0XHRcdH1cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/ChannelView/ChannelView.jsx\n");

/***/ }),

/***/ "./components/Emoji/Emoji.jsx":
/*!************************************!*\
  !*** ./components/Emoji/Emoji.jsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TooltipEmoji\": () => (/* binding */ TooltipEmoji),\n/* harmony export */   \"ReactionEmoji\": () => (/* binding */ ReactionEmoji)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/Emoji/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var twemoji_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! twemoji-parser */ \"../node_modules/twemoji-parser/dist/index.js\");\n/* harmony import */ var _Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Tooltip/Tooltip */ \"./components/Tooltip/Tooltip.jsx\");\n/* harmony import */ var _util_get_emoji_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/get-emoji-name */ \"./util/get-emoji-name.js\");\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\n\n\n // Copied in from twemoji-parser because they don't export it\n\nconst vs16RegExp = /\\uFE0F/g; // avoid using a string literal like '\\u200D' here because minifiers expand it inline\n\nconst zeroWidthJoiner = String.fromCharCode(0x200d);\n\nconst removeVS16s = rawEmoji => {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n};\n\nconst useEmoji = Component => {\n  return (0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('archive')(props => {\n    const {\n      emoji,\n      archive,\n      ...rest\n    } = props;\n    let emojiName;\n    let emojiURL;\n\n    if (typeof emoji === 'string') {\n      emojiName = (0,_util_get_emoji_name__WEBPACK_IMPORTED_MODULE_5__.default)(emoji); // TODO: self-host twemoji\n\n      const codepoints = (0,twemoji_parser__WEBPACK_IMPORTED_MODULE_3__.toCodePoints)(removeVS16s(emoji)).join('-');\n      emojiURL = `https://twemoji.maxcdn.com/v/latest/svg/${codepoints}.svg`;\n    } else {\n      emojiURL = archive.emojiURLs.has(emoji.id) ? archive.emojiURLs.get(emoji.id) : `https://cdn.discordapp.com/emojis/${emoji.id}`;\n      emojiName = archive.emojis.has(emoji.id) ? archive.emojis.get(emoji.id).name : emoji.name;\n    }\n\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      emojiName: emojiName,\n      emojiURL: emojiURL\n    }, rest));\n  });\n};\n\nconst ReactionEmoji = useEmoji(({\n  emojiName,\n  emojiURL\n}) => /*#__PURE__*/React.createElement(\"img\", {\n  draggable: false,\n  className: `${_style__WEBPACK_IMPORTED_MODULE_0__.default.emoji} ${_style__WEBPACK_IMPORTED_MODULE_0__.default[\"reaction-emoji\"]}`,\n  src: emojiURL,\n  alt: `:${emojiName}:`\n}));\n\nclass _TooltipEmoji extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hover: false\n    };\n    this.onPointerEnter = this.onPointerEnter.bind(this);\n    this.onPointerOut = this.onPointerOut.bind(this);\n  }\n\n  onPointerEnter() {\n    this.setState({\n      hover: true\n    });\n  }\n\n  onPointerOut() {\n    this.setState({\n      hover: false\n    });\n  }\n\n  render() {\n    const {\n      emojiURL,\n      emojiName\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"emoji-container\"],\n      onPointerEnter: this.onPointerEnter,\n      onPointerOut: this.onPointerOut\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      draggable: false,\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.emoji,\n      src: emojiURL,\n      alt: `:${emojiName}:`\n    }), this.state.hover ? /*#__PURE__*/React.createElement(_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_4__.default, {\n      side: \"top\"\n    }, emojiName) : null);\n  }\n\n}\n\nconst TooltipEmoji = useEmoji(_TooltipEmoji);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0Vtb2ppL0Vtb2ppLmpzeD8zZjVhIl0sIm5hbWVzIjpbInZzMTZSZWdFeHAiLCJ6ZXJvV2lkdGhKb2luZXIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyZW1vdmVWUzE2cyIsInJhd0Vtb2ppIiwiaW5kZXhPZiIsInJlcGxhY2UiLCJ1c2VFbW9qaSIsIkNvbXBvbmVudCIsImNvbm5lY3QiLCJwcm9wcyIsImVtb2ppIiwiYXJjaGl2ZSIsInJlc3QiLCJlbW9qaU5hbWUiLCJlbW9qaVVSTCIsImdldEVtb2ppTmFtZSIsImNvZGVwb2ludHMiLCJ0b0NvZGVQb2ludHMiLCJqb2luIiwiZW1vamlVUkxzIiwiaGFzIiwiaWQiLCJnZXQiLCJlbW9qaXMiLCJuYW1lIiwiUmVhY3Rpb25FbW9qaSIsInN0eWxlIiwiX1Rvb2x0aXBFbW9qaSIsImNvbnN0cnVjdG9yIiwic3RhdGUiLCJob3ZlciIsIm9uUG9pbnRlckVudGVyIiwiYmluZCIsIm9uUG9pbnRlck91dCIsInNldFN0YXRlIiwicmVuZGVyIiwiVG9vbHRpcEVtb2ppIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtDQUlBOztBQUNBLE1BQU1BLFVBQVUsR0FBRyxTQUFuQixDLENBQ0E7O0FBQ0EsTUFBTUMsZUFBZSxHQUFHQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0IsTUFBcEIsQ0FBeEI7O0FBRUEsTUFBTUMsV0FBVyxHQUFHQyxRQUFRLElBQUk7QUFDL0IsU0FBT0EsUUFBUSxDQUFDQyxPQUFULENBQWlCTCxlQUFqQixJQUFvQyxDQUFwQyxHQUF3Q0ksUUFBUSxDQUFDRSxPQUFULENBQWlCUCxVQUFqQixFQUE2QixFQUE3QixDQUF4QyxHQUEyRUssUUFBbEY7QUFDQSxDQUZEOztBQUlBLE1BQU1HLFFBQVEsR0FBR0MsU0FBUyxJQUFJO0FBQzdCLFNBQU9DLHdEQUFPLENBQUMsU0FBRCxDQUFQLENBQW1CQyxLQUFLLElB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R0FBRzlCLFFBQVEsQ0FBQ3FCLGFBQUQsQ0FBN0IiLCJmaWxlIjoiLi9jb21wb25lbnRzL0Vtb2ppL0Vtb2ppLmpzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcblxuaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3VuaXN0b3JlL3ByZWFjdCc7XG5pbXBvcnQge3RvQ29kZVBvaW50c30gZnJvbSAndHdlbW9qaS1wYXJzZXInO1xuXG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi9Ub29sdGlwL1Rvb2x0aXAnO1xuXG5pbXBvcnQgZ2V0RW1vamlOYW1lIGZyb20gJy4uLy4uL3V0aWwvZ2V0LWVtb2ppLW5hbWUnO1xuXG4vLyBDb3BpZWQgaW4gZnJvbSB0d2Vtb2ppLXBhcnNlciBiZWNhdXNlIHRoZXkgZG9uJ3QgZXhwb3J0IGl0XG5jb25zdCB2czE2UmVnRXhwID0gL1xcdUZFMEYvZztcbi8vIGF2b2lkIHVzaW5nIGEgc3RyaW5nIGxpdGVyYWwgbGlrZSAnXFx1MjAwRCcgaGVyZSBiZWNhdXNlIG1pbmlmaWVycyBleHBhbmQgaXQgaW5saW5lXG5jb25zdCB6ZXJvV2lkdGhKb2luZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MjAwZCk7XG5cbmNvbnN0IHJlbW92ZVZTMTZzID0gcmF3RW1vamkgPT4ge1xuXHRyZXR1cm4gcmF3RW1vamkuaW5kZXhPZih6ZXJvV2lkdGhKb2luZXIpIDwgMCA/IHJhd0Vtb2ppLnJlcGxhY2UodnMxNlJlZ0V4cCwgJycpIDogcmF3RW1vamk7XG59O1xuXG5jb25zdCB1c2VFbW9qaSA9IENvbXBvbmVudCA9PiB7XG5cdHJldHVybiBjb25uZWN0KCdhcmNoaXZlJykocHJvcHMgPT4ge1xuXHRcdGNvbnN0IHtlbW9qaSwgYXJjaGl2ZSwgLi4ucmVzdH0gPSBwcm9wcztcblx0XHRsZXQgZW1vamlOYW1lO1xuXHRcdGxldCBlbW9qaVVSTDtcblx0XHRpZiAodHlwZW9mIGVtb2ppID09PSAnc3RyaW5nJykge1xuXHRcdFx0ZW1vamlOYW1lID0gZ2V0RW1vamlOYW1lKGVtb2ppKTtcblx0XHRcdC8vIFRPRE86IHNlbGYtaG9zdCB0d2Vtb2ppXG5cdFx0XHRjb25zdCBjb2RlcG9pbnRzID0gdG9Db2RlUG9pbnRzKHJlbW92ZVZTMTZzKGVtb2ppKSkuam9pbignLScpO1xuXHRcdFx0ZW1vamlVUkwgPSBgaHR0cHM6Ly90d2Vtb2ppLm1heGNkbi5jb20vdi9sYXRlc3Qvc3ZnLyR7Y29kZXBvaW50c30uc3ZnYDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZW1vamlVUkwgPSBhcmNoaXZlLmVtb2ppVVJMcy5oYXMoZW1vamkuaWQpID9cblx0XHRcdFx0YXJjaGl2ZS5lbW9qaVVSTHMuZ2V0KGVtb2ppLmlkKSA6XG5cdFx0XHRcdGBodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9lbW9qaXMvJHtlbW9qaS5pZH1gO1xuXG5cdFx0XHRlbW9qaU5hbWUgPSBhcmNoaXZlLmVtb2ppcy5oYXMoZW1vamkuaWQpID9cblx0XHRcdFx0YXJjaGl2ZS5lbW9qaXMuZ2V0KGVtb2ppLmlkKS5uYW1lIDpcblx0XHRcdFx0ZW1vamkubmFtZTtcblx0XHR9XG5cdFx0cmV0dXJuIDxDb21wb25lbnQgZW1vamlOYW1lPXtlbW9qaU5hbWV9IGVtb2ppVVJMPXtlbW9qaVVSTH0gey4uLnJlc3R9IC8+O1xuXHR9KTtcbn07XG5cbmNvbnN0IFJlYWN0aW9uRW1vamkgPSB1c2VFbW9qaSgoe2Vtb2ppTmFtZSwgZW1vamlVUkx9KSA9PlxuXHQ8aW1nXG5cdFx0ZHJhZ2dhYmxlPXtmYWxzZX1cblx0XHRjbGFzc05hbWU9e2Ake3N0eWxlWydlbW9qaSddfSAke3N0eWxlWydyZWFjdGlvbi1lbW9qaSddfWB9XG5cdFx0c3JjPXtlbW9qaVVSTH1cblx0XHRhbHQ9e2A6JHtlbW9qaU5hbWV9OmB9XG5cdC8+KTtcblxuY2xhc3MgX1Rvb2x0aXBFbW9qaSBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yIChwcm9wcykge1xuXHRcdHN1cGVyKHByb3BzKTtcblxuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHRob3ZlcjogZmFsc2Vcblx0XHR9O1xuXG5cdFx0dGhpcy5vblBvaW50ZXJFbnRlciA9IHRoaXMub25Qb2ludGVyRW50ZXIuYmluZCh0aGlzKTtcblx0XHR0aGlzLm9uUG9pbnRlck91dCA9IHRoaXMub25Qb2ludGVyT3V0LmJpbmQodGhpcyk7XG5cdH1cblxuXHRvblBvaW50ZXJFbnRlciAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7aG92ZXI6IHRydWV9KTtcblx0fVxuXG5cdG9uUG9pbnRlck91dCAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7aG92ZXI6IGZhbHNlfSk7XG5cdH1cblxuXHRyZW5kZXIgKCkge1xuXHRcdGNvbnN0IHtlbW9qaVVSTCwgZW1vamlOYW1lfSA9IHRoaXMucHJvcHM7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxzcGFuXG5cdFx0XHRcdGNsYXNzTmFtZT17c3R5bGVbJ2Vtb2ppLWNvbnRhaW5lciddfVxuXHRcdFx0XHRvblBvaW50ZXJFbnRlcj17dGhpcy5vblBvaW50ZXJFbnRlcn1cblx0XHRcdFx0b25Qb2ludGVyT3V0PXt0aGlzLm9uUG9pbnRlck91dH1cblx0XHRcdD5cblx0XHRcdFx0PGltZyBkcmFnZ2FibGU9e2ZhbHNlfSBjbGFzc05hbWU9e3N0eWxlWydlbW9qaSddfSBzcmM9e2Vtb2ppVVJMfSBhbHQ9e2A6JHtlbW9qaU5hbWV9OmB9PjwvaW1nPlxuXHRcdFx0XHR7dGhpcy5zdGF0ZS5ob3ZlciA/IDxUb29sdGlwIHNpZGU9XCJ0b3BcIj57ZW1vamlOYW1lfTwvVG9vbHRpcD4gOiBudWxsfVxuXHRcdFx0PC9zcGFuPlxuXHRcdCk7XG5cdH1cbn1cblxuY29uc3QgVG9vbHRpcEVtb2ppID0gdXNlRW1vamkoX1Rvb2x0aXBFbW9qaSk7XG5cbmV4cG9ydCB7VG9vbHRpcEVtb2ppLCBSZWFjdGlvbkVtb2ppfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Emoji/Emoji.jsx\n");

/***/ }),

/***/ "./components/ErrorBoundary/ErrorBoundary.jsx":
/*!****************************************************!*\
  !*** ./components/ErrorBoundary/ErrorBoundary.jsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ErrorBoundaryHOC\": () => (/* binding */ ErrorBoundaryHOC),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./components/ErrorBoundary/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n\n\n\nclass ErrorBoundary extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null\n    };\n  }\n\n  componentDidCatch(error) {\n    this.setState({\n      hasError: true,\n      error\n    });\n  }\n\n  render() {\n    if (!this.state.hasError) return this.props.children;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"crash-wrapper\"]\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"crash-header\"]\n    }, \"Oopsie Woopsie UwU\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.error\n    }, this.state.error.message), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.stack\n    }, this.state.error.stack));\n  }\n\n}\n\nconst ErrorBoundaryHOC = WrappedComponent => props => /*#__PURE__*/React.createElement(ErrorBoundary, null, /*#__PURE__*/React.createElement(WrappedComponent, props));\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ErrorBoundary);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0Vycm9yQm91bmRhcnkvRXJyb3JCb3VuZGFyeS5qc3g/MDAxYSJdLCJuYW1lcyI6WyJFcnJvckJvdW5kYXJ5IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwiaGFzRXJyb3IiLCJlcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwic2V0U3RhdGUiLCJyZW5kZXIiLCJjaGlsZHJlbiIsInN0eWxlIiwibWVzc2FnZSIsInN0YWNrIiwiRXJyb3JCb3VuZGFyeUhPQyIsIldyYXBwZWRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBOztBQUVBLE1BQU1BLGFBQU4sU0FBNEJDLDZDQUE1QixDQUFzQztBQUNyQ0MsYUFBVyxDQUFFQyxLQUFGLEVBQVM7QUFDbkIsVUFBTUEsS0FBTjtBQUVBLFNBQUtDLEtBQUwsR0FBYTtBQUNaQyxjQUFRLEVBQUUsS0FERTtBQUVaQyxXQUFLLEVBQUU7QUFGSyxLQUFiO0FBSUE7O0FBRURDLG1CQUFpQixDQUFFRCxLQUFGLEVBQVM7QUFDekIsU0FBS0UsUUFBTCxDQUFjO0FBQ2JILGNBQVEsRUFBRSxJQURHO0FBRWJDO0FBRmEsS0FBZDtBQUlBOztBQUVERyxRQUFNLEdBQUk7QUFDVCxRQUFJLENBQUMsS0FBS0wsS0FBTCxDQUFXQyxRQUFoQixFQUEwQixPQUFPLEtBQUtGLEtBQUwsQ0FBV08sUUFBbEI7QUFHMUIsd0JBQ0M7QUFBSyxlQUFTLEVBQUVDLGlFQUFLO0FBQXJCLG9CQUNDO0FBQVEsZUFBUyxFQUFFQSxnRUFBSztBQUF4Qiw0QkFERCxlQUVDO0FBQUssZUFBUyxFQUFFQSxzREFBSztBQUFyQixPQUFpQyxLQUFLUCxLQUFMLENBQVdFLEtBQVgsQ0FBaUJNLE9BQWxELENBRkQsZUFHQztBQUFLLGVBQVMsRUFBRUQsc0RBQUs7QUFBckIsT0FBaUMsS0FBS1AsS0FBTCxDQUFXRSxLQUFYLENBQWlCTyxLQUFsRCxDQUhELENBREQ7QUFPQTs7QUE1Qm9DOztBQStCdEMsTUFBTUMsZ0JBQWdCLEdBQUdDLGdCQUFnQixJQUN4Q1osS0FBSyxpQkFDSixvQkFBQyxhQUFELHFCQUNDLG9CQUFDLGdCQUFELEVBQXNCQSxLQUF0QixDQURELENBRkY7O0FBUUE7QUFDQSxpRUFBZUgsYUFBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvRXJyb3JCb3VuZGFyeS9FcnJvckJvdW5kYXJ5LmpzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlLnNjc3MnO1xuXG5pbXBvcnQge0NvbXBvbmVudH0gZnJvbSAncHJlYWN0JztcblxuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yIChwcm9wcykge1xuXHRcdHN1cGVyKHByb3BzKTtcblxuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHRoYXNFcnJvcjogZmFsc2UsXG5cdFx0XHRlcnJvcjogbnVsbFxuXHRcdH07XG5cdH1cblxuXHRjb21wb25lbnREaWRDYXRjaCAoZXJyb3IpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGhhc0Vycm9yOiB0cnVlLFxuXHRcdFx0ZXJyb3Jcblx0XHR9KTtcblx0fVxuXG5cdHJlbmRlciAoKSB7XG5cdFx0aWYgKCF0aGlzLnN0YXRlLmhhc0Vycm9yKSByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZVsnY3Jhc2gtd3JhcHBlciddfT5cblx0XHRcdFx0PGhlYWRlciBjbGFzc05hbWU9e3N0eWxlWydjcmFzaC1oZWFkZXInXX0+T29wc2llIFdvb3BzaWUgVXdVPC9oZWFkZXI+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZVsnZXJyb3InXX0+e3RoaXMuc3RhdGUuZXJyb3IubWVzc2FnZX08L2Rpdj5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydzdGFjayddfT57dGhpcy5zdGF0ZS5lcnJvci5zdGFja308L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cbn1cblxuY29uc3QgRXJyb3JCb3VuZGFyeUhPQyA9IFdyYXBwZWRDb21wb25lbnQgPT4gKFxuXHRwcm9wcyA9PiAoXG5cdFx0PEVycm9yQm91bmRhcnk+XG5cdFx0XHQ8V3JhcHBlZENvbXBvbmVudCB7Li4ucHJvcHN9IC8+XG5cdFx0PC9FcnJvckJvdW5kYXJ5PlxuXHQpXG4pO1xuXG5leHBvcnQge0Vycm9yQm91bmRhcnlIT0N9O1xuZXhwb3J0IGRlZmF1bHQgRXJyb3JCb3VuZGFyeTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/ErrorBoundary/ErrorBoundary.jsx\n");

/***/ }),

/***/ "./components/Header/Header.jsx":
/*!**************************************!*\
  !*** ./components/Header/Header.jsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/Header/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _util_class_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/class-names */ \"./util/class-names.js\");\n/* harmony import */ var _actions_toggle_sidebar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../actions/toggle-sidebar */ \"./actions/toggle-sidebar.js\");\n/* harmony import */ var _JumpableMessage_JumpableMessage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../JumpableMessage/JumpableMessage */ \"./components/JumpableMessage/JumpableMessage.jsx\");\n\n\n\n\n\n\n\nclass Header extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPinnedMessages: false\n    };\n    this.toggleShowPinnedMessages = this.toggleShowPinnedMessages.bind(this);\n  }\n\n  toggleShowPinnedMessages() {\n    this.setState(prevState => ({\n      showPinnedMessages: !prevState.showPinnedMessages\n    }));\n  }\n\n  render() {\n    const {\n      channel\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.header\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"channel-info\"]\n    }, channel ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"channel-name\"]\n    }, channel.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"channel-topic\"]\n    }, channel.topic)) : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.buttons\n    }, channel && channel.pinnedMessages ? /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.toggleShowPinnedMessages,\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_3__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.button]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"icon-pinned-messages\"]]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.active]: this.state.showPinnedMessages\n      }),\n      title: \"Pinned messages\"\n    }) : null, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.props.toggleSidebar,\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_3__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.button]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"sidebar-open\"]]: !this.props.showSidebar,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"sidebar-close\"]]: this.props.showSidebar\n      }),\n      title: \"Toggle sidebar\"\n    })), this.state.showPinnedMessages ? /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"pinned-messages\"]\n    }, channel.pinnedMessages.map((message, i) => /*#__PURE__*/React.createElement(_JumpableMessage_JumpableMessage__WEBPACK_IMPORTED_MODULE_5__.default, {\n      key: channel.pinnedMessages[i].id,\n      message: channel.pinnedMessages[i],\n      channelID: channel.id\n    }))) : null);\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('showSidebar', {\n  toggleSidebar: _actions_toggle_sidebar__WEBPACK_IMPORTED_MODULE_4__.default\n})(Header));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIuanN4PzUwOGIiXSwibmFtZXMiOlsiSGVhZGVyIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwic2hvd1Bpbm5lZE1lc3NhZ2VzIiwidG9nZ2xlU2hvd1Bpbm5lZE1lc3NhZ2VzIiwiYmluZCIsInNldFN0YXRlIiwicHJldlN0YXRlIiwicmVuZGVyIiwiY2hhbm5lbCIsInN0eWxlIiwibmFtZSIsInRvcGljIiwicGlubmVkTWVzc2FnZXMiLCJjbGFzc05hbWVzIiwidG9nZ2xlU2lkZWJhciIsInNob3dTaWRlYmFyIiwibWFwIiwibWVzc2FnZSIsImkiLCJpZCIsImNvbm5lY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7O0FBRUEsTUFBTUEsTUFBTixTQUFxQkMsNkNBQXJCLENBQStCO0FBQzlCQyxhQUFXLENBQUVDLEtBQUYsRUFBUztBQUNuQixVQUFNQSxLQUFOO0FBRUEsU0FBS0MsS0FBTCxHQUFhO0FBQ1pDLHdCQUFrQixFQUFFO0FBRFIsS0FBYjtBQUlBLFNBQUtDLHdCQUFMLEdBQWdDLEtBQUtBLHdCQUFMLENBQThCQyxJQUE5QixDQUFtQyxJQUFuQyxDQUFoQztBQUNBOztBQUVERCwwQkFBd0IsR0FBSTtBQUMzQixTQUFLRSxRQUFMLENBQWNDLFNBQVMsS0FBSztBQUMzQkosd0JBQWtCLEVBQUUsQ0FBQ0ksU0FBUyxDQUFDSjtBQURKLEtBQUwsQ0FBdkI7QUFHQTs7QUFFREssUUFBTSxHQUFJO0FBQ1QsVUFBTTtBQUFDQztBQUFELFFBQVksS0FBS1IsS0FBdkI7QUFDQSx3QkFDQztBQUFLLGVBQVMsRUFBRVMsa0RBQUs7QUFBckIsb0JBQ0M7QUFBSyxlQUFTLEVBQUVBLDJEQUFLO0FBQXJCLE9BQ0VELE9BQU8sZ0JBQUcsdURBQ1Y7QUFBSyxlQUFTLEVBQUVDLDJEQUFLO0FBQXJCLE9BQXdDRCxPQUFPLENBQUNFLElBQWhELENBRFUsZUFFVjtBQUFLLGVBQVMsRUFBRUQsNERBQUs7QUFBckIsT0FBeUNELE9BQU8sQ0FBQ0csS0FBakQsQ0FGVSxDQUFILEdBR0YsSUFKUCxDQURELGVBT0M7QUFBSyxlQUFTLEVBQUVGLG1EQUFLO0FBQXJCLE9BQ0VELE9BQU8sSUFBSUEsT0FBTyxDQUFDSSxjQUFuQixnQkFDQTtBQUNDLGFBQU8sRUFBRSxLQUFLVCx3QkFEZjtBQUVDLGVBQVMsRUFBRVUsMERBQVUsQ0FBQztBQUNyQixTQUFDSixrREFBRCxHQUFtQixJQURFO0FBRXJCLFNBQUNBLG1FQUFELEdBQWlDLElBRlo7QUFHckIsU0FBQ0Esa0RBQUQsR0FBbUIsS0FBS1IsS0FBTCxDQUFXQztBQUhULE9BQUQsQ0FGdEI7QUFPQyxXQUFLLEVBQUM7QUFQUCxNQURBLEdBVUEsSUFYRixlQWFDO0FBQ0MsYUFBTyxFQUFFLEtBQUtGLEtBQUwsQ0FBV2MsYUFEckI7QUFFQyxlQUFTLEVBQUVELDBEQUFVLENBQUM7QUFDckIsU0FBQ0osa0RBQUQsR0FBbUIsSUFERTtBQUVyQixTQUFDQSwyREFBRCxHQUF5QixDQUFDLEtBQUtULEtBQUwsQ0FBV2UsV0FGaEI7QUFHckIsU0FBQ04sNERBQUQsR0FBMEIsS0FBS1QsS0FBTCxDQUFXZTtBQUhoQixPQUFELENBRnRCO0FBT0MsV0FBSyxFQUFDO0FBUFAsTUFiRCxDQVBELEVBOEJFLEtBQUtkLEtBQUwsQ0FBV0Msa0JBQVgsZ0JBQ0E7QUFBSyxlQUFTLEVBQUVPLDhEQUFLO0FBQXJCLE9BRUVELE9BQU8sQ0FBQ0ksY0FBUixDQUF1QkksR0FBdkIsQ0FBMkIsQ0FBQ0MsT0FBRCxFQUFVQyxDQUFWLGtCQUMxQixvQkFBQyxxRUFBRDtBQUNDLFNBQUcsRUFBRVYsT0FBTyxDQUFDSSxjQUFSLENBQXVCTSxDQUF2QixFQUEwQkMsRUFEaEM7QUFFQyxhQUFPLEVBQUVYLE9BQU8sQ0FBQ0ksY0FBUixDQUF1Qk0sQ0FBdkIsQ0FGVjtBQUdDLGVBQVMsRUFBRVYsT0FBTyxDQUFDVztBQUhwQixNQURELENBRkYsQ0FEQSxHQVlBLElBMUNGLENBREQ7QUErQ0E7O0FBbEU2Qjs7QUFxRS9CLGlFQUFlQyx3REFBTyxDQUFDLGFBQUQsRUFBZ0I7QUFBQ04sZUFBYUE7QUFBZCxDQUFoQixDQUFQLENBQXdDakIsTUFBeEMsQ0FBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5qc3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5cbmltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHtjb25uZWN0fSBmcm9tICd1bmlzdG9yZS9wcmVhY3QnO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICcuLi8uLi91dGlsL2NsYXNzLW5hbWVzJztcblxuaW1wb3J0IHRvZ2dsZVNpZGViYXIgZnJvbSAnLi4vLi4vYWN0aW9ucy90b2dnbGUtc2lkZWJhcic7XG5cbmltcG9ydCBKdW1wYWJsZU1lc3NhZ2UgZnJvbSAnLi4vSnVtcGFibGVNZXNzYWdlL0p1bXBhYmxlTWVzc2FnZSc7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yIChwcm9wcykge1xuXHRcdHN1cGVyKHByb3BzKTtcblxuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHRzaG93UGlubmVkTWVzc2FnZXM6IGZhbHNlXG5cdFx0fTtcblxuXHRcdHRoaXMudG9nZ2xlU2hvd1Bpbm5lZE1lc3NhZ2VzID0gdGhpcy50b2dnbGVTaG93UGlubmVkTWVzc2FnZXMuYmluZCh0aGlzKTtcblx0fVxuXG5cdHRvZ2dsZVNob3dQaW5uZWRNZXNzYWdlcyAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHtcblx0XHRcdHNob3dQaW5uZWRNZXNzYWdlczogIXByZXZTdGF0ZS5zaG93UGlubmVkTWVzc2FnZXNcblx0XHR9KSk7XG5cdH1cblxuXHRyZW5kZXIgKCkge1xuXHRcdGNvbnN0IHtjaGFubmVsfSA9IHRoaXMucHJvcHM7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZVsnaGVhZGVyJ119PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ2NoYW5uZWwtaW5mbyddfT5cblx0XHRcdFx0XHR7Y2hhbm5lbCA/IDw+XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ2NoYW5uZWwtbmFtZSddfT57Y2hhbm5lbC5uYW1lfTwvZGl2PlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydjaGFubmVsLXRvcGljJ119PntjaGFubmVsLnRvcGljfTwvZGl2PlxuXHRcdFx0XHRcdDwvPiA6IG51bGx9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ2J1dHRvbnMnXX0+XG5cdFx0XHRcdFx0e2NoYW5uZWwgJiYgY2hhbm5lbC5waW5uZWRNZXNzYWdlcyA/XG5cdFx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMudG9nZ2xlU2hvd1Bpbm5lZE1lc3NhZ2VzfVxuXHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZXMoe1xuXHRcdFx0XHRcdFx0XHRcdFtzdHlsZVsnYnV0dG9uJ11dOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdFtzdHlsZVsnaWNvbi1waW5uZWQtbWVzc2FnZXMnXV06IHRydWUsXG5cdFx0XHRcdFx0XHRcdFx0W3N0eWxlWydhY3RpdmUnXV06IHRoaXMuc3RhdGUuc2hvd1Bpbm5lZE1lc3NhZ2VzXG5cdFx0XHRcdFx0XHRcdH0pfVxuXHRcdFx0XHRcdFx0XHR0aXRsZT1cIlBpbm5lZCBtZXNzYWdlc1wiXG5cdFx0XHRcdFx0XHQ+PC9kaXY+IDpcblx0XHRcdFx0XHRcdG51bGxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy50b2dnbGVTaWRlYmFyfVxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWVzKHtcblx0XHRcdFx0XHRcdFx0W3N0eWxlWydidXR0b24nXV06IHRydWUsXG5cdFx0XHRcdFx0XHRcdFtzdHlsZVsnc2lkZWJhci1vcGVuJ11dOiAhdGhpcy5wcm9wcy5zaG93U2lkZWJhcixcblx0XHRcdFx0XHRcdFx0W3N0eWxlWydzaWRlYmFyLWNsb3NlJ11dOiB0aGlzLnByb3BzLnNob3dTaWRlYmFyXG5cdFx0XHRcdFx0XHR9KX1cblx0XHRcdFx0XHRcdHRpdGxlPVwiVG9nZ2xlIHNpZGViYXJcIlxuXHRcdFx0XHRcdD48L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdHt0aGlzLnN0YXRlLnNob3dQaW5uZWRNZXNzYWdlcyA/XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydwaW5uZWQtbWVzc2FnZXMnXX0+XG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGNoYW5uZWwucGlubmVkTWVzc2FnZXMubWFwKChtZXNzYWdlLCBpKSA9PlxuXHRcdFx0XHRcdFx0XHRcdDxKdW1wYWJsZU1lc3NhZ2Vcblx0XHRcdFx0XHRcdFx0XHRcdGtleT17Y2hhbm5lbC5waW5uZWRNZXNzYWdlc1tpXS5pZH1cblx0XHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U9e2NoYW5uZWwucGlubmVkTWVzc2FnZXNbaV19XG5cdFx0XHRcdFx0XHRcdFx0XHRjaGFubmVsSUQ9e2NoYW5uZWwuaWR9XG5cdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdDwvZGl2PiA6XG5cdFx0XHRcdFx0bnVsbFxuXHRcdFx0XHR9XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoJ3Nob3dTaWRlYmFyJywge3RvZ2dsZVNpZGViYXJ9KShIZWFkZXIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Header/Header.jsx\n");

/***/ }),

/***/ "./components/JumpableMessage/JumpableMessage.jsx":
/*!********************************************************!*\
  !*** ./components/JumpableMessage/JumpableMessage.jsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"JumpableMessageHOC\": () => (/* reexport safe */ _JumpableMessageHOC__WEBPACK_IMPORTED_MODULE_2__.default),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/JumpableMessage/style.scss\");\n/* harmony import */ var _MessageList_MessageList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../MessageList/MessageList */ \"./components/MessageList/MessageList.jsx\");\n/* harmony import */ var _JumpableMessageHOC__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./JumpableMessageHOC */ \"./components/JumpableMessage/JumpableMessageHOC.jsx\");\n\n\n\nconst JumpableMessage = (0,_JumpableMessageHOC__WEBPACK_IMPORTED_MODULE_2__.default)(props => {\n  const {\n    message,\n    channelID,\n    jumpToMessage\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"jumpable-message\"],\n    onClick: jumpToMessage.bind(undefined, message.id, channelID)\n  }, /*#__PURE__*/React.createElement(_MessageList_MessageList__WEBPACK_IMPORTED_MODULE_1__.default, {\n    message: message\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default.jump\n  }, \"Jump\"));\n});\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (JumpableMessage);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0p1bXBhYmxlTWVzc2FnZS9KdW1wYWJsZU1lc3NhZ2UuanN4PzBlZWMiXSwibmFtZXMiOlsiSnVtcGFibGVNZXNzYWdlIiwiSnVtcGFibGVNZXNzYWdlSE9DIiwicHJvcHMiLCJtZXNzYWdlIiwiY2hhbm5lbElEIiwianVtcFRvTWVzc2FnZSIsInN0eWxlIiwiYmluZCIsImlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUVBLE1BQU1BLGVBQWUsR0FBR0MsNERBQWtCLENBQUNDLEtBQUssSUFBSTtBQUNuRCxRQUFNO0FBQUNDLFdBQUQ7QUFBVUMsYUFBVjtBQUFxQkM7QUFBckIsTUFBc0NILEtBQTVDO0FBQ0Esc0JBQ0M7QUFDQyxhQUFTLEVBQUVJLCtEQURaO0FBRUMsV0FBTyxFQUFFRCxhQUFhLENBQUNFLElBQWQsQ0FBbUIsU0FBbkIsRUFBeUJKLE9BQU8sQ0FBQ0ssRUFBakMsRUFBcUNKLFNBQXJDO0FBRlYsa0JBSUMsb0JBQUMsNkRBQUQ7QUFBYSxXQUFPLEVBQUVEO0FBQXRCLElBSkQsZUFLQztBQUFLLGFBQVMsRUFBRUcsZ0RBQUs7QUFBckIsWUFMRCxDQUREO0FBV0EsQ0FieUMsQ0FBMUM7QUFnQkE7QUFFQSxpRUFBZU4sZUFBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvSnVtcGFibGVNZXNzYWdlL0p1bXBhYmxlTWVzc2FnZS5qc3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5cbmltcG9ydCBNZXNzYWdlTGlzdCBmcm9tICcuLi9NZXNzYWdlTGlzdC9NZXNzYWdlTGlzdCc7XG5pbXBvcnQgSnVtcGFibGVNZXNzYWdlSE9DIGZyb20gJy4vSnVtcGFibGVNZXNzYWdlSE9DJztcblxuY29uc3QgSnVtcGFibGVNZXNzYWdlID0gSnVtcGFibGVNZXNzYWdlSE9DKHByb3BzID0+IHtcblx0Y29uc3Qge21lc3NhZ2UsIGNoYW5uZWxJRCwganVtcFRvTWVzc2FnZX0gPSBwcm9wcztcblx0cmV0dXJuIChcblx0XHQ8ZGl2XG5cdFx0XHRjbGFzc05hbWU9e3N0eWxlWydqdW1wYWJsZS1tZXNzYWdlJ119XG5cdFx0XHRvbkNsaWNrPXtqdW1wVG9NZXNzYWdlLmJpbmQodGhpcywgbWVzc2FnZS5pZCwgY2hhbm5lbElEKX1cblx0XHQ+XG5cdFx0XHQ8TWVzc2FnZUxpc3QgbWVzc2FnZT17bWVzc2FnZX0vPlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydqdW1wJ119PlxuXHRcdFx0XHRKdW1wXG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn0pO1xuXG5cbmV4cG9ydCB7SnVtcGFibGVNZXNzYWdlSE9DfTtcblxuZXhwb3J0IGRlZmF1bHQgSnVtcGFibGVNZXNzYWdlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/JumpableMessage/JumpableMessage.jsx\n");

/***/ }),

/***/ "./components/JumpableMessage/JumpableMessageHOC.jsx":
/*!***********************************************************!*\
  !*** ./components/JumpableMessage/JumpableMessageHOC.jsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _actions_set_channel_scroll_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../actions/set-channel-scroll-state */ \"./actions/set-channel-scroll-state.js\");\n/* harmony import */ var _actions_set_current_channel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../actions/set-current-channel */ \"./actions/set-current-channel.js\");\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\n\n\nconst JumpableMessageHOC = WrappedComponent => {\n  return (0,unistore_preact__WEBPACK_IMPORTED_MODULE_1__.connect)(['archive', 'currentChannel'], {\n    setChannelScrollState: _actions_set_channel_scroll_state__WEBPACK_IMPORTED_MODULE_2__.default,\n    setCurrentChannel: _actions_set_current_channel__WEBPACK_IMPORTED_MODULE_3__.default\n  })(class JumpableMessage extends preact__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(props) {\n      super(props);\n      this.jumpToMessage = this.jumpToMessage.bind(this);\n    }\n\n    jumpToMessage(messageID, messageChannel = this.props.currentChannel) {\n      if (messageChannel !== this.props.currentChannel) {\n        this.props.setCurrentChannel(messageChannel);\n      }\n\n      const messageIndex = this.props.archive.channels.get(messageChannel).messages.findIndex(message => message.id === messageID);\n      this.props.setChannelScrollState(messageChannel, messageIndex - 25, messageIndex + 25);\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(WrappedComponent, _extends({\n        jumpToMessage: this.jumpToMessage\n      }, this.props));\n    }\n\n  });\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (JumpableMessageHOC);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0p1bXBhYmxlTWVzc2FnZS9KdW1wYWJsZU1lc3NhZ2VIT0MuanN4PzNmOWUiXSwibmFtZXMiOlsiSnVtcGFibGVNZXNzYWdlSE9DIiwiV3JhcHBlZENvbXBvbmVudCIsImNvbm5lY3QiLCJzZXRDaGFubmVsU2Nyb2xsU3RhdGUiLCJzZXRDdXJyZW50Q2hhbm5lbCIsIkp1bXBhYmxlTWVzc2FnZSIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJqdW1wVG9NZXNzYWdlIiwiYmluZCIsIm1lc3NhZ2VJRCIsIm1lc3NhZ2VDaGFubmVsIiwiY3VycmVudENoYW5uZWwiLCJtZXNzYWdlSW5kZXgiLCJhcmNoaXZlIiwiY2hhbm5lbHMiLCJnZXQiLCJtZXNzYWdlcyIsImZpbmRJbmRleCIsIm1lc3NhZ2UiLCJpZCIsInJlbmRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQUNBOztBQUVBLE1BQU1BLGtCQUFrQixHQUFHQyxnQkFBZ0IsSUFBSTtBQUM5QyxTQUFPQyx3REFBTyxDQUFDLENBQUMsU0FBRCxFQUFZLGdCQUFaLENBQUQsRUFBZ0M7QUFBQ0MseUJBQUQ7QUFBd0JDLHFCQUFpQkE7QUFBekMsR0FBaEMsQ0FBUCxDQUNOLE1BQU1DLGVBQU4sU0FBOEJDLDZDQUE5QixDQUF3QztBQUN2Q0MsZUFBVyxDQUFFQyxLQUFGLEVBQVM7QUFDbkIsWUFBTUEsS0FBTjtBQUVBLFdBQUtDLGFBQUwsR0FBcUIsS0FBS0EsYUFBTCxDQUFtQkMsSUFBbkIsQ0FBd0IsSUFBeEIsQ0FBckI7QUFDQTs7QUFFREQsaUJBQWEsQ0FBRUUsU0FBRixFQUFhQyxjQUFjLEdBQUcsS0FBS0osS0FBTCxDQUFXSyxjQUF6QyxFQUF5RDtBQUNyRSxVQUFJRCxjQUFjLEtBQUssS0FBS0osS0FBTCxDQUFXSyxjQUFsQyxFQUFrRDtBQUNqRCxhQUFLTCxLQUFMLENBQVdKLGlCQUFYLENBQTZCUSxjQUE3QjtBQUNBOztBQUVELFlBQU1FLFlBQVksR0FBRyxLQUFLTixLQUFMLENBQVdPLE9BQVgsQ0FBbUJDLFFBQW5CLENBQTRCQyxHQUE1QixDQUFnQ0wsY0FBaEMsRUFBZ0RNLFFBQWhELENBQXlEQyxTQUF6RCxDQUNwQkMsT0FBTyxJQUFJQSxPQUFPLENBQUNDLEVBQVIsS0FBZVYsU0FETixDQUFyQjtBQUdBLFdBQUtILEtBQUwsQ0FBV0wscUJBQVgsQ0FBaUNTLGNBQWpDLEVBQWlERSxZQUFZLEdBQUcsRUFBaEUsRUFBb0VBLFlBQVksR0FBRyxFQUFuRjtBQUNBOztBQUVEUSxVQUFNLEdBQUk7QUFDVCwwQkFBTyxvQkFBQyxnQkFBRDtBQUFrQixxQkFBYSxFQUFFLEtBQUtiO0FBQXRDLFNBQXlELEtBQUtELEtBQTlELEVBQVA7QUFDQTs7QUFwQnNDLEdBRGxDLENBQVA7QUF3QkEsQ0F6QkQ7O0FBMkJBLGlFQUFlUixrQkFBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvSnVtcGFibGVNZXNzYWdlL0p1bXBhYmxlTWVzc2FnZUhPQy5qc3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAndW5pc3RvcmUvcHJlYWN0JztcblxuaW1wb3J0IHNldENoYW5uZWxTY3JvbGxTdGF0ZSBmcm9tICcuLi8uLi9hY3Rpb25zL3NldC1jaGFubmVsLXNjcm9sbC1zdGF0ZSc7XG5pbXBvcnQgc2V0Q3VycmVudENoYW5uZWwgZnJvbSAnLi4vLi4vYWN0aW9ucy9zZXQtY3VycmVudC1jaGFubmVsJztcblxuY29uc3QgSnVtcGFibGVNZXNzYWdlSE9DID0gV3JhcHBlZENvbXBvbmVudCA9PiB7XG5cdHJldHVybiBjb25uZWN0KFsnYXJjaGl2ZScsICdjdXJyZW50Q2hhbm5lbCddLCB7c2V0Q2hhbm5lbFNjcm9sbFN0YXRlLCBzZXRDdXJyZW50Q2hhbm5lbH0pKFxuXHRcdGNsYXNzIEp1bXBhYmxlTWVzc2FnZSBleHRlbmRzIENvbXBvbmVudCB7XG5cdFx0XHRjb25zdHJ1Y3RvciAocHJvcHMpIHtcblx0XHRcdFx0c3VwZXIocHJvcHMpO1xuXG5cdFx0XHRcdHRoaXMuanVtcFRvTWVzc2FnZSA9IHRoaXMuanVtcFRvTWVzc2FnZS5iaW5kKHRoaXMpO1xuXHRcdFx0fVxuXG5cdFx0XHRqdW1wVG9NZXNzYWdlIChtZXNzYWdlSUQsIG1lc3NhZ2VDaGFubmVsID0gdGhpcy5wcm9wcy5jdXJyZW50Q2hhbm5lbCkge1xuXHRcdFx0XHRpZiAobWVzc2FnZUNoYW5uZWwgIT09IHRoaXMucHJvcHMuY3VycmVudENoYW5uZWwpIHtcblx0XHRcdFx0XHR0aGlzLnByb3BzLnNldEN1cnJlbnRDaGFubmVsKG1lc3NhZ2VDaGFubmVsKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IG1lc3NhZ2VJbmRleCA9IHRoaXMucHJvcHMuYXJjaGl2ZS5jaGFubmVscy5nZXQobWVzc2FnZUNoYW5uZWwpLm1lc3NhZ2VzLmZpbmRJbmRleChcblx0XHRcdFx0XHRtZXNzYWdlID0+IG1lc3NhZ2UuaWQgPT09IG1lc3NhZ2VJRCk7XG5cdFx0XG5cdFx0XHRcdHRoaXMucHJvcHMuc2V0Q2hhbm5lbFNjcm9sbFN0YXRlKG1lc3NhZ2VDaGFubmVsLCBtZXNzYWdlSW5kZXggLSAyNSwgbWVzc2FnZUluZGV4ICsgMjUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZW5kZXIgKCkge1xuXHRcdFx0XHRyZXR1cm4gPFdyYXBwZWRDb21wb25lbnQganVtcFRvTWVzc2FnZT17dGhpcy5qdW1wVG9NZXNzYWdlfSB7Li4udGhpcy5wcm9wc30gLz47XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSnVtcGFibGVNZXNzYWdlSE9DO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/JumpableMessage/JumpableMessageHOC.jsx\n");

/***/ }),

/***/ "./components/Markdown/Markdown.jsx":
/*!******************************************!*\
  !*** ./components/Markdown/Markdown.jsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./components/Markdown/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var discord_markdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! discord-markdown */ \"../node_modules/discord-markdown/index.js\");\n/* harmony import */ var discord_markdown__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(discord_markdown__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var twemoji_parser_dist_lib_regex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! twemoji-parser/dist/lib/regex */ \"../node_modules/twemoji-parser/dist/lib/regex.js\");\n/* harmony import */ var _Emoji_Emoji__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Emoji/Emoji */ \"./components/Emoji/Emoji.jsx\");\n/* harmony import */ var _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../actions/set-user-info-id */ \"./actions/set-user-info-id.js\");\n/* harmony import */ var _actions_set_current_channel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../actions/set-current-channel */ \"./actions/set-current-channel.js\");\n/* harmony import */ var _util_class_names__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/class-names */ \"./util/class-names.js\");\n/* harmony import */ var _util_get_member_name__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/get-member-name */ \"./util/get-member-name.js\");\n/* eslint-disable react/display-name */\n\n\n\n\n\n\n\n\n\n\n\nclass Spoiler extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      spoiled: false\n    };\n    this.toggleSpoiled = this.toggleSpoiled.bind(this);\n  }\n\n  toggleSpoiled() {\n    this.setState(state => {\n      return {\n        spoiled: !state.spoiled\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_8__.default)({\n        [_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.spoiler]: true,\n        [_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.open]: this.state.spoiled\n      }),\n      onClick: this.toggleSpoiled\n    }, this.props.children);\n  }\n\n}\n\nconst UserMention = (0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('archive', {\n  setUserInfoID: _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_6__.default\n})(props => /*#__PURE__*/React.createElement(\"span\", {\n  className: `${_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.mention} ${_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.user}`,\n  onClick: () => props.setUserInfoID(props.id)\n}, (0,_util_get_member_name__WEBPACK_IMPORTED_MODULE_9__.default)(props.id, props.archive, true)));\nconst ChannelMention = (0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('archive', {\n  setCurrentChannel: _actions_set_current_channel__WEBPACK_IMPORTED_MODULE_7__.default\n})(props => {\n  const hasChannel = props.archive.channels.has(props.id);\n  const channel = props.archive.channels.get(props.id);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `${_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.mention} ${_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.channel}`,\n    onClick: hasChannel ? () => props.setCurrentChannel(props.id) : null\n  }, hasChannel ? `#${channel.name}` : '#deleted-channel');\n});\nconst RoleMention = (0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('archive')(props => {\n  const role = props.archive.data.roles.get(props.id);\n  if (!role) return '@deleted-role'; // If the role has no color, use the default blue. Otherwise, define a custom style.\n\n  let styleString = '';\n\n  if (role.color !== '#000000') {\n    const roleColorInt = parseInt(role.color.slice(1), 16);\n    const roleColorR = roleColorInt >> 16 & 0xff;\n    const roleColorG = roleColorInt >> 8 & 0xff;\n    const roleColorB = roleColorInt & 0xff;\n    styleString = `color: ${role.color}; background-color: rgba(${roleColorR}, ${roleColorG}, ${roleColorB}, 0.1)`;\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.mention,\n    style: styleString\n  }, \"@\", role.name);\n}); // If the URL is \"dangerous\" (cannot be sanitized), return regular text. Otherwise, create a link.\n\nconst makeLink = (content, node) => {\n  const target = discord_markdown__WEBPACK_IMPORTED_MODULE_3__.markdownEngine.sanitizeUrl(node.target);\n  return target ? /*#__PURE__*/React.createElement(\"a\", {\n    href: target\n  }, content) : /*#__PURE__*/React.createElement(\"span\", null, content);\n};\n\nconst toTwemoji = text => {\n  twemoji_parser_dist_lib_regex__WEBPACK_IMPORTED_MODULE_4__.default.lastIndex = 0;\n  const nodes = [];\n  let result;\n  let lastLastIndex = 0; // eslint-disable-next-line no-cond-assign\n\n  while (result = twemoji_parser_dist_lib_regex__WEBPACK_IMPORTED_MODULE_4__.default.exec(text)) {\n    const emojiText = result[0];\n    nodes.push(text.slice(lastLastIndex, result.index));\n    nodes.push( /*#__PURE__*/React.createElement(_Emoji_Emoji__WEBPACK_IMPORTED_MODULE_5__.TooltipEmoji, {\n      emoji: emojiText\n    }));\n    lastLastIndex = twemoji_parser_dist_lib_regex__WEBPACK_IMPORTED_MODULE_4__.default.lastIndex;\n  }\n\n  if (lastLastIndex !== text.length) {\n    nodes.push(text.slice(lastLastIndex));\n  }\n\n  return nodes;\n};\n\nwindow.toTwemoji = toTwemoji;\nconst reactRules = {\n  text: content => toTwemoji(content),\n  em: content => /*#__PURE__*/React.createElement(\"em\", null, content),\n  strong: content => /*#__PURE__*/React.createElement(\"strong\", null, content),\n  u: content => /*#__PURE__*/React.createElement(\"u\", null, content),\n  strike: content => /*#__PURE__*/React.createElement(\"strike\", null, content),\n  spoiler: content => /*#__PURE__*/React.createElement(Spoiler, null, content),\n  br: () => /*#__PURE__*/React.createElement(\"br\", null),\n  inlineCode: content => /*#__PURE__*/React.createElement(\"code\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.code\n  }, content),\n  codeBlock: content => /*#__PURE__*/React.createElement(\"pre\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"code-block\"]\n  }, content),\n  blockQuote: content => /*#__PURE__*/React.createElement(\"blockquote\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"block-quote\"]\n  }, content),\n  url: makeLink,\n  autolink: makeLink,\n  discordUser: (content, node) => /*#__PURE__*/React.createElement(UserMention, {\n    id: node.id\n  }),\n  discordEveryone: () => /*#__PURE__*/React.createElement(\"span\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.mention\n  }, \"@everyone\"),\n  discordHere: () => /*#__PURE__*/React.createElement(\"span\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.mention\n  }, \"@here\"),\n  discordRole: (content, node) => /*#__PURE__*/React.createElement(RoleMention, {\n    id: node.id\n  }),\n  discordChannel: (content, node) => /*#__PURE__*/React.createElement(ChannelMention, {\n    id: node.id\n  }),\n  discordEmoji: (content, node) => /*#__PURE__*/React.createElement(_Emoji_Emoji__WEBPACK_IMPORTED_MODULE_5__.TooltipEmoji, {\n    emoji: node\n  })\n};\n\nconst reactify = nodeArray => nodeArray.map(node => {\n  const nodeHasContent = Object.prototype.hasOwnProperty.call(node, 'content');\n  let content = node.content;\n\n  if (nodeHasContent && Array.isArray(node.content)) {\n    content = reactify(node.content);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(reactRules, node.type)) {\n    return reactRules[node.type](content, node);\n  } // eslint-disable-next-line no-console\n\n\n  console.warn(`Unknown Markdown node type: ${node.type}`);\n  return nodeHasContent ? reactRules.text(content) : null;\n}); //const Markdown = props => reactify(parser(props.text));\n\n\nconst Markdown = props => {\n  const parsed = (0,discord_markdown__WEBPACK_IMPORTED_MODULE_3__.parser)(props.text);\n  return reactify(parsed);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Markdown);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Markdown/Markdown.jsx\n");

/***/ }),

/***/ "./components/MessageList/MessageList.jsx":
/*!************************************************!*\
  !*** ./components/MessageList/MessageList.jsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/MessageList/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var preact_compat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! preact/compat */ \"../node_modules/preact/compat/dist/compat.module.js\");\n/* harmony import */ var _Attachment_Attachment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Attachment/Attachment */ \"./components/Attachment/Attachment.jsx\");\n/* harmony import */ var _Avatar_Avatar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Avatar/Avatar */ \"./components/Avatar/Avatar.jsx\");\n/* harmony import */ var _Emoji_Emoji__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Emoji/Emoji */ \"./components/Emoji/Emoji.jsx\");\n/* harmony import */ var _Markdown_Markdown__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Markdown/Markdown */ \"./components/Markdown/Markdown.jsx\");\n/* harmony import */ var _Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Tooltip/Tooltip */ \"./components/Tooltip/Tooltip.jsx\");\n/* harmony import */ var _JumpableMessage_JumpableMessageHOC__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../JumpableMessage/JumpableMessageHOC */ \"./components/JumpableMessage/JumpableMessageHOC.jsx\");\n/* harmony import */ var _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../actions/set-user-info-id */ \"./actions/set-user-info-id.js\");\n/* harmony import */ var _actions_set_reaction_info__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../actions/set-reaction-info */ \"./actions/set-reaction-info.js\");\n/* harmony import */ var _util_get_member_name__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/get-member-name */ \"./util/get-member-name.js\");\n/* harmony import */ var _util_member_role_color__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../util/member-role-color */ \"./util/member-role-color.js\");\n/* harmony import */ var _util_format_timestamp__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../util/format-timestamp */ \"./util/format-timestamp.js\");\n/* harmony import */ var _util_class_names__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../util/class-names */ \"./util/class-names.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Edited extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stayOpen: false\n    };\n    this.toggleStayOpen = this.toggleStayOpen.bind(this);\n  }\n\n  toggleStayOpen() {\n    this.setState(prevState => {\n      return {\n        stayOpen: !prevState.stayOpen\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_15__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.edited]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.open]: this.state.stayOpen,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.closed]: !this.state.stayOpen\n      })\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: this.toggleStayOpen\n    }, \"(edited)\"), /*#__PURE__*/React.createElement(_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_8__.default, {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"edited-date\"]\n    }, (0,_util_format_timestamp__WEBPACK_IMPORTED_MODULE_14__.default)(this.props.timestamp)));\n  }\n\n}\n\nconst MessageReaction = (0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('archive', {\n  setReactionInfo: _actions_set_reaction_info__WEBPACK_IMPORTED_MODULE_11__.default\n})(({\n  reactions,\n  archive,\n  reaction,\n  reactionIndex,\n  setReactionInfo\n}) => {\n  const {\n    count,\n    emoji,\n    emojiIsCustom\n  } = reaction;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default.reaction,\n    onClick: () => setReactionInfo(reactions, reactionIndex)\n  }, /*#__PURE__*/React.createElement(_Emoji_Emoji__WEBPACK_IMPORTED_MODULE_6__.ReactionEmoji, {\n    emoji: emojiIsCustom ? archive.emojis.get(emoji) : emoji\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"reaction-count\"]\n  }, count));\n});\n\nconst MessageContents = ({\n  message\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: _style__WEBPACK_IMPORTED_MODULE_0__.default.message,\n  key: message.id\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-content\"]\n}, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(_Markdown_Markdown__WEBPACK_IMPORTED_MODULE_7__.default, {\n  text: message.content\n})), message.editedTimestamp ? /*#__PURE__*/React.createElement(Edited, {\n  timestamp: message.editedTimestamp\n}) : null), message.attachments === null ? null : message.attachments.map((attachment, index) => /*#__PURE__*/React.createElement(_Attachment_Attachment__WEBPACK_IMPORTED_MODULE_4__.default, {\n  key: index,\n  attachment: attachment\n})), message.reactions === null ? null : /*#__PURE__*/React.createElement(\"div\", {\n  className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-reactions\"]\n}, message.reactions.map((reaction, index) => /*#__PURE__*/React.createElement(MessageReaction, {\n  key: reaction.emoji,\n  reaction: reaction,\n  reactions: message.reactions,\n  reactionIndex: index\n})))); //console.log(JumpableMessageHOC);\n\n\nconst RepliedContent = (0,_JumpableMessage_JumpableMessageHOC__WEBPACK_IMPORTED_MODULE_9__.default)(({\n  text,\n  jumpToMessage,\n  messageID,\n  hasAttachments\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"replied-content\"],\n  onClick: () => jumpToMessage(messageID)\n}, !text && hasAttachments ? /*#__PURE__*/React.createElement(\"i\", null, \"Click to see attachment\") : /*#__PURE__*/React.createElement(_Markdown_Markdown__WEBPACK_IMPORTED_MODULE_7__.default, {\n  text: text\n})));\nconst RepliedMessage = (0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('archive', {\n  setUserInfoID: _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_10__.default\n})(({\n  message,\n  archive,\n  setUserInfoID\n}) => {\n  const hasAttachments = message.attachments && message.attachments.length > 0;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"replied-message\"]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"replied-avatar\"]\n  }, /*#__PURE__*/React.createElement(_Avatar_Avatar__WEBPACK_IMPORTED_MODULE_5__.default, {\n    user: archive.users.get(message.authorID),\n    size: 16,\n    userID: message.authorID\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"replied-poster\"],\n    style: `color: ${(0,_util_member_role_color__WEBPACK_IMPORTED_MODULE_13__.default)(message.authorID, archive)}`,\n    onClick: () => setUserInfoID(message.authorID)\n  }, (0,_util_get_member_name__WEBPACK_IMPORTED_MODULE_12__.default)(message.authorID, archive)), /*#__PURE__*/React.createElement(RepliedContent, {\n    text: message.content,\n    hasAttachments: hasAttachments,\n    messageID: message.id\n  }), hasAttachments ? /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"replied-attachments-icon\"]\n  }) : null);\n});\n\nconst MessageList = props => {\n  const messageComponents = [];\n  const {\n    messages,\n    message,\n    start,\n    end\n  } = props;\n  let firstMessage;\n\n  if (messages) {\n    if (messages.length === 0) return null;\n\n    for (let i = start; i < end; i++) {\n      messageComponents.push( /*#__PURE__*/React.createElement(MessageContents, {\n        message: messages[i]\n      }));\n    }\n\n    firstMessage = messages[start];\n  } else {\n    messageComponents.push( /*#__PURE__*/React.createElement(MessageContents, {\n      message: message\n    }));\n    firstMessage = message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-list\"]\n  }, firstMessage.referencedMessage ? /*#__PURE__*/React.createElement(RepliedMessage, {\n    message: firstMessage.referencedMessage\n  }) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-inner\"]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-avatar\"]\n  }, /*#__PURE__*/React.createElement(_Avatar_Avatar__WEBPACK_IMPORTED_MODULE_5__.default, {\n    user: props.archive.users.get(firstMessage.authorID),\n    size: 32,\n    userID: firstMessage.authorID\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-right\"]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-header\"]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-poster\"],\n    style: `color: ${(0,_util_member_role_color__WEBPACK_IMPORTED_MODULE_13__.default)(firstMessage.authorID, props.archive)}`,\n    onClick: () => props.setUserInfoID(firstMessage.authorID)\n  }, (0,_util_get_member_name__WEBPACK_IMPORTED_MODULE_12__.default)(firstMessage.authorID, props.archive)), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-timestamp\"]\n  }, (0,_util_format_timestamp__WEBPACK_IMPORTED_MODULE_14__.default)(firstMessage.createdTimestamp))), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"message-bodies\"]\n  }, messageComponents))));\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)(['archive'], {\n  setUserInfoID: _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_10__.default\n})((0,preact_compat__WEBPACK_IMPORTED_MODULE_3__.memo)(MessageList)));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/MessageList/MessageList.jsx\n");

/***/ }),

/***/ "./components/MessageView/MessageView.jsx":
/*!************************************************!*\
  !*** ./components/MessageView/MessageView.jsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/MessageView/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _MessageList_MessageList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../MessageList/MessageList */ \"./components/MessageList/MessageList.jsx\");\n/* harmony import */ var _MessageViewScrollbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MessageViewScrollbar */ \"./components/MessageView/MessageViewScrollbar.jsx\");\n/* harmony import */ var _actions_set_channel_scroll_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../actions/set-channel-scroll-state */ \"./actions/set-channel-scroll-state.js\");\n/* harmony import */ var _util_should_split_messages__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/should-split-messages */ \"./util/should-split-messages.js\");\n/* harmony import */ var _util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/fixup-message-boundaries */ \"./util/fixup-message-boundaries.js\");\n\n\n\n\n\n\n\n\nconst CHUNK_SIZE = 50;\nconst MAX_MESSAGES = 200;\nconst SLACK_SPACE = 100; // eslint-disable-next-line no-unused-vars\n\nconst timer = ms => new Promise(resolve => {\n  setTimeout(resolve, ms);\n});\n\nclass MessageView extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.viewElem = (0,preact__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    this.loadMoreFromTop = this.loadMoreFromTop.bind(this);\n    this.loadMoreFromBottom = this.loadMoreFromBottom.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.setNewStart = this.setNewStart.bind(this);\n    this.setNewEnd = this.setNewEnd.bind(this);\n  }\n\n  handleScroll(e) {\n    const currentView = this.viewElem.current;\n    const atBottom = currentView.scrollHeight - currentView.clientHeight - currentView.scrollTop < SLACK_SPACE;\n    const atTop = currentView.scrollTop < SLACK_SPACE;\n\n    if (atTop && this.props.start > 0) {\n      this.loadMoreFromTop();\n    } else if (atBottom && this.props.end < this.props.messages.length - 1) {\n      this.loadMoreFromBottom();\n      e.preventDefault();\n    }\n  }\n\n  loadMoreFromTop() {\n    // We don't adjust the end position here because that would mess up the scrolling adjustment.\n    // Messages are removed from the bottom in componentDidUpdate after the scroll has been adjusted.\n    const {\n      props\n    } = this;\n    props.setChannelScrollState(props.currentChannel, (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__.fixupMessageStart)(props.start - CHUNK_SIZE, props.messages), props.end);\n  }\n\n  loadMoreFromBottom() {\n    const {\n      props\n    } = this;\n    props.setChannelScrollState(props.currentChannel, props.start, (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__.fixupMessageEnd)(props.end + CHUNK_SIZE, props.messages));\n  }\n\n  setNewStart(start) {\n    const {\n      props\n    } = this;\n    props.setChannelScrollState(props.currentChannel, (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__.fixupMessageStart)(start, props.messages), (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__.fixupMessageEnd)(start + CHUNK_SIZE, props.messages));\n  }\n\n  setNewEnd(end) {\n    const {\n      props\n    } = this;\n    props.setChannelScrollState(props.currentChannel, (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__.fixupMessageStart)(end - CHUNK_SIZE, props.messages), (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__.fixupMessageEnd)(end, props.messages));\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    // When adding messages at the top, maintain scroll position.\n    if (this.props.start !== prevProps.start) {\n      const list = this.viewElem.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const {\n      props\n    } = this;\n\n    if (snapshot !== null) {\n      const list = this.viewElem.current;\n      list.scrollTop = list.scrollHeight - snapshot; // Now that we've properly positioned the top of the message list according to its bottom, we can trim old\n      // messages of the bottom of the list.\n\n      props.setChannelScrollState(props.currentChannel, props.start, (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__.fixupMessageEnd)(Math.min(props.end, props.start + MAX_MESSAGES), props.messages));\n    } else if (prevProps.end !== props.end) {\n      props.setChannelScrollState(props.currentChannel, (0,_util_fixup_message_boundaries__WEBPACK_IMPORTED_MODULE_7__.fixupMessageStart)(Math.max(props.start, props.end - MAX_MESSAGES), props.messages), props.end);\n    }\n  }\n\n  render() {\n    const {\n      props\n    } = this;\n    const {\n      start,\n      end\n    } = this.props;\n    const atStart = start === 0;\n    const atEnd = end === props.messages.length - 1;\n    const chunks = [];\n\n    if (props.messages.length > 0) {\n      // there is probably at least one off-by-one error in here\n      let currentChunkStart;\n      let i = start;\n\n      while (i <= end) {\n        currentChunkStart = i;\n\n        while (i < end && !(0,_util_should_split_messages__WEBPACK_IMPORTED_MODULE_6__.default)(props.messages[i], props.messages[i + 1])) {\n          i++;\n        }\n\n        i++;\n        chunks.push( /*#__PURE__*/React.createElement(_MessageList_MessageList__WEBPACK_IMPORTED_MODULE_3__.default, {\n          key: props.messages[currentChunkStart].id,\n          messages: props.messages,\n          start: currentChunkStart,\n          end: i\n        }));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"messages-container\"]\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.messages,\n      ref: this.viewElem,\n      onScroll: this.handleScroll\n    }, atStart ? null : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"load-more\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.loadMoreFromTop\n    }, \"Load more\")), chunks, atEnd ? null : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"load-more\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.loadMoreFromBottom\n    }, \"Load more\"))), /*#__PURE__*/React.createElement(_MessageViewScrollbar__WEBPACK_IMPORTED_MODULE_4__.default, {\n      totalMessages: this.props.messages.length,\n      start: start,\n      end: end,\n      setNewStart: this.setNewStart,\n      setNewEnd: this.setNewEnd\n    }));\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)(state => {\n  const {\n    currentChannel\n  } = state;\n  const {\n    start,\n    end\n  } = state.channelScrollState[currentChannel];\n  return {\n    currentChannel,\n    start,\n    end\n  };\n}, {\n  setChannelScrollState: _actions_set_channel_scroll_state__WEBPACK_IMPORTED_MODULE_5__.default\n})(MessageView));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/MessageView/MessageView.jsx\n");

/***/ }),

/***/ "./components/MessageView/MessageViewScrollbar.jsx":
/*!*********************************************************!*\
  !*** ./components/MessageView/MessageViewScrollbar.jsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/MessageView/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n\n\n/**\n * React ****s up text inputs by making onChange fire on *every* input. We only want it to fire when the user confirms\n * their input, either by unfocusing/blurring the input or by pressing the enter key.\n */\n\nclass BetterTextInput extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  handleKeyPress(event) {\n    if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n      this.props.onChange(event);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      className: this.props.className,\n      type: \"text\",\n      value: this.props.value,\n      onBlur: this.props.onChange,\n      onKeyPress: this.handleKeyPress\n    });\n  }\n\n}\n\nclass MessageViewScrollbar extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.rangeElem = (0,preact__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    this.handleSetStart = this.handleSetStart.bind(this);\n    this.handleSetEnd = this.handleSetEnd.bind(this);\n  }\n\n  handleSetStart(e) {\n    const {\n      value\n    } = e.target;\n    const numVal = parseInt(value);\n    if (!Number.isInteger(numVal)) return;\n    this.props.setNewStart(numVal);\n  }\n\n  handleSetEnd(e) {\n    const {\n      value\n    } = e.target;\n    const numVal = parseInt(value);\n    if (!Number.isInteger(numVal)) return;\n    this.props.setNewEnd(numVal);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.scrollbar\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-wrapper\"]\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-top-wrapper\"],\n      style: `top: ${this.props.start / this.props.totalMessages * 100}%;`\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${_style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-top\"]} ${_style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-indicator\"]}`\n    }, /*#__PURE__*/React.createElement(BetterTextInput, {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-input\"],\n      value: this.props.start,\n      onChange: this.handleSetStart\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-bottom-wrapper\"],\n      style: `top: ${this.props.end / this.props.totalMessages * 100}%;`\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${_style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-bottom\"]} ${_style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-indicator\"]}`\n    }, /*#__PURE__*/React.createElement(BetterTextInput, {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-range-input\"],\n      value: this.props.end,\n      onChange: this.handleSetEnd\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-indicator-wrapper\"]\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"scrollbar-indicator\"],\n      ref: this.rangeElem,\n      style: `top: ${this.props.start / this.props.totalMessages * 100}%;\n\t\t\t\t\t\t\theight: ${(this.props.end - this.props.start) / this.props.totalMessages * 100}%;`\n    })));\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MessageViewScrollbar);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL01lc3NhZ2VWaWV3L01lc3NhZ2VWaWV3U2Nyb2xsYmFyLmpzeD8xYzE1Il0sIm5hbWVzIjpbIkJldHRlclRleHRJbnB1dCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJoYW5kbGVLZXlQcmVzcyIsImJpbmQiLCJldmVudCIsImNvZGUiLCJvbkNoYW5nZSIsInJlbmRlciIsImNsYXNzTmFtZSIsInZhbHVlIiwiTWVzc2FnZVZpZXdTY3JvbGxiYXIiLCJyYW5nZUVsZW0iLCJjcmVhdGVSZWYiLCJoYW5kbGVTZXRTdGFydCIsImhhbmRsZVNldEVuZCIsImUiLCJ0YXJnZXQiLCJudW1WYWwiLCJwYXJzZUludCIsIk51bWJlciIsImlzSW50ZWdlciIsInNldE5ld1N0YXJ0Iiwic2V0TmV3RW5kIiwic3R5bGUiLCJzdGFydCIsInRvdGFsTWVzc2FnZXMiLCJlbmQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQSxlQUFOLFNBQThCQyw2Q0FBOUIsQ0FBd0M7QUFDdkNDLGFBQVcsQ0FBRUMsS0FBRixFQUFTO0FBQ25CLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxjQUFMLEdBQXNCLEtBQUtBLGNBQUwsQ0FBb0JDLElBQXBCLENBQXlCLElBQXpCLENBQXRCO0FBQ0E7O0FBRURELGdCQUFjLENBQUVFLEtBQUYsRUFBUztBQUN0QixRQUFJQSxLQUFLLENBQUNDLElBQU4sS0FBZSxPQUFmLElBQTBCRCxLQUFLLENBQUNDLElBQU4sS0FBZSxhQUE3QyxFQUE0RDtBQUMzRCxXQUFLSixLQUFMLENBQVdLLFFBQVgsQ0FBb0JGLEtBQXBCO0FBQ0E7QUFDRDs7QUFFREcsUUFBTSxHQUFJO0FBQ1Qsd0JBQ0M7QUFDQyxlQUFTLEVBQUUsS0FBS04sS0FBTCxDQUFXTyxTQUR2QjtBQUVDLFVBQUksRUFBQyxNQUZOO0FBR0MsV0FBSyxFQUFFLEtBQUtQLEtBQUwsQ0FBV1EsS0FIbkI7QUFJQyxZQUFNLEVBQUUsS0FBS1IsS0FBTCxDQUFXSyxRQUpwQjtBQUtDLGdCQUFVLEVBQUUsS0FBS0o7QUFMbEIsTUFERDtBQVNBOztBQXRCc0M7O0FBeUJ4QyxNQUFNUSxvQkFBTixTQUFtQ1gsNkNBQW5DLENBQTZDO0FBQzVDQyxhQUFXLENBQUVDLEtBQUYsRUFBUztBQUNuQixVQUFNQSxLQUFOO0FBRUEsU0FBS1UsU0FBTCxHQUFpQkMsaURBQVMsRUFBMUI7QUFFQSxTQUFLQyxjQUFMLEdBQXNCLEtBQUtBLGNBQUwsQ0FBb0JWLElBQXBCLENBQXlCLElBQXpCLENBQXRCO0FBQ0EsU0FBS1csWUFBTCxHQUFvQixLQUFLQSxZQUFMLENBQWtCWCxJQUFsQixDQUF1QixJQUF2QixDQUFwQjtBQUNBOztBQUVEVSxnQkFBYyxDQUFFRSxDQUFGLEVBQUs7QUFDbEIsVUFBTTtBQUFDTjtBQUFELFFBQVVNLENBQUMsQ0FBQ0MsTUFBbEI7QUFDQSxVQUFNQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1QsS0FBRCxDQUF2QjtBQUNBLFFBQUksQ0FBQ1UsTUFBTSxDQUFDQyxTQUFQLENBQWlCSCxNQUFqQixDQUFMLEVBQStCO0FBQy9CLFNBQUtoQixLQUFMLENBQVdvQixXQUFYLENBQXVCSixNQUF2QjtBQUNBOztBQUVESCxjQUFZLENBQUVDLENBQUYsRUFBSztBQUNoQixVQUFNO0FBQUNOO0FBQUQsUUFBVU0sQ0FBQyxDQUFDQyxNQUFsQjtBQUNBLFVBQU1DLE1BQU0sR0FBR0MsUUFBUSxDQUFDVCxLQUFELENBQXZCO0FBQ0EsUUFBSSxDQUFDVSxNQUFNLENBQUNDLFNBQVAsQ0FBaUJILE1BQWpCLENBQUwsRUFBK0I7QUFDL0IsU0FBS2hCLEtBQUwsQ0FBV3FCLFNBQVgsQ0FBcUJMLE1BQXJCO0FBQ0E7O0FBRURWLFFBQU0sR0FBSTtBQUNULHdCQUNDO0FBQUssZUFBUyxFQUFFZ0IscURBQUs7QUFBckIsb0JBQ0M7QUFBSyxlQUFTLEVBQUVBLHNFQUFLO0FBQXJCLG9CQUNDO0FBQ0MsZUFBUyxFQUFFQSwwRUFEWjtBQUVDLFdBQUssRUFBRyxRQUFRLEtBQUt0QixLQUFMLENBQVd1QixLQUFYLEdBQW1CLEtBQUt2QixLQUFMLENBQVd3QixhQUEvQixHQUFnRCxHQUFJO0FBRnBFLG9CQUlDO0FBQUssZUFBUyxFQUFHLEdBQUVGLGtFQUE2QixJQUFHQSx3RUFBbUM7QUFBdEYsb0JBQ0Msb0JBQUMsZUFBRDtBQUNDLGVBQVMsRUFBRUEsb0VBRFo7QUFFQyxXQUFLLEVBQUUsS0FBS3RCLEtBQUwsQ0FBV3VCLEtBRm5CO0FBR0MsY0FBUSxFQUFFLEtBQUtYO0FBSGhCLE1BREQsQ0FKRCxDQURELGVBY0M7QUFDQyxlQUFTLEVBQUVVLDZFQURaO0FBRUMsV0FBSyxFQUFHLFFBQVEsS0FBS3RCLEtBQUwsQ0FBV3lCLEdBQVgsR0FBaUIsS0FBS3pCLEtBQUwsQ0FBV3dCLGFBQTdCLEdBQThDLEdBQUk7QUFGbEUsb0JBSUM7QUFBSyxlQUFTLEVBQUcsR0FBRUYscUVBQWdDLElBQUdBLHdFQUFtQztBQUF6RixvQkFDQyxvQkFBQyxlQUFEO0FBQ0MsZUFBUyxFQUFFQSxvRUFEWjtBQUVDLFdBQUssRUFBRSxLQUFLdEIsS0FBTCxDQUFXeUIsR0FGbkI7QUFHQyxjQUFRLEVBQUUsS0FBS1o7QUFIaEIsTUFERCxDQUpELENBZEQsQ0FERCxlQTZCQztBQUFLLGVBQVMsRUFBRVMsMEVBQUs7QUFBckIsb0JBQ0M7QUFDQyxlQUFTLEVBQUVBLGtFQURaO0FBRUMsU0FBRyxFQUFFLEtBQUtaLFNBRlg7QUFHQyxXQUFLLEVBQUcsUUFBUSxLQUFLVixLQUFMLENBQVd1QixLQUFYLEdBQW1CLEtBQUt2QixLQUFMLENBQVd3QixhQUEvQixHQUFnRCxHQUFJO0FBQ3pFLGlCQUFrQixDQUFDLEtBQUt4QixLQUFMLENBQVd5QixHQUFYLEdBQWlCLEtBQUt6QixLQUFMLENBQVd1QixLQUE3QixJQUFzQyxLQUFLdkIsS0FBTCxDQUFXd0IsYUFBbEQsR0FBbUUsR0FBSTtBQUpuRixNQURELENBN0JELENBREQ7QUF5Q0E7O0FBbEUyQzs7QUFxRTdDLGlFQUFlZixvQkFBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvTWVzc2FnZVZpZXcvTWVzc2FnZVZpZXdTY3JvbGxiYXIuanN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuXG5pbXBvcnQge0NvbXBvbmVudCwgY3JlYXRlUmVmfSBmcm9tICdwcmVhY3QnO1xuXG4vKipcbiAqIFJlYWN0ICoqKipzIHVwIHRleHQgaW5wdXRzIGJ5IG1ha2luZyBvbkNoYW5nZSBmaXJlIG9uICpldmVyeSogaW5wdXQuIFdlIG9ubHkgd2FudCBpdCB0byBmaXJlIHdoZW4gdGhlIHVzZXIgY29uZmlybXNcbiAqIHRoZWlyIGlucHV0LCBlaXRoZXIgYnkgdW5mb2N1c2luZy9ibHVycmluZyB0aGUgaW5wdXQgb3IgYnkgcHJlc3NpbmcgdGhlIGVudGVyIGtleS5cbiAqL1xuY2xhc3MgQmV0dGVyVGV4dElucHV0IGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKHByb3BzKSB7XG5cdFx0c3VwZXIocHJvcHMpO1xuXHRcdHRoaXMuaGFuZGxlS2V5UHJlc3MgPSB0aGlzLmhhbmRsZUtleVByZXNzLmJpbmQodGhpcyk7XG5cdH1cblxuXHRoYW5kbGVLZXlQcmVzcyAoZXZlbnQpIHtcblx0XHRpZiAoZXZlbnQuY29kZSA9PT0gJ0VudGVyJyB8fCBldmVudC5jb2RlID09PSAnTnVtcGFkRW50ZXInKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uQ2hhbmdlKGV2ZW50KTtcblx0XHR9XG5cdH1cblxuXHRyZW5kZXIgKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8aW5wdXRcblx0XHRcdFx0Y2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX1cblx0XHRcdFx0dHlwZT1cInRleHRcIlxuXHRcdFx0XHR2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX1cblx0XHRcdFx0b25CbHVyPXt0aGlzLnByb3BzLm9uQ2hhbmdlfVxuXHRcdFx0XHRvbktleVByZXNzPXt0aGlzLmhhbmRsZUtleVByZXNzfVxuXHRcdFx0Lz5cblx0XHQpO1xuXHR9XG59XG5cbmNsYXNzIE1lc3NhZ2VWaWV3U2Nyb2xsYmFyIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKHByb3BzKSB7XG5cdFx0c3VwZXIocHJvcHMpO1xuXG5cdFx0dGhpcy5yYW5nZUVsZW0gPSBjcmVhdGVSZWYoKTtcblxuXHRcdHRoaXMuaGFuZGxlU2V0U3RhcnQgPSB0aGlzLmhhbmRsZVNldFN0YXJ0LmJpbmQodGhpcyk7XG5cdFx0dGhpcy5oYW5kbGVTZXRFbmQgPSB0aGlzLmhhbmRsZVNldEVuZC5iaW5kKHRoaXMpO1xuXHR9XG5cblx0aGFuZGxlU2V0U3RhcnQgKGUpIHtcblx0XHRjb25zdCB7dmFsdWV9ID0gZS50YXJnZXQ7XG5cdFx0Y29uc3QgbnVtVmFsID0gcGFyc2VJbnQodmFsdWUpO1xuXHRcdGlmICghTnVtYmVyLmlzSW50ZWdlcihudW1WYWwpKSByZXR1cm47XG5cdFx0dGhpcy5wcm9wcy5zZXROZXdTdGFydChudW1WYWwpO1xuXHR9XG5cblx0aGFuZGxlU2V0RW5kIChlKSB7XG5cdFx0Y29uc3Qge3ZhbHVlfSA9IGUudGFyZ2V0O1xuXHRcdGNvbnN0IG51bVZhbCA9IHBhcnNlSW50KHZhbHVlKTtcblx0XHRpZiAoIU51bWJlci5pc0ludGVnZXIobnVtVmFsKSkgcmV0dXJuO1xuXHRcdHRoaXMucHJvcHMuc2V0TmV3RW5kKG51bVZhbCk7XG5cdH1cblxuXHRyZW5kZXIgKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ3Njcm9sbGJhciddfT5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydzY3JvbGxiYXItcmFuZ2Utd3JhcHBlciddfT5cblx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e3N0eWxlWydzY3JvbGxiYXItcmFuZ2UtdG9wLXdyYXBwZXInXX1cblx0XHRcdFx0XHRcdHN0eWxlPXtgdG9wOiAkeyh0aGlzLnByb3BzLnN0YXJ0IC8gdGhpcy5wcm9wcy50b3RhbE1lc3NhZ2VzKSAqIDEwMH0lO2B9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake3N0eWxlWydzY3JvbGxiYXItcmFuZ2UtdG9wJ119ICR7c3R5bGVbJ3Njcm9sbGJhci1yYW5nZS1pbmRpY2F0b3InXX1gfT5cblx0XHRcdFx0XHRcdFx0PEJldHRlclRleHRJbnB1dFxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT17c3R5bGVbJ3Njcm9sbGJhci1yYW5nZS1pbnB1dCddfVxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlPXt0aGlzLnByb3BzLnN0YXJ0fVxuXHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLmhhbmRsZVNldFN0YXJ0fVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e3N0eWxlWydzY3JvbGxiYXItcmFuZ2UtYm90dG9tLXdyYXBwZXInXX1cblx0XHRcdFx0XHRcdHN0eWxlPXtgdG9wOiAkeyh0aGlzLnByb3BzLmVuZCAvIHRoaXMucHJvcHMudG90YWxNZXNzYWdlcykgKiAxMDB9JTtgfVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtgJHtzdHlsZVsnc2Nyb2xsYmFyLXJhbmdlLWJvdHRvbSddfSAke3N0eWxlWydzY3JvbGxiYXItcmFuZ2UtaW5kaWNhdG9yJ119YH0+XG5cdFx0XHRcdFx0XHRcdDxCZXR0ZXJUZXh0SW5wdXRcblx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9e3N0eWxlWydzY3JvbGxiYXItcmFuZ2UtaW5wdXQnXX1cblx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17dGhpcy5wcm9wcy5lbmR9XG5cdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMuaGFuZGxlU2V0RW5kfVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZVsnc2Nyb2xsYmFyLWluZGljYXRvci13cmFwcGVyJ119PlxuXHRcdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRcdGNsYXNzTmFtZT17c3R5bGVbJ3Njcm9sbGJhci1pbmRpY2F0b3InXX1cblx0XHRcdFx0XHRcdHJlZj17dGhpcy5yYW5nZUVsZW19XG5cdFx0XHRcdFx0XHRzdHlsZT17YHRvcDogJHsodGhpcy5wcm9wcy5zdGFydCAvIHRoaXMucHJvcHMudG90YWxNZXNzYWdlcykgKiAxMDB9JTtcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiAkeygodGhpcy5wcm9wcy5lbmQgLSB0aGlzLnByb3BzLnN0YXJ0KSAvIHRoaXMucHJvcHMudG90YWxNZXNzYWdlcykgKiAxMDB9JTtgfVxuXHRcdFx0XHRcdD48L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZVZpZXdTY3JvbGxiYXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/MessageView/MessageViewScrollbar.jsx\n");

/***/ }),

/***/ "./components/Modal/Modal.jsx":
/*!************************************!*\
  !*** ./components/Modal/Modal.jsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./components/Modal/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n\n\n\nclass Modal extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"modal-bg\"],\n      onClick: this.props.onClose\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"modal-positioner\"]\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.modal\n    }, this.props.children)));\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Modal);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL01vZGFsL01vZGFsLmpzeD81NmExIl0sIm5hbWVzIjpbIk1vZGFsIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInJlbmRlciIsInN0eWxlIiwib25DbG9zZSIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUVBOztBQUVBLE1BQU1BLEtBQU4sU0FBb0JDLDZDQUFwQixDQUE4QjtBQUM3QkMsYUFBVyxDQUFFQyxLQUFGLEVBQVM7QUFDbkIsVUFBTUEsS0FBTjtBQUNBOztBQUVEQyxRQUFNLEdBQUk7QUFDVCx3QkFDQyx1REFDQztBQUNDLGVBQVMsRUFBRUMsNERBRFo7QUFFQyxhQUFPLEVBQUUsS0FBS0YsS0FBTCxDQUFXRztBQUZyQixNQURELGVBS0M7QUFBSyxlQUFTLEVBQUVELG9FQUFLO0FBQXJCLG9CQUNDO0FBQUssZUFBUyxFQUFFQSxzREFBSztBQUFyQixPQUNFLEtBQUtGLEtBQUwsQ0FBV0ksUUFEYixDQURELENBTEQsQ0FERDtBQWFBOztBQW5CNEI7O0FBc0I5QixpRUFBZVAsS0FBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvTW9kYWwvTW9kYWwuanN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUuc2Nzcyc7XG5cbmltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdwcmVhY3QnO1xuXG5jbGFzcyBNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yIChwcm9wcykge1xuXHRcdHN1cGVyKHByb3BzKTtcblx0fVxuXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDw+XG5cdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRjbGFzc05hbWU9e3N0eWxlWydtb2RhbC1iZyddfVxuXHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMucHJvcHMub25DbG9zZX1cblx0XHRcdFx0Lz5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydtb2RhbC1wb3NpdGlvbmVyJ119PlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZVsnbW9kYWwnXX0+XG5cdFx0XHRcdFx0XHR7dGhpcy5wcm9wcy5jaGlsZHJlbn1cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8Lz5cblx0XHQpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Modal/Modal.jsx\n");

/***/ }),

/***/ "./components/ReactionInfo/ReactionInfo.jsx":
/*!**************************************************!*\
  !*** ./components/ReactionInfo/ReactionInfo.jsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./components/ReactionInfo/style.scss\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _Avatar_Avatar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Avatar/Avatar */ \"./components/Avatar/Avatar.jsx\");\n/* harmony import */ var _Emoji_Emoji__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Emoji/Emoji */ \"./components/Emoji/Emoji.jsx\");\n/* harmony import */ var _actions_set_reaction_info_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../actions/set-reaction-info-index */ \"./actions/set-reaction-info-index.js\");\n/* harmony import */ var _util_class_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/class-names */ \"./util/class-names.js\");\n/* harmony import */ var _util_get_member_name__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/get-member-name */ \"./util/get-member-name.js\");\n\n\n\n\n\n\n\nconst ReactionInfo = (0,unistore_preact__WEBPACK_IMPORTED_MODULE_1__.connect)(['reactionsToShow', 'showReactionIndex', 'archive'], {\n  setReactionInfoIndex: _actions_set_reaction_info_index__WEBPACK_IMPORTED_MODULE_4__.default\n})(props => {\n  const {\n    archive,\n    reactionsToShow,\n    showReactionIndex,\n    setReactionInfoIndex\n  } = props;\n  const reaction = reactionsToShow[showReactionIndex];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"reaction-info\"]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.reactions\n  }, reactionsToShow.map((reaction, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_5__.default)({\n      [_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.reaction]: true,\n      [_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.selected]: index === showReactionIndex\n    }),\n    key: reaction.emoji,\n    onClick: () => setReactionInfoIndex(index)\n  }, /*#__PURE__*/React.createElement(_Emoji_Emoji__WEBPACK_IMPORTED_MODULE_3__.ReactionEmoji, {\n    emoji: reaction.emojiIsCustom ? archive.emojis.get(reaction.emoji) : reaction.emoji\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.count\n  }, reaction.count)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"reaction-users\"]\n  }, reaction.users.map(userID => {\n    const user = archive.users.get(userID); // There's one archive where I forgot to save users that only exist through reactions\n\n    if (!user) return null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"reaction-user\"],\n      key: userID\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-avatar\"]\n    }, /*#__PURE__*/React.createElement(_Avatar_Avatar__WEBPACK_IMPORTED_MODULE_2__.default, {\n      user: user,\n      size: 32\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-nickname\"]\n    }, (0,_util_get_member_name__WEBPACK_IMPORTED_MODULE_6__.default)(userID, archive)), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.username\n    }, user.username, \"#\", user.discriminator));\n  })));\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReactionInfo);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1JlYWN0aW9uSW5mby9SZWFjdGlvbkluZm8uanN4P2ZlNzMiXSwibmFtZXMiOlsiUmVhY3Rpb25JbmZvIiwiY29ubmVjdCIsInNldFJlYWN0aW9uSW5mb0luZGV4IiwicHJvcHMiLCJhcmNoaXZlIiwicmVhY3Rpb25zVG9TaG93Iiwic2hvd1JlYWN0aW9uSW5kZXgiLCJyZWFjdGlvbiIsInN0eWxlIiwibWFwIiwiaW5kZXgiLCJjbGFzc05hbWVzIiwiZW1vamkiLCJlbW9qaUlzQ3VzdG9tIiwiZW1vamlzIiwiZ2V0IiwiY291bnQiLCJ1c2VycyIsInVzZXJJRCIsInVzZXIiLCJnZXRNZW1iZXJOYW1lIiwidXNlcm5hbWUiLCJkaXNjcmltaW5hdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUEsTUFBTUEsWUFBWSxHQUFHQyx3REFBTyxDQUFDLENBQUMsaUJBQUQsRUFBb0IsbUJBQXBCLEVBQXlDLFNBQXpDLENBQUQsRUFBc0Q7QUFBQ0Msc0JBQW9CQTtBQUFyQixDQUF0RCxDQUFQLENBQXFGQyxLQUFLLElBQUk7QUFDbEgsUUFBTTtBQUFDQyxXQUFEO0FBQVVDLG1CQUFWO0FBQTJCQyxxQkFBM0I7QUFBOENKO0FBQTlDLE1BQXNFQyxLQUE1RTtBQUNBLFFBQU1JLFFBQVEsR0FBR0YsZUFBZSxDQUFDQyxpQkFBRCxDQUFoQztBQUNBLHNCQUNDO0FBQUssYUFBUyxFQUFFRSxpRUFBSztBQUFyQixrQkFDQztBQUFLLGFBQVMsRUFBRUEsMERBQUs7QUFBckIsS0FDRUgsZUFBZSxDQUFDSSxHQUFoQixDQUFvQixDQUFDRixRQUFELEVBQVdHLEtBQVgsa0JBQ3BCO0FBQ0MsYUFBUyxFQUFFQywwREFBVSxDQUFDO0FBQ3JCLE9BQUNILHlEQUFELEdBQXFCLElBREE7QUFFckIsT0FBQ0EseURBQUQsR0FBcUJFLEtBQUssS0FBS0o7QUFGVixLQUFELENBRHRCO0FBS0MsT0FBRyxFQUFFQyxRQUFRLENBQUNLLEtBTGY7QUFNQyxXQUFPLEVBQUUsTUFBTVYsb0JBQW9CLENBQUNRLEtBQUQ7QUFOcEMsa0JBUUMsb0JBQUMsdURBQUQ7QUFBZSxTQUFLLEVBQUVILFFBQVEsQ0FBQ00sYUFBVCxHQUNyQlQsT0FBTyxDQUFDVSxNQUFSLENBQWVDLEdBQWYsQ0FBbUJSLFFBQVEsQ0FBQ0ssS0FBNUIsQ0FEcUIsR0FFckJMLFFBQVEsQ0FBQ0s7QUFGVixJQVJELGVBV0M7QUFBTSxhQUFTLEVBQUVKLHNEQUFLO0FBQXRCLEtBQWtDRCxRQUFRLENBQUNTLEtBQTNDLENBWEQsQ0FEQSxDQURGLENBREQsZUFrQkM7QUFBSyxhQUFTLEVBQUVSLGtFQUFLO0FBQXJCLEtBQ0VELFFBQVEsQ0FBQ1UsS0FBVCxDQUFlUixHQUFmLENBQW1CUyxNQUFNLElBQUk7QUFDN0IsVUFBTUMsSUFBSSxHQUFHZixPQUFPLENBQUNhLEtBQVIsQ0FBY0YsR0FBZCxDQUFrQkcsTUFBbEIsQ0FBYixDQUQ2QixDQUU3Qjs7QUFDQSxRQUFJLENBQUNDLElBQUwsRUFBVyxPQUFPLElBQVA7QUFFWCx3QkFDQztBQUNDLGVBQVMsRUFBRVgsaUVBRFo7QUFFQyxTQUFHLEVBQUVVO0FBRk4sb0JBSUM7QUFBSyxlQUFTLEVBQUVWLCtEQUFLO0FBQXJCLG9CQUNDLG9CQUFDLG1EQUFEO0FBQVEsVUFBSSxFQUFFVyxJQUFkO0FBQW9CLFVBQUksRUFBRTtBQUExQixNQURELENBSkQsZUFPQztBQUFLLGVBQVMsRUFBRVgsaUVBQUs7QUFBckIsT0FDRVksOERBQWEsQ0FBQ0YsTUFBRCxFQUFTZCxPQUFULENBRGYsQ0FQRCxlQVVDO0FBQUssZUFBUyxFQUFFSSx5REFBSztBQUFyQixPQUNFVyxJQUFJLENBQUNFLFFBRFAsT0FDa0JGLElBQUksQ0FBQ0csYUFEdkIsQ0FWRCxDQUREO0FBZ0JBLEdBckJBLENBREYsQ0FsQkQsQ0FERDtBQTZDQSxDQWhEb0IsQ0FBckI7QUFrREEsaUVBQWV0QixZQUFmIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9SZWFjdGlvbkluZm8vUmVhY3Rpb25JbmZvLmpzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlLnNjc3MnO1xuXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3VuaXN0b3JlL3ByZWFjdCc7XG5cbmltcG9ydCBBdmF0YXIgZnJvbSAnLi4vQXZhdGFyL0F2YXRhcic7XG5pbXBvcnQge1JlYWN0aW9uRW1vaml9IGZyb20gJy4uL0Vtb2ppL0Vtb2ppJztcblxuaW1wb3J0IHNldFJlYWN0aW9uSW5mb0luZGV4IGZyb20gJy4uLy4uL2FjdGlvbnMvc2V0LXJlYWN0aW9uLWluZm8taW5kZXgnO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICcuLi8uLi91dGlsL2NsYXNzLW5hbWVzJztcbmltcG9ydCBnZXRNZW1iZXJOYW1lIGZyb20gJy4uLy4uL3V0aWwvZ2V0LW1lbWJlci1uYW1lJztcblxuY29uc3QgUmVhY3Rpb25JbmZvID0gY29ubmVjdChbJ3JlYWN0aW9uc1RvU2hvdycsICdzaG93UmVhY3Rpb25JbmRleCcsICdhcmNoaXZlJ10sIHtzZXRSZWFjdGlvbkluZm9JbmRleH0pKHByb3BzID0+IHtcblx0Y29uc3Qge2FyY2hpdmUsIHJlYWN0aW9uc1RvU2hvdywgc2hvd1JlYWN0aW9uSW5kZXgsIHNldFJlYWN0aW9uSW5mb0luZGV4fSA9IHByb3BzO1xuXHRjb25zdCByZWFjdGlvbiA9IHJlYWN0aW9uc1RvU2hvd1tzaG93UmVhY3Rpb25JbmRleF07XG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydyZWFjdGlvbi1pbmZvJ119PlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydyZWFjdGlvbnMnXX0+XG5cdFx0XHRcdHtyZWFjdGlvbnNUb1Nob3cubWFwKChyZWFjdGlvbiwgaW5kZXgpID0+XG5cdFx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWVzKHtcblx0XHRcdFx0XHRcdFx0W3N0eWxlWydyZWFjdGlvbiddXTogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0W3N0eWxlWydzZWxlY3RlZCddXTogaW5kZXggPT09IHNob3dSZWFjdGlvbkluZGV4XG5cdFx0XHRcdFx0XHR9KX1cblx0XHRcdFx0XHRcdGtleT17cmVhY3Rpb24uZW1vaml9XG5cdFx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiBzZXRSZWFjdGlvbkluZm9JbmRleChpbmRleCl9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PFJlYWN0aW9uRW1vamkgZW1vamk9e3JlYWN0aW9uLmVtb2ppSXNDdXN0b20gP1xuXHRcdFx0XHRcdFx0XHRhcmNoaXZlLmVtb2ppcy5nZXQocmVhY3Rpb24uZW1vamkpIDpcblx0XHRcdFx0XHRcdFx0cmVhY3Rpb24uZW1vaml9IC8+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9e3N0eWxlWydjb3VudCddfT57cmVhY3Rpb24uY291bnR9PC9zcGFuPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQpfVxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ3JlYWN0aW9uLXVzZXJzJ119PlxuXHRcdFx0XHR7cmVhY3Rpb24udXNlcnMubWFwKHVzZXJJRCA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgdXNlciA9IGFyY2hpdmUudXNlcnMuZ2V0KHVzZXJJRCk7XG5cdFx0XHRcdFx0Ly8gVGhlcmUncyBvbmUgYXJjaGl2ZSB3aGVyZSBJIGZvcmdvdCB0byBzYXZlIHVzZXJzIHRoYXQgb25seSBleGlzdCB0aHJvdWdoIHJlYWN0aW9uc1xuXHRcdFx0XHRcdGlmICghdXNlcikgcmV0dXJuIG51bGw7XG5cblx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9e3N0eWxlWydyZWFjdGlvbi11c2VyJ119XG5cdFx0XHRcdFx0XHRcdGtleT17dXNlcklEfVxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ3VzZXItYXZhdGFyJ119PlxuXHRcdFx0XHRcdFx0XHRcdDxBdmF0YXIgdXNlcj17dXNlcn0gc2l6ZT17MzJ9Lz5cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZVsndXNlci1uaWNrbmFtZSddfT5cblx0XHRcdFx0XHRcdFx0XHR7Z2V0TWVtYmVyTmFtZSh1c2VySUQsIGFyY2hpdmUpfVxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWyd1c2VybmFtZSddfT5cblx0XHRcdFx0XHRcdFx0XHR7dXNlci51c2VybmFtZX0je3VzZXIuZGlzY3JpbWluYXRvcn1cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9KX1cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0aW9uSW5mbztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/ReactionInfo/ReactionInfo.jsx\n");

/***/ }),

/***/ "./components/Sidebar/FindPanel/FindPanel.jsx":
/*!****************************************************!*\
  !*** ./components/Sidebar/FindPanel/FindPanel.jsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/Sidebar/FindPanel/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _JumpableMessage_JumpableMessage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../JumpableMessage/JumpableMessage */ \"./components/JumpableMessage/JumpableMessage.jsx\");\n/* harmony import */ var _Toggle_Toggle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Toggle/Toggle */ \"./components/Toggle/Toggle.jsx\");\n/* harmony import */ var _util_class_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/class-names */ \"./util/class-names.js\");\n\n\n\n\n\n\n\nconst makeCheckboxSetter = (prop, target) => {\n  return event => {\n    target.setState({\n      [prop]: event.target.checked\n    });\n  };\n};\n\nconst makeInputSetter = (prop, target) => {\n  return event => {\n    target.setState({\n      [prop]: event.target.value\n    });\n  };\n};\n\nconst MESSAGES_PER_PAGE = 100;\n\nclass FindPanel extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsed: true,\n      filterByUser: false,\n      filterByText: false,\n      filterByChannel: false,\n      filterUser: null,\n      filterText: null,\n      filterChannel: null,\n      foundMessages: [],\n      foundMessageChannels: null,\n      pageNumber: -1,\n      numPages: 0\n    };\n    this.toggleFindPanel = this.toggleFindPanel.bind(this);\n    this.searchMessages = this.searchMessages.bind(this);\n    this.setFilterByText = makeCheckboxSetter('filterByText', this);\n    this.setFilterText = makeInputSetter('filterText', this);\n    this.setFilterByUser = makeCheckboxSetter('filterByUser', this);\n    this.setFilterUser = makeInputSetter('filterUser', this);\n    this.setFilterByChannel = makeCheckboxSetter('filterByChannel', this);\n    this.setFilterChannel = makeInputSetter('filterChannel', this);\n    this.prevPage = this.prevPage.bind(this);\n    this.nextPage = this.nextPage.bind(this);\n  }\n\n  toggleFindPanel() {\n    this.setState(state => {\n      return {\n        collapsed: !state.collapsed\n      };\n    });\n  }\n\n  prevPage() {\n    this.setState(state => {\n      if (state.pageNumber < 1) return {};\n      return {\n        pageNumber: state.pageNumber - 1\n      };\n    });\n  }\n\n  nextPage() {\n    this.setState(state => {\n      if (state.pageNumber >= state.numPages - 1) return {};\n      return {\n        pageNumber: state.pageNumber + 1\n      };\n    });\n  }\n\n  searchMessages() {\n    if (!this.props.archive) return;\n    const allMessages = []; // When we jump to a message we need to know what channel it belongs to. Since we search over all channels here,\n    // we may as well cache which channel each message belongs to so we don't have to loop over them all again.\n\n    const messageChannels = new Map();\n    const {\n      channels\n    } = this.props.archive;\n\n    for (const channel of channels.values()) {\n      if (!channel.messages || this.state.filterByChannel && this.state.filterChannel !== channel.id) continue;\n      let messages = channel.messages;\n\n      if (this.state.filterByText) {\n        const matchText = this.state.filterText.toLowerCase();\n        messages = messages.filter(message => message.content.toLowerCase().includes(matchText));\n      }\n\n      if (this.state.filterByUser) {\n        const userFilter = this.state.filterUser.toLowerCase();\n        const {\n          users\n        } = this.props.archive;\n        messages = messages.filter(message => {\n          if (message.authorID === userFilter) return true;\n          if (!users.has(message.authorID)) return false;\n          const memberUser = users.get(message.authorID);\n          if (typeof memberUser === 'undefined') return false;\n          return users.has(message.authorID) && (memberUser.username.toLowerCase() === userFilter || memberUser.tag.toLowerCase() === userFilter);\n        });\n      }\n\n      for (let i = 0; i < messages.length; i++) {\n        allMessages.push(messages[i]);\n        messageChannels.set(messages[i].id, channel.id);\n      }\n    }\n\n    this.setState({\n      foundMessages: allMessages.sort((a, b) => a.createdTimestamp - b.createdTimestamp),\n      foundMessageChannels: messageChannels,\n      pageNumber: 0,\n      numPages: Math.ceil(allMessages.length / MESSAGES_PER_PAGE)\n    });\n  }\n\n  render() {\n    const listID = Math.random().toString(36);\n    const userTagOptions = [];\n    const archiveChannelOptions = [];\n\n    if (this.props.archive) {\n      for (const user of this.props.archive.users.values()) {\n        userTagOptions.push( /*#__PURE__*/React.createElement(\"option\", {\n          key: user.id,\n          value: user.tag\n        }));\n      }\n\n      for (const channel of this.props.archive.channels.values()) {\n        if (channel.type !== 'text') continue;\n        archiveChannelOptions.push( /*#__PURE__*/React.createElement(\"option\", {\n          key: channel.id,\n          value: channel.id\n        }, channel.name));\n      }\n    }\n\n    const start = this.state.pageNumber * MESSAGES_PER_PAGE;\n    const end = start + MESSAGES_PER_PAGE;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"find-inner\"]\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"find-controls\"]\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"form-row\"]\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"form-label\"]\n    }, /*#__PURE__*/React.createElement(_Toggle_Toggle__WEBPACK_IMPORTED_MODULE_4__.default, {\n      onChange: this.setFilterByText,\n      checked: this.state.filterByText\n    }), /*#__PURE__*/React.createElement(\"span\", null, \" Contains text: \")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.setFilterText\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"form-row\"]\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"form-label\"]\n    }, /*#__PURE__*/React.createElement(_Toggle_Toggle__WEBPACK_IMPORTED_MODULE_4__.default, {\n      onChange: this.setFilterByUser,\n      checked: this.state.filterByUser\n    }), /*#__PURE__*/React.createElement(\"span\", null, \" From user (name or ID): \")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.setFilterUser,\n      list: listID\n    }), /*#__PURE__*/React.createElement(\"datalist\", {\n      id: listID\n    }, userTagOptions)), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"form-row\"]\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"form-label\"]\n    }, /*#__PURE__*/React.createElement(_Toggle_Toggle__WEBPACK_IMPORTED_MODULE_4__.default, {\n      type: \"checkbox\",\n      onChange: this.setFilterByChannel,\n      checked: this.state.filterByChannel\n    }), /*#__PURE__*/React.createElement(\"span\", null, \" In channel: \")), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      onChange: this.setFilterChannel\n    }, archiveChannelOptions)), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.searchMessages\n    }, \"Find\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"found-messages\"]\n    }, this.state.foundMessages.slice(start, end).map(message => /*#__PURE__*/React.createElement(_JumpableMessage_JumpableMessage__WEBPACK_IMPORTED_MODULE_3__.default, {\n      key: message.id,\n      message: message,\n      channelID: this.state.foundMessageChannels.get(message.id)\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.paginator\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_5__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"page-button\"]]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.prev]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.disabled]: this.state.pageNumber < 1\n      }),\n      onClick: this.prevPage\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"page-num\"]\n    }, \"Page \", this.state.pageNumber + 1, \" of \", this.state.numPages), /*#__PURE__*/React.createElement(\"div\", {\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_5__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default[\"page-button\"]]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.next]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.disabled]: this.state.pageNumber >= this.state.numPages - 1\n      }),\n      onClick: this.nextPage\n    })));\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)(['archive', 'currentChannel'])(FindPanel));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Sidebar/FindPanel/FindPanel.jsx\n");

/***/ }),

/***/ "./components/Sidebar/Sidebar.jsx":
/*!****************************************!*\
  !*** ./components/Sidebar/Sidebar.jsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/Sidebar/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _FindPanel_FindPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FindPanel/FindPanel */ \"./components/Sidebar/FindPanel/FindPanel.jsx\");\n/* harmony import */ var _UsersPanel_UsersPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UsersPanel/UsersPanel */ \"./components/Sidebar/UsersPanel/UsersPanel.jsx\");\n/* harmony import */ var _util_class_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/class-names */ \"./util/class-names.js\");\n\n\n\n\n\n\n\nclass Sidebar extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: 'users'\n    };\n    this.getActivePanel = this.getActivePanel.bind(this);\n    this.setUsersTab = this.setActiveTab.bind(this, 'users');\n    this.setFindTab = this.setActiveTab.bind(this, 'find');\n  }\n\n  getActivePanel() {\n    switch (this.state.activeTab) {\n      case 'users':\n        return /*#__PURE__*/React.createElement(_UsersPanel_UsersPanel__WEBPACK_IMPORTED_MODULE_4__.default, null);\n\n      case 'find':\n        return /*#__PURE__*/React.createElement(_FindPanel_FindPanel__WEBPACK_IMPORTED_MODULE_3__.default, null);\n\n      default:\n        return null;\n    }\n  }\n\n  setActiveTab(tab) {\n    this.setState({\n      activeTab: tab\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_5__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.sidebar]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.collapsed]: !this.props.showSidebar\n      })\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.tabs\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_5__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.tab]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.selected]: this.state.activeTab === 'users'\n      }),\n      onClick: this.setUsersTab\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${_style__WEBPACK_IMPORTED_MODULE_0__.default.icon} ${_style__WEBPACK_IMPORTED_MODULE_0__.default[\"icon-users\"]}`\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_5__.default)({\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.tab]: true,\n        [_style__WEBPACK_IMPORTED_MODULE_0__.default.selected]: this.state.activeTab === 'find'\n      }),\n      onClick: this.setFindTab\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${_style__WEBPACK_IMPORTED_MODULE_0__.default.icon} ${_style__WEBPACK_IMPORTED_MODULE_0__.default[\"icon-find\"]}`\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.panel\n    }, this.getActivePanel()));\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('showSidebar')(Sidebar));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhci5qc3g/ZDE4MSJdLCJuYW1lcyI6WyJTaWRlYmFyIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwiYWN0aXZlVGFiIiwiZ2V0QWN0aXZlUGFuZWwiLCJiaW5kIiwic2V0VXNlcnNUYWIiLCJzZXRBY3RpdmVUYWIiLCJzZXRGaW5kVGFiIiwidGFiIiwic2V0U3RhdGUiLCJyZW5kZXIiLCJjbGFzc05hbWVzIiwic3R5bGUiLCJzaG93U2lkZWJhciIsImNvbm5lY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUEsTUFBTUEsT0FBTixTQUFzQkMsNkNBQXRCLENBQWdDO0FBQy9CQyxhQUFXLENBQUVDLEtBQUYsRUFBUztBQUNuQixVQUFNQSxLQUFOO0FBRUEsU0FBS0MsS0FBTCxHQUFhO0FBQ1pDLGVBQVMsRUFBRTtBQURDLEtBQWI7QUFJQSxTQUFLQyxjQUFMLEdBQXNCLEtBQUtBLGNBQUwsQ0FBb0JDLElBQXBCLENBQXlCLElBQXpCLENBQXRCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFLQyxZQUFMLENBQWtCRixJQUFsQixDQUF1QixJQUF2QixFQUE2QixPQUE3QixDQUFuQjtBQUNBLFNBQUtHLFVBQUwsR0FBa0IsS0FBS0QsWUFBTCxDQUFrQkYsSUFBbEIsQ0FBdUIsSUFBdkIsRUFBNkIsTUFBN0IsQ0FBbEI7QUFDQTs7QUFFREQsZ0JBQWMsR0FBSTtBQUNqQixZQUFRLEtBQUtGLEtBQUwsQ0FBV0MsU0FBbkI7QUFDQyxXQUFLLE9BQUw7QUFBYyw0QkFBTyxvQkFBQywyREFBRCxPQUFQOztBQUNkLFdBQUssTUFBTDtBQUFhLDRCQUFPLG9CQUFDLHlEQUFELE9BQVA7O0FBQ2I7QUFBUyxlQUFPLElBQVA7QUFIVjtBQUtBOztBQUVESSxjQUFZLENBQUVFLEdBQUYsRUFBTztBQUNsQixTQUFLQyxRQUFMLENBQWM7QUFBQ1AsZUFBUyxFQUFFTTtBQUFaLEtBQWQ7QUFDQTs7QUFFREUsUUFBTSxHQUFJO0FBQ1Qsd0JBQ0M7QUFDQyxlQUFTLEVBQUVDLDBEQUFVLENBQUM7QUFDckIsU0FBQ0MsbURBQUQsR0FBb0IsSUFEQztBQUVyQixTQUFDQSxxREFBRCxHQUFzQixDQUFDLEtBQUtaLEtBQUwsQ0FBV2E7QUFGYixPQUFEO0FBRHRCLG9CQU1DO0FBQUssZUFBUyxFQUFFRCxnREFBSztBQUFyQixvQkFDQztBQUNDLGVBQVMsRUFBRUQsMERBQVUsQ0FBQztBQUNyQixTQUFDQywrQ0FBRCxHQUFnQixJQURLO0FBRXJCLFNBQUNBLG9EQUFELEdBQXFCLEtBQUtYLEtBQUwsQ0FBV0MsU0FBWCxLQUF5QjtBQUZ6QixPQUFELENBRHRCO0FBS0MsYUFBTyxFQUFFLEtBQUtHO0FBTGYsb0JBT0M7QUFBSyxlQUFTLEVBQUcsR0FBRU8sZ0RBQWMsSUFBR0EseURBQW9CO0FBQXhELE1BUEQsQ0FERCxlQVVDO0FBQ0MsZUFBUyxFQUFFRCwwREFBVSxDQUFDO0FBQ3JCLFNBQUNDLCtDQUFELEdBQWdCLElBREs7QUFFckIsU0FBQ0Esb0RBQUQsR0FBcUIsS0FBS1gsS0FBTCxDQUFXQyxTQUFYLEtBQXlCO0FBRnpCLE9BQUQsQ0FEdEI7QUFLQyxhQUFPLEVBQUUsS0FBS0s7QUFMZixvQkFPQztBQUFLLGVBQVMsRUFBRyxHQUFFSyxnREFBYyxJQUFHQSx3REFBbUI7QUFBdkQsTUFQRCxDQVZELENBTkQsZUEwQkM7QUFBSyxlQUFTLEVBQUVBLGlEQUFLO0FBQXJCLE9BQ0UsS0FBS1QsY0FBTCxFQURGLENBMUJELENBREQ7QUFnQ0E7O0FBMUQ4Qjs7QUE2RGhDLGlFQUFlVyx3REFBTyxDQUFDLGFBQUQsQ0FBUCxDQUF1QmpCLE9BQXZCLENBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhci5qc3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5cbmltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHtjb25uZWN0fSBmcm9tICd1bmlzdG9yZS9wcmVhY3QnO1xuXG5pbXBvcnQgRmluZFBhbmVsIGZyb20gJy4vRmluZFBhbmVsL0ZpbmRQYW5lbCc7XG5pbXBvcnQgVXNlcnNQYW5lbCBmcm9tICcuL1VzZXJzUGFuZWwvVXNlcnNQYW5lbCc7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJy4uLy4uL3V0aWwvY2xhc3MtbmFtZXMnO1xuXG5jbGFzcyBTaWRlYmFyIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKHByb3BzKSB7XG5cdFx0c3VwZXIocHJvcHMpO1xuXG5cdFx0dGhpcy5zdGF0ZSA9IHtcblx0XHRcdGFjdGl2ZVRhYjogJ3VzZXJzJ1xuXHRcdH07XG5cblx0XHR0aGlzLmdldEFjdGl2ZVBhbmVsID0gdGhpcy5nZXRBY3RpdmVQYW5lbC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuc2V0VXNlcnNUYWIgPSB0aGlzLnNldEFjdGl2ZVRhYi5iaW5kKHRoaXMsICd1c2VycycpO1xuXHRcdHRoaXMuc2V0RmluZFRhYiA9IHRoaXMuc2V0QWN0aXZlVGFiLmJpbmQodGhpcywgJ2ZpbmQnKTtcblx0fVxuXG5cdGdldEFjdGl2ZVBhbmVsICgpIHtcblx0XHRzd2l0Y2ggKHRoaXMuc3RhdGUuYWN0aXZlVGFiKSB7XG5cdFx0XHRjYXNlICd1c2Vycyc6IHJldHVybiA8VXNlcnNQYW5lbCAvPjtcblx0XHRcdGNhc2UgJ2ZpbmQnOiByZXR1cm4gPEZpbmRQYW5lbCAvPjtcblx0XHRcdGRlZmF1bHQ6IHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHNldEFjdGl2ZVRhYiAodGFiKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7YWN0aXZlVGFiOiB0YWJ9KTtcblx0fVxuXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXZcblx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWVzKHtcblx0XHRcdFx0XHRbc3R5bGVbJ3NpZGViYXInXV06IHRydWUsXG5cdFx0XHRcdFx0W3N0eWxlWydjb2xsYXBzZWQnXV06ICF0aGlzLnByb3BzLnNob3dTaWRlYmFyXG5cdFx0XHRcdH0pfVxuXHRcdFx0PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ3RhYnMnXX0+XG5cdFx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWVzKHtcblx0XHRcdFx0XHRcdFx0W3N0eWxlWyd0YWInXV06IHRydWUsXG5cdFx0XHRcdFx0XHRcdFtzdHlsZVsnc2VsZWN0ZWQnXV06IHRoaXMuc3RhdGUuYWN0aXZlVGFiID09PSAndXNlcnMnXG5cdFx0XHRcdFx0XHR9KX1cblx0XHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMuc2V0VXNlcnNUYWJ9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake3N0eWxlWydpY29uJ119ICR7c3R5bGVbJ2ljb24tdXNlcnMnXX1gfT48L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZXMoe1xuXHRcdFx0XHRcdFx0XHRbc3R5bGVbJ3RhYiddXTogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0W3N0eWxlWydzZWxlY3RlZCddXTogdGhpcy5zdGF0ZS5hY3RpdmVUYWIgPT09ICdmaW5kJ1xuXHRcdFx0XHRcdFx0fSl9XG5cdFx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnNldEZpbmRUYWJ9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake3N0eWxlWydpY29uJ119ICR7c3R5bGVbJ2ljb24tZmluZCddfWB9PjwvZGl2PlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydwYW5lbCddfT5cblx0XHRcdFx0XHR7dGhpcy5nZXRBY3RpdmVQYW5lbCgpfVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCgnc2hvd1NpZGViYXInKShTaWRlYmFyKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Sidebar/Sidebar.jsx\n");

/***/ }),

/***/ "./components/Sidebar/UsersPanel/UsersPanel.jsx":
/*!******************************************************!*\
  !*** ./components/Sidebar/UsersPanel/UsersPanel.jsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/Sidebar/UsersPanel/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _Avatar_Avatar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Avatar/Avatar */ \"./components/Avatar/Avatar.jsx\");\n/* harmony import */ var _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../actions/set-user-info-id */ \"./actions/set-user-info-id.js\");\n/* harmony import */ var _util_get_member_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/get-member-name */ \"./util/get-member-name.js\");\n/* harmony import */ var _util_member_role_color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/member-role-color */ \"./util/member-role-color.js\");\n\n\n\n\n\n\n\nconst UserListing = (0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)([], {\n  setUserInfoID: _actions_set_user_info_id__WEBPACK_IMPORTED_MODULE_4__.default\n})(props => {\n  const {\n    memberID,\n    archive,\n    isOwner\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default.user,\n    onClick: () => props.setUserInfoID(memberID)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"user-avatar\"]\n  }, /*#__PURE__*/React.createElement(_Avatar_Avatar__WEBPACK_IMPORTED_MODULE_3__.default, {\n    user: archive.users.get(memberID),\n    size: 32\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default.username,\n    style: `color: ${(0,_util_member_role_color__WEBPACK_IMPORTED_MODULE_6__.default)(memberID, archive)}`\n  }, (0,_util_get_member_name__WEBPACK_IMPORTED_MODULE_5__.default)(memberID, archive)), isOwner ? /*#__PURE__*/React.createElement(\"div\", {\n    className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"icon-owner\"]\n  }) : null);\n});\n\nclass UsersPanel extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      archive\n    } = this.props;\n    if (archive === null) return null;\n    let panelInner;\n\n    if (archive.type === 'server') {\n      const server = archive.data;\n      const roleGroups = [];\n      const roleMap = new Map();\n\n      for (const member of server.members.values()) {\n        const highestRole = member.roles.reduce((prevRole, curRole) => prevRole && prevRole.position > curRole.position ? prevRole : curRole, null);\n\n        if (roleMap.has(highestRole)) {\n          roleMap.get(highestRole).push(member);\n        } else {\n          roleMap.set(highestRole, [member]);\n        }\n      }\n\n      for (const [role, members] of roleMap) {\n        members.sort((a, b) => a.name < b.name ? 1 : -1);\n        roleGroups.push({\n          role,\n          members\n        });\n      }\n\n      roleGroups.sort((a, b) => b.role.position - a.role.position);\n      const nonMembers = [];\n\n      for (const user of archive.users.values()) {\n        if (server.members.has(user.id)) continue;\n        nonMembers.push(user);\n      }\n\n      const roleGroupsElems = roleGroups.map(({\n        role,\n        members\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"role-group\"],\n        key: role ? role.id : null\n      }, role ? /*#__PURE__*/React.createElement(\"div\", {\n        className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"role-header\"]\n      }, role.name) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"role-members\"]\n      }, members.map(member => /*#__PURE__*/React.createElement(UserListing, {\n        memberID: member.id,\n        archive: archive,\n        key: member.id,\n        isOwner: server.owner === member.id\n      })))));\n      panelInner = nonMembers.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"section\", null, /*#__PURE__*/React.createElement(\"header\", null, \"Current members\"), /*#__PURE__*/React.createElement(\"div\", null, roleGroupsElems)), /*#__PURE__*/React.createElement(\"section\", null, /*#__PURE__*/React.createElement(\"header\", null, \"Past users\"), /*#__PURE__*/React.createElement(\"div\", null, nonMembers.map(user => /*#__PURE__*/React.createElement(UserListing, {\n        memberID: user.id,\n        archive: archive,\n        key: user.id\n      }))))) : roleGroupsElems;\n    } else {\n      const channel = archive.data;\n      if (!channel.recipients) return null;\n      panelInner = /*#__PURE__*/React.createElement(\"div\", null, channel.recipients.map(id => /*#__PURE__*/React.createElement(UserListing, {\n        memberID: id,\n        archive: archive,\n        key: id,\n        isOwner: channel.owner === id\n      })));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default[\"users-list\"]\n    }, panelInner);\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,unistore_preact__WEBPACK_IMPORTED_MODULE_2__.connect)('archive')(UsersPanel));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Sidebar/UsersPanel/UsersPanel.jsx\n");

/***/ }),

/***/ "./components/Toggle/Toggle.jsx":
/*!**************************************!*\
  !*** ./components/Toggle/Toggle.jsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./components/Toggle/style.scss\");\n/* harmony import */ var _util_class_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/class-names */ \"./util/class-names.js\");\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\nconst Toggle = ({\n  checked,\n  ...props\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n  type: \"checkbox\",\n  className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"hidden-checkbox\"],\n  checked: checked\n}, props)), /*#__PURE__*/React.createElement(\"div\", {\n  className: (0,_util_class_names__WEBPACK_IMPORTED_MODULE_1__.default)({\n    [_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.toggle]: true,\n    [_style_scss__WEBPACK_IMPORTED_MODULE_0__.default.checked]: checked\n  })\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.slider\n})));\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Toggle);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1RvZ2dsZS9Ub2dnbGUuanN4Pzk2YmUiXSwibmFtZXMiOlsiVG9nZ2xlIiwiY2hlY2tlZCIsInByb3BzIiwic3R5bGUiLCJjbGFzc05hbWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBRUE7O0FBRUEsTUFBTUEsTUFBTSxHQUFHLENBQUM7QUFBQ0MsU0FBRDtBQUFVLEtBQUdDO0FBQWIsQ0FBRCxrQkFDZCx1REFDQztBQUFPLE1BQUksRUFBQyxVQUFaO0FBQXVCLFdBQVMsRUFBRUMsbUVBQWxDO0FBQTRELFNBQU8sRUFBRUY7QUFBckUsR0FBa0ZDLEtBQWxGLEVBREQsZUFFQztBQUFLLFdBQVMsRUFBRUUsMERBQVUsQ0FBQztBQUFDLEtBQUNELHVEQUFELEdBQW1CLElBQXBCO0FBQTBCLEtBQUNBLHdEQUFELEdBQW9CRjtBQUE5QyxHQUFEO0FBQTFCLGdCQUNDO0FBQUssV0FBUyxFQUFFRSx1REFBSztBQUFyQixFQURELENBRkQsQ0FERDs7QUFTQSxpRUFBZUgsTUFBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvVG9nZ2xlL1RvZ2dsZS5qc3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS5zY3NzJztcblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnLi4vLi4vdXRpbC9jbGFzcy1uYW1lcyc7XG5cbmNvbnN0IFRvZ2dsZSA9ICh7Y2hlY2tlZCwgLi4ucHJvcHN9KSA9PiAoXG5cdDw+XG5cdFx0PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzTmFtZT17c3R5bGVbJ2hpZGRlbi1jaGVja2JveCddfSBjaGVja2VkPXtjaGVja2VkfSB7Li4ucHJvcHN9IC8+XG5cdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoe1tzdHlsZVsndG9nZ2xlJ11dOiB0cnVlLCBbc3R5bGVbJ2NoZWNrZWQnXV06IGNoZWNrZWR9KX0+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ3NsaWRlciddfSAvPlxuXHRcdDwvZGl2PlxuXHQ8Lz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Toggle/Toggle.jsx\n");

/***/ }),

/***/ "./components/Tooltip/Tooltip.jsx":
/*!****************************************!*\
  !*** ./components/Tooltip/Tooltip.jsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style */ \"./components/Tooltip/style.scss\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"../node_modules/preact/dist/preact.module.js\");\n\n\n\nclass Tooltip extends preact__WEBPACK_IMPORTED_MODULE_1__.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: _style__WEBPACK_IMPORTED_MODULE_0__.default.tooltip + (this.props.className ? ` ${this.props.className}` : ' ' + _style__WEBPACK_IMPORTED_MODULE_0__.default[this.props.side || 'right'])\n    }, this.props.children);\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Tooltip);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1Rvb2x0aXAvVG9vbHRpcC5qc3g/Njk5YiJdLCJuYW1lcyI6WyJUb29sdGlwIiwiQ29tcG9uZW50IiwicmVuZGVyIiwic3R5bGUiLCJwcm9wcyIsImNsYXNzTmFtZSIsInNpZGUiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQTs7QUFFQSxNQUFNQSxPQUFOLFNBQXNCQyw2Q0FBdEIsQ0FBZ0M7QUFDL0JDLFFBQU0sR0FBSTtBQUNULHdCQUNDO0FBQ0MsZUFBUyxFQUFFQyxtREFBQSxJQUNULEtBQUtDLEtBQUwsQ0FBV0MsU0FBWCxHQUF3QixJQUFHLEtBQUtELEtBQUwsQ0FBV0MsU0FBVSxFQUFoRCxHQUFvRCxNQUNyREYsMkNBQUssQ0FBQyxLQUFLQyxLQUFMLENBQVdFLElBQVgsSUFBbUIsT0FBcEIsQ0FGSztBQURaLE9BS0UsS0FBS0YsS0FBTCxDQUFXRyxRQUxiLENBREQ7QUFTQTs7QUFYOEI7O0FBY2hDLGlFQUFlUCxPQUFmIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9Ub29sdGlwL1Rvb2x0aXAuanN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuXG5pbXBvcnQge0NvbXBvbmVudH0gZnJvbSAncHJlYWN0JztcblxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIENvbXBvbmVudCB7XG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXZcblx0XHRcdFx0Y2xhc3NOYW1lPXtzdHlsZVsndG9vbHRpcCddICtcblx0XHRcdFx0XHQodGhpcy5wcm9wcy5jbGFzc05hbWUgPyBgICR7dGhpcy5wcm9wcy5jbGFzc05hbWV9YCA6ICcgJyArXG5cdFx0XHRcdFx0c3R5bGVbdGhpcy5wcm9wcy5zaWRlIHx8ICdyaWdodCddKX1cblx0XHRcdD5cblx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Tooltip/Tooltip.jsx\n");

/***/ }),

/***/ "./components/UserInfo/UserInfo.jsx":
/*!******************************************!*\
  !*** ./components/UserInfo/UserInfo.jsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./components/UserInfo/style.scss\");\n/* harmony import */ var unistore_preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unistore/preact */ \"../node_modules/unistore/preact.js\");\n/* harmony import */ var _Avatar_Avatar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Avatar/Avatar */ \"./components/Avatar/Avatar.jsx\");\n/* harmony import */ var _util_format_timestamp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/format-timestamp */ \"./util/format-timestamp.js\");\n\n\n\n\n\nconst UserInfo = props => {\n  const user = props.archive.users.get(props.userID);\n  const member = props.archive.type === 'server' && props.archive.data.members.get(props.userID);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-infobox\"]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.avatar\n  }, /*#__PURE__*/React.createElement(_Avatar_Avatar__WEBPACK_IMPORTED_MODULE_2__.default, {\n    user: user,\n    userID: props.userID,\n    size: 128\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.details\n  }, /*#__PURE__*/React.createElement(\"section\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-tag\"]\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-name\"]\n  }, user ? user.username : 'Unknown user'), /*#__PURE__*/React.createElement(\"span\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-discriminator\"]\n  }, \"#\", user ? user.discriminator : '0000')), /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-id\"]\n  }, props.userID)), member ? /*#__PURE__*/React.createElement(\"section\", null, member.nickname === null ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-nickname\"]\n  }, member.nickname), member.joinedTimestamp === null ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"user-joined-timestamp\"]\n  }, \"Joined this server \", (0,_util_format_timestamp__WEBPACK_IMPORTED_MODULE_3__.default)(member.joinedTimestamp)), member.roles.filter(role => role.name !== '@everyone').map(role => /*#__PURE__*/React.createElement(\"div\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default.role,\n    key: role.id,\n    style: role.color === '#000000' ? null : `border-color: ${role.color}`\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"role-color\"],\n    style: role.color === '#000000' ? null : `background-color: ${role.color}`\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: _style_scss__WEBPACK_IMPORTED_MODULE_0__.default[\"role-name\"]\n  }, role.name)))) : null));\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,unistore_preact__WEBPACK_IMPORTED_MODULE_1__.connect)('archive')(UserInfo));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1VzZXJJbmZvL1VzZXJJbmZvLmpzeD8wYWE2Il0sIm5hbWVzIjpbIlVzZXJJbmZvIiwicHJvcHMiLCJ1c2VyIiwiYXJjaGl2ZSIsInVzZXJzIiwiZ2V0IiwidXNlcklEIiwibWVtYmVyIiwidHlwZSIsImRhdGEiLCJtZW1iZXJzIiwic3R5bGUiLCJ1c2VybmFtZSIsImRpc2NyaW1pbmF0b3IiLCJuaWNrbmFtZSIsImpvaW5lZFRpbWVzdGFtcCIsImZvcm1hdFRpbWVzdGFtcCIsInJvbGVzIiwiZmlsdGVyIiwicm9sZSIsIm5hbWUiLCJtYXAiLCJpZCIsImNvbG9yIiwiY29ubmVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUVBO0FBRUE7QUFFQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUdDLEtBQUssSUFBSTtBQUN6QixRQUFNQyxJQUFJLEdBQUdELEtBQUssQ0FBQ0UsT0FBTixDQUFjQyxLQUFkLENBQW9CQyxHQUFwQixDQUF3QkosS0FBSyxDQUFDSyxNQUE5QixDQUFiO0FBQ0EsUUFBTUMsTUFBTSxHQUFHTixLQUFLLENBQUNFLE9BQU4sQ0FBY0ssSUFBZCxLQUF1QixRQUF2QixJQUFtQ1AsS0FBSyxDQUFDRSxPQUFOLENBQWNNLElBQWQsQ0FBbUJDLE9BQW5CLENBQTJCTCxHQUEzQixDQUErQkosS0FBSyxDQUFDSyxNQUFyQyxDQUFsRDtBQUNBLHNCQUNDO0FBQUssYUFBUyxFQUFFSyxnRUFBSztBQUFyQixrQkFDQztBQUFLLGFBQVMsRUFBRUEsdURBQUs7QUFBckIsa0JBQ0Msb0JBQUMsbURBQUQ7QUFBUSxRQUFJLEVBQUVULElBQWQ7QUFBb0IsVUFBTSxFQUFFRCxLQUFLLENBQUNLLE1BQWxDO0FBQTBDLFFBQUksRUFBRTtBQUFoRCxJQURELENBREQsZUFJQztBQUFLLGFBQVMsRUFBRUssd0RBQUs7QUFBckIsa0JBQ0Msa0RBQ0M7QUFBSyxhQUFTLEVBQUVBLDREQUFLO0FBQXJCLGtCQUNDO0FBQU0sYUFBUyxFQUFFQSw2REFBSztBQUF0QixLQUFzQ1QsSUFBSSxHQUFHQSxJQUFJLENBQUNVLFFBQVIsR0FBbUIsY0FBN0QsQ0FERCxlQUVDO0FBQU0sYUFBUyxFQUFFRCxzRUFBSztBQUF0QixVQUFnRFQsSUFBSSxHQUFHQSxJQUFJLENBQUNXLGFBQVIsR0FBd0IsTUFBNUUsQ0FGRCxDQURELGVBS0M7QUFBSyxhQUFTLEVBQUVGLDJEQUFLO0FBQXJCLEtBQW1DVixLQUFLLENBQUNLLE1BQXpDLENBTEQsQ0FERCxFQVNFQyxNQUFNLGdCQUNMLHFDQUVFQSxNQUFNLENBQUNPLFFBQVAsS0FBb0IsSUFBcEIsR0FDQyxJQURELGdCQUVDO0FBQUssYUFBUyxFQUFFSCxpRUFBSztBQUFyQixLQUF5Q0osTUFBTSxDQUFDTyxRQUFoRCxDQUpILEVBT0VQLE1BQU0sQ0FBQ1EsZUFBUCxLQUEyQixJQUEzQixHQUNDLElBREQsZ0JBRUM7QUFDQyxhQUFTLEVBQUVKLHlFQUFLO0FBRGpCLDRCQUVxQkssK0RBQWUsQ0FBQ1QsTUFBTSxDQUFDUSxlQUFSLENBRnBDLENBVEgsRUFjRVIsTUFBTSxDQUFDVSxLQUFQLENBQWFDLE1BQWIsQ0FBb0JDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUFMLEtBQWMsV0FBMUMsRUFBdURDLEdBQXZELENBQTJERixJQUFJLGlCQUM5RDtBQUFLLGFBQVMsRUFBRVIscURBQWhCO0FBQStCLE9BQUcsRUFBRVEsSUFBSSxDQUFDRyxFQUF6QztBQUE2QyxTQUFLLEVBQUVILElBQUksQ0FBQ0ksS0FBTCxLQUFlLFNBQWYsR0FBMkIsSUFBM0IsR0FBbUMsaUJBQWdCSixJQUFJLENBQUNJLEtBQU07QUFBbEgsa0JBQ0M7QUFBTSxhQUFTLEVBQUVaLDhEQUFqQjtBQUFzQyxTQUFLLEVBQUVRLElBQUksQ0FBQ0ksS0FBTCxLQUFlLFNBQWYsR0FBMkIsSUFBM0IsR0FBbUMscUJBQW9CSixJQUFJLENBQUNJLEtBQU07QUFBL0csSUFERCxlQUVDO0FBQU0sYUFBUyxFQUFFWiw2REFBSztBQUF0QixLQUFzQ1EsSUFBSSxDQUFDQyxJQUEzQyxDQUZELENBREQsQ0FkRixDQURLLEdBdUJMLElBaENILENBSkQsQ0FERDtBQTBDQSxDQTdDRDs7QUErQ0EsaUVBQWVJLHdEQUFPLENBQUMsU0FBRCxDQUFQLENBQW1CeEIsUUFBbkIsQ0FBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvVXNlckluZm8vVXNlckluZm8uanN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUuc2Nzcyc7XG5cbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAndW5pc3RvcmUvcHJlYWN0JztcblxuaW1wb3J0IEF2YXRhciBmcm9tICcuLi9BdmF0YXIvQXZhdGFyJztcblxuaW1wb3J0IGZvcm1hdFRpbWVzdGFtcCBmcm9tICcuLi8uLi91dGlsL2Zvcm1hdC10aW1lc3RhbXAnO1xuXG5jb25zdCBVc2VySW5mbyA9IHByb3BzID0+IHtcblx0Y29uc3QgdXNlciA9IHByb3BzLmFyY2hpdmUudXNlcnMuZ2V0KHByb3BzLnVzZXJJRCk7XG5cdGNvbnN0IG1lbWJlciA9IHByb3BzLmFyY2hpdmUudHlwZSA9PT0gJ3NlcnZlcicgJiYgcHJvcHMuYXJjaGl2ZS5kYXRhLm1lbWJlcnMuZ2V0KHByb3BzLnVzZXJJRCk7XG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWyd1c2VyLWluZm9ib3gnXX0+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ2F2YXRhciddfT5cblx0XHRcdFx0PEF2YXRhciB1c2VyPXt1c2VyfSB1c2VySUQ9e3Byb3BzLnVzZXJJRH0gc2l6ZT17MTI4fS8+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZVsnZGV0YWlscyddfT5cblx0XHRcdFx0PHNlY3Rpb24+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWyd1c2VyLXRhZyddfT5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17c3R5bGVbJ3VzZXItbmFtZSddfT57dXNlciA/IHVzZXIudXNlcm5hbWUgOiAnVW5rbm93biB1c2VyJ308L3NwYW4+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9e3N0eWxlWyd1c2VyLWRpc2NyaW1pbmF0b3InXX0+I3t1c2VyID8gdXNlci5kaXNjcmltaW5hdG9yIDogJzAwMDAnfTwvc3Bhbj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGVbJ3VzZXItaWQnXX0+e3Byb3BzLnVzZXJJRH08L2Rpdj5cblx0XHRcdFx0PC9zZWN0aW9uPlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bWVtYmVyID9cblx0XHRcdFx0XHRcdDxzZWN0aW9uPlxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bWVtYmVyLm5pY2tuYW1lID09PSBudWxsID9cblx0XHRcdFx0XHRcdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWyd1c2VyLW5pY2tuYW1lJ119PnttZW1iZXIubmlja25hbWV9PC9kaXY+XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdG1lbWJlci5qb2luZWRUaW1lc3RhbXAgPT09IG51bGwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bnVsbCA6XG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT17c3R5bGVbJ3VzZXItam9pbmVkLXRpbWVzdGFtcCddfVxuXHRcdFx0XHRcdFx0XHRcdFx0PkpvaW5lZCB0aGlzIHNlcnZlciB7Zm9ybWF0VGltZXN0YW1wKG1lbWJlci5qb2luZWRUaW1lc3RhbXApfTwvZGl2PlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRtZW1iZXIucm9sZXMuZmlsdGVyKHJvbGUgPT4gcm9sZS5uYW1lICE9PSAnQGV2ZXJ5b25lJykubWFwKHJvbGUgPT4gKFxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlWydyb2xlJ119IGtleT17cm9sZS5pZH0gc3R5bGU9e3JvbGUuY29sb3IgPT09ICcjMDAwMDAwJyA/IG51bGwgOiBgYm9yZGVyLWNvbG9yOiAke3JvbGUuY29sb3J9YH0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17c3R5bGVbJ3JvbGUtY29sb3InXX0gc3R5bGU9e3JvbGUuY29sb3IgPT09ICcjMDAwMDAwJyA/IG51bGwgOiBgYmFja2dyb3VuZC1jb2xvcjogJHtyb2xlLmNvbG9yfWB9Pjwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtzdHlsZVsncm9sZS1uYW1lJ119Pntyb2xlLm5hbWV9PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0KSlcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0PC9zZWN0aW9uPiA6XG5cdFx0XHRcdFx0XHRudWxsXG5cdFx0XHRcdH1cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCgnYXJjaGl2ZScpKFVzZXJJbmZvKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/UserInfo/UserInfo.jsx\n");

/***/ }),

/***/ "./deserialization/deserialization.js":
/*!********************************************!*\
  !*** ./deserialization/deserialization.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var unzipit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unzipit */ \"../node_modules/unzipit/dist/unzipit.module.js\");\n/* harmony import */ var _deserialize_archivebot_archive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deserialize-archivebot-archive */ \"./deserialization/deserialize-archivebot-archive.js\");\n/* harmony import */ var _deserialize_archivebot_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./deserialize-archivebot-server */ \"./deserialization/deserialize-archivebot-server.js\");\n/* harmony import */ var _deserialize_toonmemebot_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deserialize-toonmemebot-server */ \"./deserialization/deserialize-toonmemebot-server.js\");\n/* harmony import */ var _deserialize_toonmemebot_channel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deserialize-toonmemebot-channel */ \"./deserialization/deserialize-toonmemebot-channel.js\");\n\n\n\n\n // Try to determine archive version.\n// Current known versions:\n// 'toonmemebot-channel-snapshot': ToonMemeBot single-channel snapshot\n// 'toonmemebot-server-snapshot': ToonMemeBot server snapshot\n// 'archivebot-v1': ArchiveBot server snapshot v1\n// 'archivebot-v2': ArchiveBot server snapshot v2 (v1 but with version tag)\n\nconst _getArchiveVersion = parsed => {\n  // If the archive gives us a version string, use that\n  if (parsed.version) {\n    return parsed.version;\n  } // ToonMemeBot single-channel snapshots are arrays of JSON strings\n\n\n  if (parsed instanceof Array) {\n    return 'toonmemebot-channel-snapshot';\n  } // Both ArchiveBot archives and ToonMemeBot snapshots contain these properties\n\n\n  if (parsed.channels && parsed.members && parsed.emojis) {\n    // ArchiveBot archives contain server ID, ToonMemeBot snapshots do not\n    if (parsed.id) {\n      return 'archivebot-v1';\n    } else {\n      return 'toonmemebot-server-snapshot';\n    }\n  }\n\n  return null;\n};\n/**\n * Deserialize archive from a file\n * @param {File} file\n */\n\n\nconst deserializeArchiveFile = async file => {\n  const reader = new FileReader();\n  const buffer = await new Promise((resolve, reject) => {\n    reader.addEventListener('load', () => {\n      resolve(reader.result);\n    });\n    reader.addEventListener('error', () => {\n      reject(reader.error);\n    });\n    reader.readAsArrayBuffer(file);\n  });\n  const dv = new DataView(buffer);\n  let type, jsonText;\n  let zipData = null;\n\n  if ( // zip file signature\n  dv.getInt8(0) === 0x50 && dv.getInt8(1) === 0x4b && dv.getInt8(2) === 0x03 && dv.getInt8(3) === 0x04) {\n    const zip = await (0,unzipit__WEBPACK_IMPORTED_MODULE_0__.unzip)(buffer);\n    const {\n      entries\n    } = zip;\n    const files = Object.values(entries);\n\n    if (files.length === 1) {\n      type = 'text';\n      jsonText = await files[0].text();\n    } else {\n      if (Object.prototype.hasOwnProperty.call(entries, 'archive.json')) {\n        type = 'zip';\n        jsonText = await entries['archive.json'].text();\n        zipData = zip;\n      } else {\n        throw 'Invalid .zip archive';\n      }\n    }\n  } else {\n    type = 'text';\n    jsonText = new TextDecoder().decode(buffer);\n  }\n\n  const json = JSON.parse(jsonText);\n\n  const version = _getArchiveVersion(json);\n\n  switch (version) {\n    case 'archivebot-v1':\n    case 'archivebot-v2':\n    case 'archivebot-v3':\n    case 'archivebot-v4':\n    case 'archivebot-v5':\n    case 'archivebot-v6':\n    case 'archivebot-v7':\n    case 'archivebot-v8':\n      {\n        return (0,_deserialize_archivebot_server__WEBPACK_IMPORTED_MODULE_2__.default)(json);\n      }\n\n    case 'archivebot-v9':\n    case 'archivebot-v10':\n    case 'archivebot-v11':\n      {\n        return (0,_deserialize_archivebot_archive__WEBPACK_IMPORTED_MODULE_1__.default)(json, type === 'zip' ? zipData : null);\n      }\n\n    case 'toonmemebot-server-snapshot':\n      {\n        return (0,_deserialize_toonmemebot_server__WEBPACK_IMPORTED_MODULE_3__.default)(json);\n      }\n\n    case 'toonmemebot-channel-snapshot':\n      {\n        return (0,_deserialize_toonmemebot_channel__WEBPACK_IMPORTED_MODULE_4__.default)(json);\n      }\n\n    default:\n      throw new Error(`Unknown archive version ${version}`);\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (deserializeArchiveFile);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./deserialization/deserialization.js\n");

/***/ }),

/***/ "./deserialization/deserialize-archivebot-archive.js":
/*!***********************************************************!*\
  !*** ./deserialization/deserialize-archivebot-archive.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./primitives */ \"./deserialization/primitives.js\");\n\n\nconst deserializeChannel = channel => {\n  const parsedChannel = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Channel();\n  parsedChannel.id = channel.id;\n  parsedChannel.name = channel.name;\n  parsedChannel.parentID = channel.parentID || null; // *not* explicitly null if unset\n\n  parsedChannel.nsfw = channel.nsfw === true; // sometimes is null, so explicitly cast to boolean\n\n  parsedChannel.topic = channel.topic;\n  parsedChannel.position = channel.position;\n  parsedChannel.type = channel.type;\n  let pinnedMessageIDs;\n  const hasPinnedMessages = ('pinnedMessages' in channel);\n\n  if (hasPinnedMessages) {\n    parsedChannel.pinnedMessages = [];\n    pinnedMessageIDs = new Set();\n\n    for (const pinnedMessageID of channel.pinnedMessages) {\n      pinnedMessageIDs.add(pinnedMessageID);\n    }\n  }\n\n  if (channel.hasOwnProperty('messages')) {\n    const channelMessages = parsedChannel.messages; // possible tight loop?\n\n    for (let i = 0; i < channel.messages.length; i++) {\n      const message = channel.messages[i];\n      const parsedMessage = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Message();\n      parsedMessage.id = message.id;\n      parsedMessage.authorID = message.author;\n      parsedMessage.content = message.content;\n      parsedMessage.createdTimestamp = message.createdTimestamp;\n      parsedMessage.editedTimestamp = message.editedTimestamp || null;\n      parsedMessage.type = message.type || 'DEFAULT'; // if DEFAULT, not explicitly set to save space\n\n      if (message.referencedMessage) {\n        // Scan backwards to find the referenced message\n        // TODO: binary search based on timestamps? or just map messages by ID\n        for (let j = i - 1; j >= 0; j--) {\n          if (channelMessages[j].id === message.referencedMessage) {\n            parsedMessage.referencedMessage = channelMessages[j];\n            break;\n          }\n        }\n      }\n\n      if (message.hasOwnProperty('attachments') && message.attachments.length > 0) {\n        parsedMessage.attachments = [];\n\n        for (const attachment of message.attachments) {\n          const parsedAttachment = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Attachment();\n          parsedAttachment.id = attachment.id;\n          parsedAttachment.name = attachment.name;\n          parsedAttachment.size = attachment.size;\n          parsedAttachment.url = attachment.url;\n          if (attachment.hasOwnProperty('width')) parsedAttachment.width = attachment.width;\n          if (attachment.hasOwnProperty('height')) parsedAttachment.height = attachment.height;\n          parsedMessage.attachments.push(parsedAttachment);\n        }\n      }\n\n      if (message.hasOwnProperty('reactions') && message.reactions.length > 0) {\n        parsedMessage.reactions = [];\n\n        for (const reaction of message.reactions) {\n          const parsedReaction = new _primitives__WEBPACK_IMPORTED_MODULE_0__.MessageReaction();\n          parsedReaction.count = reaction.count;\n          parsedReaction.emoji = reaction.emoji;\n          parsedReaction.emojiIsCustom = reaction.emojiIsCustom;\n          if (reaction.hasOwnProperty('users')) parsedReaction.users = reaction.users;\n          parsedMessage.reactions.push(parsedReaction);\n        }\n      }\n\n      if (hasPinnedMessages && pinnedMessageIDs.has(message.id)) {\n        parsedChannel.pinnedMessages.push(parsedMessage);\n      }\n\n      channelMessages.push(parsedMessage);\n    }\n  }\n\n  if (channel.type === 'group') {\n    parsedChannel.recipients = channel.recipients;\n    parsedChannel.owner = channel.owner;\n  }\n\n  return parsedChannel;\n};\n\nconst deserializeServer = (server, archive, archiveVersion) => {\n  const parsedServer = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Server();\n  parsedServer.id = server.id;\n  parsedServer.name = server.name;\n  parsedServer.iconURL = server.iconURL;\n  if (server.hasOwnProperty('owner')) parsedServer.owner = server.owner; // Parse roles\n\n  const serverRoles = parsedServer.roles;\n\n  for (const role of server.roles) {\n    const parsedRole = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Role();\n    parsedRole.id = role.id;\n    parsedRole.name = role.name;\n    parsedRole.color = role.color;\n    parsedRole.permissions = role.permissions;\n    parsedRole.position = role.position;\n    parsedRole.hoist = role.hoist;\n    serverRoles.set(parsedRole.id, parsedRole);\n  } // Parse members\n\n\n  const serverMembers = parsedServer.members;\n\n  for (const member of server.members) {\n    const parsedMember = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Member();\n    parsedMember.id = member.id;\n    parsedMember.nickname = member.nickname; // explicitly null in serialized format if unset\n\n    parsedMember.joinedTimestamp = member.joinedTimestamp; // explicitly null in serialized format if unset\n\n    for (const roleID of member.roles) {\n      parsedMember.roles.push(serverRoles.get(roleID));\n    }\n\n    parsedMember.roles.sort((a, b) => b.position - a.position);\n    serverMembers.set(parsedMember.id, parsedMember);\n  } // Parse emojis\n\n\n  const serverEmojis = parsedServer.emojis;\n\n  if (archiveVersion < 11) {\n    for (const emoji of server.emojis) {\n      const parsedEmoji = new _primitives__WEBPACK_IMPORTED_MODULE_0__.CustomEmoji();\n      parsedEmoji.id = emoji.id;\n      parsedEmoji.name = emoji.name;\n      parsedEmoji.url = emoji.url || `https://cdn.discordapp.com/emojis/${emoji.id}`;\n      serverEmojis.set(parsedEmoji.id, parsedEmoji);\n      archive.emojis.set(parsedEmoji.id, parsedEmoji);\n    }\n  } else {\n    for (const emojiID of server.emojis) {\n      serverEmojis.set(emojiID, archive.emojis.get(emojiID));\n    }\n  } // Parse channels\n\n\n  const serverChannels = parsedServer.channels;\n\n  for (const channel of server.channels) {\n    const parsedChannel = deserializeChannel(channel);\n    archive.channels.set(parsedChannel.id, parsedChannel);\n    serverChannels.add(parsedChannel.id);\n  }\n\n  return parsedServer;\n};\n\nconst deserializeArchiveBotArchive = async (json, zip) => {\n  const archiveVersion = json.version ? parseInt(json.version.replace('archivebot-v', '')) : 1;\n  const archive = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Archive();\n  window.archive = archive;\n  archive.type = json.archiveType;\n\n  for (const user of json.users) {\n    const parsedUser = new _primitives__WEBPACK_IMPORTED_MODULE_0__.User();\n    parsedUser.id = user.id;\n    parsedUser.username = user.username;\n    parsedUser.avatarURL = user.avatarURL;\n    parsedUser.discriminator = user.discriminator;\n    archive.users.set(user.id, parsedUser);\n  }\n\n  if (archiveVersion >= 11) {\n    for (const emoji of json.emojis) {\n      const parsedEmoji = new _primitives__WEBPACK_IMPORTED_MODULE_0__.CustomEmoji();\n      parsedEmoji.animated = emoji.animated;\n      parsedEmoji.createdTimestamp = emoji.createdTimestamp;\n      parsedEmoji.guild = emoji.guild; // explicitly null in serialized format if unset\n\n      parsedEmoji.id = emoji.id;\n      parsedEmoji.identifier = emoji.identifier;\n      parsedEmoji.name = emoji.name;\n      parsedEmoji.url = emoji.url || `https://cdn.discordapp.com/emojis/${emoji.id}`;\n      archive.emojis.set(emoji.id, parsedEmoji);\n    }\n  }\n\n  switch (archive.type) {\n    case 'server':\n      {\n        archive.data = deserializeServer(json.archiveData, archive, archiveVersion);\n        break;\n      }\n\n    case 'channel':\n      {\n        archive.data = deserializeChannel(json.archiveData);\n        archive.channels.set(archive.data.id, archive.data);\n        break;\n      }\n  }\n\n  if (zip) {\n    const {\n      entries\n    } = zip; // Currently, an avatars folder is created even if no avatars are saved, so it's okay to only check for it.\n\n    if (Object.prototype.hasOwnProperty.call(entries, 'avatars/')) {\n      const filePromises = [];\n\n      for (const path of Object.keys(entries)) {\n        // regex matches the first folder in the path (it must be a folder because it's followed by a slash),\n        // and the filename after it\n        const pathMatch = /^([^/]+)\\/(.+)$/.exec(path);\n        if (!pathMatch) continue;\n        const [__, leadingFolder, filePath] = pathMatch;\n        if (leadingFolder !== 'avatars' && leadingFolder !== 'emojis') continue;\n        const entry = entries[path];\n        if (entry.isDirectory) continue;\n        filePromises.push(entry.blob().then(blob => {\n          const blobURL = URL.createObjectURL(blob);\n\n          switch (leadingFolder) {\n            case 'avatars':\n              archive.avatars.set(filePath, blobURL);\n              break;\n\n            case 'emojis':\n              archive.emojiURLs.set(filePath, blobURL);\n              break;\n          }\n        }));\n      }\n\n      await Promise.all(filePromises);\n    }\n  }\n\n  return archive;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (deserializeArchiveBotArchive);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./deserialization/deserialize-archivebot-archive.js\n");

/***/ }),

/***/ "./deserialization/deserialize-archivebot-server.js":
/*!**********************************************************!*\
  !*** ./deserialization/deserialize-archivebot-server.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./primitives */ \"./deserialization/primitives.js\");\n\n\nconst deserializeArchiveBotServer = json => {\n  const archive = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Archive();\n  const server = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Server();\n  server.id = json.id;\n  server.name = json.name;\n  server.iconURL = json.iconURL;\n  const archiveVersion = json.version ? parseInt(json.version.replace('archivebot-v', '')) : 1; // Parse roles\n\n  const serverRoles = server.roles;\n\n  for (const role of json.roles) {\n    const parsedRole = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Role();\n    parsedRole.id = role.id;\n    parsedRole.name = role.name;\n    parsedRole.color = role.color;\n    parsedRole.permissions = role.permissions;\n    parsedRole.position = role.position;\n    parsedRole.hoist = Object.prototype.hasOwnProperty.call(role, 'hoist') ? role.hoist : true;\n    Object.freeze(parsedRole);\n    serverRoles.set(parsedRole.id, parsedRole);\n  } // Parse users\n\n\n  const archiveUsers = archive.users;\n\n  const parseAndAddUser = user => {\n    const parsedUser = new _primitives__WEBPACK_IMPORTED_MODULE_0__.User();\n    parsedUser.id = user.id;\n    parsedUser.avatarURL = user.avatarURL;\n    parsedUser.username = user.username; // Archives with a version < 3 do not save users' discriminators\n\n    if (user.discriminator) {\n      parsedUser.discriminator = user.discriminator;\n    } else {\n      parsedUser.discriminator = user.tag.slice(-4);\n    }\n\n    Object.freeze(parsedUser);\n    archiveUsers.set(parsedUser.id, parsedUser);\n  };\n\n  if (archiveVersion >= 6) {\n    for (const user of json.users) {\n      parseAndAddUser(user);\n    }\n  } // Parse members\n\n\n  const serverMembers = server.members;\n\n  for (const member of json.members) {\n    const parsedMember = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Member();\n    parsedMember.id = member.id;\n    parsedMember.nickname = member.nickname; // explicitly null in serialized format if unset\n    // V3 onwards stores role IDs; earlier versions store roles\n\n    if (archiveVersion < 3) {\n      for (const role of member.roles) {\n        parsedMember.roles.push(serverRoles.get(role.id));\n      }\n    } else {\n      for (const roleID of member.roles) {\n        parsedMember.roles.push(serverRoles.get(roleID));\n      }\n    }\n\n    parsedMember.roles.sort((a, b) => b.position - a.position);\n\n    if (archiveVersion < 6) {\n      parseAndAddUser(member.user);\n    }\n\n    Object.freeze(parsedMember);\n    serverMembers.set(parsedMember.id, parsedMember);\n  } // Older archivebot versions treat offline users as not being members\n\n\n  if (archiveVersion < 7) {\n    let everyoneRole = null;\n\n    for (const role of serverRoles.values()) {\n      if (role.name === '@everyone') {\n        everyoneRole = role;\n        break;\n      }\n    }\n\n    for (const user of archiveUsers.values()) {\n      if (!serverMembers.has(user.id)) {\n        const fakeMember = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Member();\n        fakeMember.id = user.id;\n        fakeMember.nickname = null;\n        fakeMember.roles.push(everyoneRole);\n        serverMembers.set(user.id, fakeMember);\n      }\n    }\n  } // Parse emojis\n\n\n  const serverEmojis = server.emojis;\n\n  for (const emoji of json.emojis) {\n    const parsedEmoji = new _primitives__WEBPACK_IMPORTED_MODULE_0__.CustomEmoji();\n    parsedEmoji.id = emoji.id;\n    parsedEmoji.name = emoji.name;\n    parsedEmoji.url = emoji.url; // explicitly null in serialized format if unset\n\n    Object.freeze(parsedEmoji);\n    serverEmojis.set(parsedEmoji.id, parsedEmoji);\n  } // Parse channels\n\n\n  const serverChannels = server.channels;\n\n  for (const channel of json.channels) {\n    const parsedChannel = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Channel();\n    parsedChannel.id = channel.id;\n    parsedChannel.name = channel.name || channel.id; // Earlier versions of ArchiveBot do not save channel names\n\n    parsedChannel.parentID = channel.parentID || null; // *not* explicitly null if unset\n\n    parsedChannel.nsfw = channel.nsfw === true; // sometimes is null, so explicitly cast to boolean\n\n    parsedChannel.topic = channel.topic;\n    parsedChannel.position = channel.position;\n    parsedChannel.type = channel.type;\n\n    if (channel.type === 'text') {\n      const channelMessages = parsedChannel.messages; // possible tight loop?\n\n      for (let i = 0; i < channel.messages.length; i++) {\n        const message = channel.messages[i];\n        const parsedMessage = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Message();\n        parsedMessage.id = message.id;\n        parsedMessage.authorID = message.author;\n        parsedMessage.content = message.content;\n        parsedMessage.createdTimestamp = message.createdTimestamp;\n        parsedMessage.editedTimestamp = message.editedTimestamp || null;\n        parsedMessage.type = message.type || 'DEFAULT'; // if DEFAULT, not explicitly set to save space\n\n        if (message.hasOwnProperty('attachments') && message.attachments.length > 0) {\n          parsedMessage.attachments = [];\n\n          for (const attachment of message.attachments) {\n            const parsedAttachment = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Attachment();\n            parsedAttachment.id = attachment.id;\n            parsedAttachment.name = attachment.name;\n            parsedAttachment.size = attachment.size;\n            parsedAttachment.url = attachment.url;\n            if (attachment.hasOwnProperty('width')) parsedAttachment.width = attachment.width;\n            if (attachment.hasOwnProperty('height')) parsedAttachment.height = attachment.height;\n            parsedMessage.attachments.push(parsedAttachment);\n          }\n        } // Freezing each message slows things down considerably\n        // Object.freeze(parsedMessage);\n\n\n        channelMessages.push(parsedMessage);\n      }\n\n      Object.freeze(channelMessages);\n    }\n\n    Object.freeze(parsedChannel);\n    serverChannels.add(parsedChannel.id);\n    archive.channels.set(parsedChannel.id, parsedChannel);\n  }\n\n  archive.type = 'server';\n  archive.data = server;\n  return archive;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (deserializeArchiveBotServer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./deserialization/deserialize-archivebot-server.js\n");

/***/ }),

/***/ "./deserialization/deserialize-toonmemebot-channel.js":
/*!************************************************************!*\
  !*** ./deserialization/deserialize-toonmemebot-channel.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./primitives */ \"./deserialization/primitives.js\");\n\n\nconst deserializeToonMemeBotChannel = json => {\n  const archive = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Archive(); // Dummy channel\n\n  const channel = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Channel();\n  channel.id = 0;\n  channel.name = '<only channel>';\n  channel.nsfw = false;\n  channel.position = 0;\n  channel.type = 'text';\n  const channelMessages = channel.messages;\n\n  for (const message of json) {\n    const jsonMessage = JSON.parse(message);\n    const parsedMessage = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Message();\n    parsedMessage.id = jsonMessage.id;\n    parsedMessage.authorID = jsonMessage.user.id;\n    parsedMessage.content = jsonMessage.content;\n    parsedMessage.createdTimestamp = jsonMessage.createdTimestamp;\n    parsedMessage.editedTimestamp = jsonMessage.editedTimestamp; // explicitly null in serialized format if unset\n\n    parsedMessage.type = 'DEFAULT'; // unsaved\n\n    if (jsonMessage.attachments.length > 0) {\n      parsedMessage.attachments = [];\n\n      for (const attachment of jsonMessage.attachments) {\n        const parsedAttachment = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Attachment();\n        parsedAttachment.id = attachment.id;\n        parsedAttachment.name = attachment.filename;\n        parsedAttachment.size = attachment.filesize;\n        parsedAttachment.url = attachment.url;\n        parsedMessage.attachments.push(parsedAttachment);\n      }\n    } // Single-channel archives do not contain member lists\n\n\n    if (!archive.users.has(jsonMessage.user.id)) {\n      const parsedUser = new _primitives__WEBPACK_IMPORTED_MODULE_0__.User();\n      parsedUser.id = jsonMessage.user.id;\n      parsedUser.username = jsonMessage.user.username;\n      parsedUser.discriminator = jsonMessage.user.discriminator;\n      Object.freeze(parsedUser);\n      archive.users.set(parsedUser.id, parsedUser);\n    }\n\n    Object.freeze(parsedMessage);\n    channelMessages.push(parsedMessage);\n  }\n\n  Object.freeze(channelMessages);\n  archive.type = 'channel';\n  archive.data = channel;\n  archive.channels.set(channel.id, channel);\n  return archive;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (deserializeToonMemeBotChannel);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZXNlcmlhbGl6YXRpb24vZGVzZXJpYWxpemUtdG9vbm1lbWVib3QtY2hhbm5lbC5qcz81YTdhIl0sIm5hbWVzIjpbImRlc2VyaWFsaXplVG9vbk1lbWVCb3RDaGFubmVsIiwianNvbiIsImFyY2hpdmUiLCJQcmltcyIsImNoYW5uZWwiLCJpZCIsIm5hbWUiLCJuc2Z3IiwicG9zaXRpb24iLCJ0eXBlIiwiY2hhbm5lbE1lc3NhZ2VzIiwibWVzc2FnZXMiLCJtZXNzYWdlIiwianNvbk1lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJwYXJzZWRNZXNzYWdlIiwiYXV0aG9ySUQiLCJ1c2VyIiwiY29udGVudCIsImNyZWF0ZWRUaW1lc3RhbXAiLCJlZGl0ZWRUaW1lc3RhbXAiLCJhdHRhY2htZW50cyIsImxlbmd0aCIsImF0dGFjaG1lbnQiLCJwYXJzZWRBdHRhY2htZW50IiwiZmlsZW5hbWUiLCJzaXplIiwiZmlsZXNpemUiLCJ1cmwiLCJwdXNoIiwidXNlcnMiLCJoYXMiLCJwYXJzZWRVc2VyIiwidXNlcm5hbWUiLCJkaXNjcmltaW5hdG9yIiwiT2JqZWN0IiwiZnJlZXplIiwic2V0IiwiZGF0YSIsImNoYW5uZWxzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUVBLE1BQU1BLDZCQUE2QixHQUFHQyxJQUFJLElBQUk7QUFDN0MsUUFBTUMsT0FBTyxHQUFHLElBQUlDLGdEQUFKLEVBQWhCLENBRDZDLENBRzdDOztBQUNBLFFBQU1DLE9BQU8sR0FBRyxJQUFJRCxnREFBSixFQUFoQjtBQUNBQyxTQUFPLENBQUNDLEVBQVIsR0FBYSxDQUFiO0FBQ0FELFNBQU8sQ0FBQ0UsSUFBUixHQUFlLGdCQUFmO0FBQ0FGLFNBQU8sQ0FBQ0csSUFBUixHQUFlLEtBQWY7QUFDQUgsU0FBTyxDQUFDSSxRQUFSLEdBQW1CLENBQW5CO0FBQ0FKLFNBQU8sQ0FBQ0ssSUFBUixHQUFlLE1BQWY7QUFFQSxRQUFNQyxlQUFlLEdBQUdOLE9BQU8sQ0FBQ08sUUFBaEM7O0FBQ0EsT0FBSyxNQUFNQyxPQUFYLElBQXNCWCxJQUF0QixFQUE0QjtBQUMzQixVQUFNWSxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxPQUFYLENBQXBCO0FBRUEsVUFBTUksYUFBYSxHQUFHLElBQUliLGdEQUFKLEVBQXRCO0FBRUFhLGlCQUFhLENBQUNYLEVBQWQsR0FBbUJRLFdBQVcsQ0FBQ1IsRUFBL0I7QUFDQVcsaUJBQWEsQ0FBQ0MsUUFBZCxHQUF5QkosV0FBVyxDQUFDSyxJQUFaLENBQWlCYixFQUExQztBQUNBVyxpQkFBYSxDQUFDRyxPQUFkLEdBQXdCTixXQUFXLENBQUNNLE9BQXBDO0FBQ0FILGlCQUFhLENBQUNJLGdCQUFkLEdBQWlDUCxXQUFXLENBQUNPLGdCQUE3QztBQUNBSixpQkFBYSxDQUFDSyxlQUFkLEdBQWdDUixXQUFXLENBQUNRLGVBQTVDLENBVDJCLENBU2tDOztBQUM3REwsaUJBQWEsQ0FBQ1AsSUFBZCxHQUFxQixTQUFyQixDQVYyQixDQVVLOztBQUVoQyxRQUFJSSxXQUFXLENBQUNTLFdBQVosQ0FBd0JDLE1BQXhCLEdBQWlDLENBQXJDLEVBQXdDO0FBQ3ZDUCxtQkFBYSxDQUFDTSxXQUFkLEdBQTRCLEVBQTVCOztBQUNBLFdBQUssTUFBTUUsVUFBWCxJQUF5QlgsV0FBVyxDQUFDUyxXQUFyQyxFQUFrRDtBQUNqRCxjQUFNRyxnQkFBZ0IsR0FBRyxJQUFJdEIsbURBQUosRUFBekI7QUFFQXNCLHdCQUFnQixDQUFDcEIsRUFBakIsR0FBc0JtQixVQUFVLENBQUNuQixFQUFqQztBQUNBb0Isd0JBQWdCLENBQUNuQixJQUFqQixHQUF3QmtCLFVBQVUsQ0FBQ0UsUUFBbkM7QUFDQUQsd0JBQWdCLENBQUNFLElBQWpCLEdBQXdCSCxVQUFVLENBQUNJLFFBQW5DO0FBQ0FILHdCQUFnQixDQUFDSSxHQUFqQixHQUF1QkwsVUFBVSxDQUFDSyxHQUFsQztBQUVBYixxQkFBYSxDQUFDTSxXQUFkLENBQTBCUSxJQUExQixDQUErQkwsZ0JBQS9CO0FBQ0E7QUFDRCxLQXhCMEIsQ0EwQjNCOzs7QUFDQSxRQUFJLENBQUN2QixPQUFPLENBQUM2QixLQUFSLENBQWNDLEdBQWQsQ0FBa0JuQixXQUFXLENBQUNLLElBQVosQ0FBaUJiLEVBQW5DLENBQUwsRUFBNkM7QUFDNUMsWUFBTTRCLFVBQVUsR0FBRyxJQUFJOUIsNkNBQUosRUFBbkI7QUFFQThCLGdCQUFVLENBQUM1QixFQUFYLEdBQWdCUSxXQUFXLENBQUNLLElBQVosQ0FBaUJiLEVBQWpDO0FBQ0E0QixnQkFBVSxDQUFDQyxRQUFYLEdBQXNCckIsV0FBVyxDQUFDSyxJQUFaLENBQWlCZ0IsUUFBdkM7QUFDQUQsZ0JBQVUsQ0FBQ0UsYUFBWCxHQUEyQnRCLFdBQVcsQ0FBQ0ssSUFBWixDQUFpQmlCLGFBQTVDO0FBQ0FDLFlBQU0sQ0FBQ0MsTUFBUCxDQUFjSixVQUFkO0FBRUEvQixhQUFPLENBQUM2QixLQUFSLENBQWNPLEdBQWQsQ0FBa0JMLFVBQVUsQ0FBQzVCLEVBQTdCLEVBQWlDNEIsVUFBakM7QUFDQTs7QUFFREcsVUFBTSxDQUFDQyxNQUFQLENBQWNyQixhQUFkO0FBQ0FOLG1CQUFlLENBQUNvQixJQUFoQixDQUFxQmQsYUFBckI7QUFDQTs7QUFDRG9CLFFBQU0sQ0FBQ0MsTUFBUCxDQUFjM0IsZUFBZDtBQUVBUixTQUFPLENBQUNPLElBQVIsR0FBZSxTQUFmO0FBQ0FQLFNBQU8sQ0FBQ3FDLElBQVIsR0FBZW5DLE9BQWY7QUFDQUYsU0FBTyxDQUFDc0MsUUFBUixDQUFpQkYsR0FBakIsQ0FBcUJsQyxPQUFPLENBQUNDLEVBQTdCLEVBQWlDRCxPQUFqQztBQUVBLFNBQU9GLE9BQVA7QUFDQSxDQTVERDs7QUE4REEsaUVBQWVGLDZCQUFmIiwiZmlsZSI6Ii4vZGVzZXJpYWxpemF0aW9uL2Rlc2VyaWFsaXplLXRvb25tZW1lYm90LWNoYW5uZWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQcmltcyBmcm9tICcuL3ByaW1pdGl2ZXMnO1xuXG5jb25zdCBkZXNlcmlhbGl6ZVRvb25NZW1lQm90Q2hhbm5lbCA9IGpzb24gPT4ge1xuXHRjb25zdCBhcmNoaXZlID0gbmV3IFByaW1zLkFyY2hpdmUoKTtcblxuXHQvLyBEdW1teSBjaGFubmVsXG5cdGNvbnN0IGNoYW5uZWwgPSBuZXcgUHJpbXMuQ2hhbm5lbCgpO1xuXHRjaGFubmVsLmlkID0gMDtcblx0Y2hhbm5lbC5uYW1lID0gJzxvbmx5IGNoYW5uZWw+Jztcblx0Y2hhbm5lbC5uc2Z3ID0gZmFsc2U7XG5cdGNoYW5uZWwucG9zaXRpb24gPSAwO1xuXHRjaGFubmVsLnR5cGUgPSAndGV4dCc7XG5cblx0Y29uc3QgY2hhbm5lbE1lc3NhZ2VzID0gY2hhbm5lbC5tZXNzYWdlcztcblx0Zm9yIChjb25zdCBtZXNzYWdlIG9mIGpzb24pIHtcblx0XHRjb25zdCBqc29uTWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZSk7XG5cblx0XHRjb25zdCBwYXJzZWRNZXNzYWdlID0gbmV3IFByaW1zLk1lc3NhZ2UoKTtcblxuXHRcdHBhcnNlZE1lc3NhZ2UuaWQgPSBqc29uTWVzc2FnZS5pZDtcblx0XHRwYXJzZWRNZXNzYWdlLmF1dGhvcklEID0ganNvbk1lc3NhZ2UudXNlci5pZDtcblx0XHRwYXJzZWRNZXNzYWdlLmNvbnRlbnQgPSBqc29uTWVzc2FnZS5jb250ZW50O1xuXHRcdHBhcnNlZE1lc3NhZ2UuY3JlYXRlZFRpbWVzdGFtcCA9IGpzb25NZXNzYWdlLmNyZWF0ZWRUaW1lc3RhbXA7XG5cdFx0cGFyc2VkTWVzc2FnZS5lZGl0ZWRUaW1lc3RhbXAgPSBqc29uTWVzc2FnZS5lZGl0ZWRUaW1lc3RhbXA7IC8vIGV4cGxpY2l0bHkgbnVsbCBpbiBzZXJpYWxpemVkIGZvcm1hdCBpZiB1bnNldFxuXHRcdHBhcnNlZE1lc3NhZ2UudHlwZSA9ICdERUZBVUxUJzsgLy8gdW5zYXZlZFxuXG5cdFx0aWYgKGpzb25NZXNzYWdlLmF0dGFjaG1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdHBhcnNlZE1lc3NhZ2UuYXR0YWNobWVudHMgPSBbXTtcblx0XHRcdGZvciAoY29uc3QgYXR0YWNobWVudCBvZiBqc29uTWVzc2FnZS5hdHRhY2htZW50cykge1xuXHRcdFx0XHRjb25zdCBwYXJzZWRBdHRhY2htZW50ID0gbmV3IFByaW1zLkF0dGFjaG1lbnQoKTtcblxuXHRcdFx0XHRwYXJzZWRBdHRhY2htZW50LmlkID0gYXR0YWNobWVudC5pZDtcblx0XHRcdFx0cGFyc2VkQXR0YWNobWVudC5uYW1lID0gYXR0YWNobWVudC5maWxlbmFtZTtcblx0XHRcdFx0cGFyc2VkQXR0YWNobWVudC5zaXplID0gYXR0YWNobWVudC5maWxlc2l6ZTtcblx0XHRcdFx0cGFyc2VkQXR0YWNobWVudC51cmwgPSBhdHRhY2htZW50LnVybDtcblxuXHRcdFx0XHRwYXJzZWRNZXNzYWdlLmF0dGFjaG1lbnRzLnB1c2gocGFyc2VkQXR0YWNobWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2luZ2xlLWNoYW5uZWwgYXJjaGl2ZXMgZG8gbm90IGNvbnRhaW4gbWVtYmVyIGxpc3RzXG5cdFx0aWYgKCFhcmNoaXZlLnVzZXJzLmhhcyhqc29uTWVzc2FnZS51c2VyLmlkKSkge1xuXHRcdFx0Y29uc3QgcGFyc2VkVXNlciA9IG5ldyBQcmltcy5Vc2VyKCk7XG5cblx0XHRcdHBhcnNlZFVzZXIuaWQgPSBqc29uTWVzc2FnZS51c2VyLmlkO1xuXHRcdFx0cGFyc2VkVXNlci51c2VybmFtZSA9IGpzb25NZXNzYWdlLnVzZXIudXNlcm5hbWU7XG5cdFx0XHRwYXJzZWRVc2VyLmRpc2NyaW1pbmF0b3IgPSBqc29uTWVzc2FnZS51c2VyLmRpc2NyaW1pbmF0b3I7XG5cdFx0XHRPYmplY3QuZnJlZXplKHBhcnNlZFVzZXIpO1xuXG5cdFx0XHRhcmNoaXZlLnVzZXJzLnNldChwYXJzZWRVc2VyLmlkLCBwYXJzZWRVc2VyKTtcblx0XHR9XG5cblx0XHRPYmplY3QuZnJlZXplKHBhcnNlZE1lc3NhZ2UpO1xuXHRcdGNoYW5uZWxNZXNzYWdlcy5wdXNoKHBhcnNlZE1lc3NhZ2UpO1xuXHR9XG5cdE9iamVjdC5mcmVlemUoY2hhbm5lbE1lc3NhZ2VzKTtcblxuXHRhcmNoaXZlLnR5cGUgPSAnY2hhbm5lbCc7XG5cdGFyY2hpdmUuZGF0YSA9IGNoYW5uZWw7XG5cdGFyY2hpdmUuY2hhbm5lbHMuc2V0KGNoYW5uZWwuaWQsIGNoYW5uZWwpO1xuXG5cdHJldHVybiBhcmNoaXZlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVzZXJpYWxpemVUb29uTWVtZUJvdENoYW5uZWw7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./deserialization/deserialize-toonmemebot-channel.js\n");

/***/ }),

/***/ "./deserialization/deserialize-toonmemebot-server.js":
/*!***********************************************************!*\
  !*** ./deserialization/deserialize-toonmemebot-server.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./primitives */ \"./deserialization/primitives.js\");\n\n\nconst deserializeToonMemeBotServer = json => {\n  const archive = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Archive();\n  const server = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Server(); // server.id = null; // unsaved\n  // server.name = null; // unsaved\n  // server.iconURL = null; // unsaved\n  // Parse members\n\n  const serverMembers = server.members;\n  const archiveUsers = archive.users;\n\n  for (const member of json.members) {\n    const parsedMember = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Member();\n    parsedMember.id = member.user.id;\n    parsedMember.nickname = member.nickname; // explicitly null in serialized format if unset\n\n    Object.freeze(parsedMember);\n    serverMembers.set(parsedMember.id, parsedMember); // perhaps store users somewhere else?\n\n    const parsedUser = new _primitives__WEBPACK_IMPORTED_MODULE_0__.User();\n    parsedUser.id = member.user.id; // parsedUser.avatarURL = null; // unsaved\n\n    parsedUser.username = member.user.username;\n    parsedUser.discriminator = member.user.discriminator;\n    Object.freeze(parsedUser);\n    archiveUsers.set(parsedUser.id, parsedUser);\n  } // Parse emojis\n\n\n  const archiveEmojis = archive.emojis;\n  const serverEmojis = server.emojis;\n\n  const parseEmoji = emoji => {\n    if (archiveEmojis.has(emoji.id)) return archiveEmojis.get(emoji.id);\n    const parsedEmoji = new _primitives__WEBPACK_IMPORTED_MODULE_0__.CustomEmoji();\n    parsedEmoji.id = emoji.id;\n    parsedEmoji.name = emoji.name;\n    parsedEmoji.url = emoji.url || `https://cdn.discordapp.com/emojis/${emoji.id}`;\n    archiveEmojis.set(parsedEmoji.id, parsedEmoji);\n    return parsedEmoji;\n  };\n\n  for (const emoji of json.emojis) {\n    serverEmojis.set(emoji.id, parseEmoji(emoji));\n  } // Parse channels\n\n\n  const serverChannels = server.channels;\n\n  for (const channel of json.channels) {\n    const parsedChannel = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Channel();\n    parsedChannel.id = channel.id;\n    parsedChannel.name = channel.name;\n    parsedChannel.nsfw = false; // unsaved\n\n    parsedChannel.topic = channel.topic;\n    parsedChannel.position = channel.position;\n    parsedChannel.type = 'text'; // ToonMemeBot only saves text channels\n\n    const channelMessages = parsedChannel.messages; // possible tight loop?\n\n    for (let i = 0; i < channel.messages.length; i++) {\n      const message = channel.messages[i];\n      const parsedMessage = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Message();\n      parsedMessage.id = message.id;\n      parsedMessage.authorID = message.author;\n      parsedMessage.content = message.content;\n      parsedMessage.createdTimestamp = message.createdTimestamp;\n      parsedMessage.editedTimestamp = message.editedTimestamp; // explicitly null in serialized format if unset\n\n      parsedMessage.type = 'DEFAULT'; // unsaved\n\n      if (message.attachments.length > 0) {\n        parsedMessage.attachments = [];\n\n        for (const attachment of message.attachments) {\n          const parsedAttachment = new _primitives__WEBPACK_IMPORTED_MODULE_0__.Attachment();\n          parsedAttachment.id = attachment.id;\n          parsedAttachment.name = attachment.filename;\n          parsedAttachment.size = attachment.filesize;\n          parsedAttachment.url = attachment.url;\n          parsedMessage.attachments.push(parsedAttachment);\n        }\n      }\n\n      if (message.reactions.length > 0) {\n        parsedMessage.reactions = [];\n\n        for (const reaction of message.reactions) {\n          const parsedReaction = new _primitives__WEBPACK_IMPORTED_MODULE_0__.MessageReaction();\n          parsedReaction.count = reaction.count;\n          const emojiIsCustom = !!reaction.emoji.id;\n          parsedReaction.emoji = emojiIsCustom ? parseEmoji(reaction.emoji).id : reaction.emoji.name;\n          parsedMessage.reactions.push(parsedReaction);\n        }\n      }\n\n      Object.freeze(parsedMessage);\n      channelMessages.push(parsedMessage);\n    } // Only reverse the messsages if they're in reverse order\n    // This is needed for one specific archive I created with a faulty conversion tool\n\n\n    if (channelMessages.length > 1 && channelMessages[1].createdTimestamp < channelMessages[0].createdTimestamp) {\n      channelMessages.reverse();\n    }\n\n    Object.freeze(channelMessages);\n    Object.freeze(parsedChannel);\n    archive.channels.set(parsedChannel.id, parsedChannel);\n    serverChannels.add(parsedChannel.id);\n  }\n\n  archive.type = 'server';\n  archive.data = server;\n  return archive;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (deserializeToonMemeBotServer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./deserialization/deserialize-toonmemebot-server.js\n");

/***/ }),

/***/ "./deserialization/primitives.js":
/*!***************************************!*\
  !*** ./deserialization/primitives.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Archive\": () => (/* binding */ Archive),\n/* harmony export */   \"Server\": () => (/* binding */ Server),\n/* harmony export */   \"Channel\": () => (/* binding */ Channel),\n/* harmony export */   \"Message\": () => (/* binding */ Message),\n/* harmony export */   \"MessageReaction\": () => (/* binding */ MessageReaction),\n/* harmony export */   \"Member\": () => (/* binding */ Member),\n/* harmony export */   \"User\": () => (/* binding */ User),\n/* harmony export */   \"Role\": () => (/* binding */ Role),\n/* harmony export */   \"Attachment\": () => (/* binding */ Attachment),\n/* harmony export */   \"CustomEmoji\": () => (/* binding */ CustomEmoji)\n/* harmony export */ });\nclass Archive {\n  constructor() {\n    /**\n     * The archive type (server or channel).\n     * @type {string}\n     */\n    this.type = null;\n    /**\n     * Map of all users encountered during archiving, keyed by ID.\n     * @type {Map<Snowflake, User>}\n     */\n\n    this.users = new Map();\n    /**\n     * Map of all emojis encountered during archiving, keyed by ID.\n     * @type {Map<Snowflake, CustomEmoji>}\n     */\n\n    this.emojis = new Map();\n    /**\n     * Map of all channels encountered during archiving, keyed by ID.\n     * @type {Map<Snowflake, Channel>}\n     */\n\n    this.channels = new Map();\n    /**\n     * @type {Server|Channel}\n     */\n\n    this.data = null;\n    /**\n     * Blob URLs for every saved avatar.\n     * @type {Map<Snowflake, string>}\n     */\n\n    this.avatars = new Map();\n    /**\n     * Blob URLs for every saved emoji.\n     * @type {Map<Snowflake, string>}\n     */\n\n    this.emojiURLs = new Map();\n  }\n  /**\n   * Call this method once you're done using the archive\n   */\n\n\n  dispose() {\n    for (const avatar of this.avatars.values()) {\n      URL.revokeObjectURL(avatar);\n    }\n  }\n\n}\n\nclass Server {\n  constructor() {\n    /**\n     * The server ID.\n     * @type {Snowflake}\n     */\n    this.id = null;\n    /**\n     * The server name.\n     * @type {string}\n     */\n\n    this.name = null;\n    /**\n     * The server's icon URL.\n     * @type {string}\n     */\n\n    this.iconURL = null;\n    /**\n     * Map of current server members, keyed by ID.\n     * @type {Map<Snowflake, Member>}\n     */\n\n    this.members = new Map();\n    /**\n     * Map of server-specific custom emojis, keyed by ID.\n     * @type {Map<Snowflake, CustomEmoji>}\n     */\n\n    this.emojis = new Map();\n    /**\n     * Map of roles in the server, keyed by ID.\n     * @type {Map<Snowflake, Role>}\n     */\n\n    this.roles = new Map();\n    /**\n     * Set of channels in the server, keyed by ID.\n     * @type {Set<Snowflake>}\n     */\n\n    this.channels = new Set();\n    /**\n     * The ID of this server's owner. Only present in Archivebot >=v11 archives.\n     * @type {?Snowflake}\n     */\n\n    this.owner = null;\n  }\n\n}\n\nclass Channel {\n  constructor() {\n    /**\n     * The channel ID.\n     * @type {Snowflake}\n     */\n    this.id = null;\n    /**\n     * The channel name.\n     * @type {string}\n     */\n\n    this.name = null;\n    /**\n     * The ID of the parent channel (category) this channel belongs to, null if no parent\n     * @type {?Snowflake}\n     */\n\n    this.parentID = null;\n    /**\n     * Array of messages in this channel.\n     * @type {Array<Message>}\n     */\n\n    this.messages = [];\n    /**\n     * Whether this channel is an NSFW channel.\n     * @type {Boolean}\n     */\n\n    this.nsfw = false;\n    /**\n     * The channel topic.\n     * @type {?string}\n     */\n\n    this.topic = null;\n    /**\n     * The position of the channel in the channel list.\n     * @type {number}\n     */\n\n    this.position = 0;\n    /**\n     * The channel type (voice, text, etc).\n     * @type {?string}\n     */\n\n    this.type = null;\n    /**\n     * This channel's pinned messages, if this is a text channel and the archive supports them.\n     * @type {?Array<Message>}\n     */\n\n    this.pinnedMessages = null;\n    /**\n     * This channel's current members, if this is a group channel.\n     * @type {?Array<Snowflake>}\n     */\n\n    this.recipients = null;\n    /**\n     * This channel's current owner, if this is a group channel.\n     * @type {?Snowflake}\n     */\n\n    this.owner = null;\n  }\n\n}\n\nclass Message {\n  constructor() {\n    /**\n     * The message ID.\n     * @type {Snowflake}\n     */\n    this.id = null;\n    /**\n     * The message author's user/member ID.\n     * @type {Snowflake}\n     */\n\n    this.authorID = null;\n    /**\n     * The message contents.\n     * @type {?string}\n     */\n\n    this.content = null;\n    /**\n     * The time at which the message was posted.\n     * @type {number}\n     */\n\n    this.createdTimestamp = null;\n    /**\n     * The time at which the message was last edited, or null if unedited.\n     * @type {?number}\n     */\n\n    this.editedTimestamp = null;\n    /**\n     * Array of message attachments.\n     * @type {?Array<Attachment>}\n     */\n\n    this.attachments = null;\n    /**\n     * The type of message (e.g. DEFAULT, USER_GUILD_JOIN).\n     * @type {?string}\n     */\n\n    this.type = null;\n    /**\n     * Array of reactions to this message.\n     * @type {?Array<MessageReaction>}\n     */\n\n    this.reactions = null;\n    /**\n     * If this message is a reply, the message it's replying to. Not an ID for performance reasons.\n     * @type {?Message}\n     */\n\n    this.referencedMessage = null;\n  }\n\n}\n\nclass MessageReaction {\n  constructor() {\n    /**\n     * The number of people who have reacted with this reaction.\n     * @type {number}\n     */\n    this.count = 0;\n    /**\n     * This reaction's emoji. An ID if this is a custom emoji, or its Unicode representation if not.\n     * @type {Snowflake|string}\n     */\n\n    this.emoji = null;\n    /**\n     * Whether this reaction uses a custom emoji.\n     * @type {boolean}\n     */\n\n    this.emojiIsCustom = false;\n    /**\n     * The IDs of the users which have reacted with this reaction. The length may be less than `count`.\n     * @type {?Array<Snowflake>}\n     */\n\n    this.users = null;\n  }\n\n}\n\nclass Member {\n  constructor() {\n    /**\n     * The member ID. Same as the member's user's ID.\n     * @type {Snowflake}\n     */\n    this.id = null;\n    /**\n     * The member's nickname, or null if they have none.\n     * @type {?string}\n     */\n\n    this.nickname = null;\n    /**\n     * Array of roles this member belongs to, ordered highest to lowest.\n     * @type {Array<Role>}\n     */\n\n    this.roles = [];\n    /**\n     * Time at which this member joined the server.\n     * Null if the archive is too old to store it.\n     * @type {?number}\n     */\n\n    this.joinedTimestamp = null;\n  }\n\n}\n\nclass User {\n  constructor() {\n    /**\n     * The user ID.\n     * @type {Snowflake}\n     */\n    this.id = null;\n    /**\n     * The user's avatar URL.\n     * @type {?string}\n     */\n\n    this.avatarURL = null;\n    /**\n     * The user's username.\n     * @type {string}\n     */\n\n    this.username = null;\n    /**\n     * The user's discriminator (a 4-digit number used to distinguish between identical usernames).\n     * The leading hash mark is not included here.\n     * @type {string}\n     */\n\n    this.discriminator = null;\n  }\n\n  get tag() {\n    return this.username + '#' + this.discriminator;\n  }\n\n}\n\nclass Role {\n  constructor() {\n    /**\n     * The role ID.\n     * @type {Snowflake}\n     */\n    this.id = null;\n    /**\n     * The role name.\n     * @type {string}\n     */\n\n    this.name = null;\n    /**\n     * The role color.\n     * @type {string}\n     */\n\n    this.color = null;\n    /**\n     * The role permissions bitmask.\n     * @type {number}\n     */\n\n    this.permissions = null;\n    /**\n     * The position/rank of the role in the role list.\n     * @type {number}\n     */\n\n    this.position = null;\n    /**\n     * Whether the role creates a new separate category under the users list.\n     * @type {boolean}\n     */\n\n    this.hoist = true;\n  }\n\n}\n\nclass Attachment {\n  constructor() {\n    /**\n     * The attachment ID.\n     * @type {Snowflake}\n     */\n    this.id = null;\n    /**\n     * The name of the attachment.\n     * @type {string}\n     */\n\n    this.name = null;\n    /**\n     * The size of the attachment, in bytes.\n     * @type {number}\n     */\n\n    this.size = 0;\n    /**\n     * The URL of the attachment.\n     * @type {string}\n     */\n\n    this.url = null;\n    /**\n     * If this attachment is an image, that image's width.\n     * @type {?string}\n     */\n\n    this.width = null;\n    /**\n     * If this attachment is an image, that image's height.\n     * @type {?string}\n     */\n\n    this.height = null;\n  }\n\n}\n\nclass CustomEmoji {\n  constructor() {\n    /**\n     * Whether this is an animated emoji. Only present in Archivebot >=v11 archives.\n     * @type {?boolean}\n     */\n    this.animated = null;\n    /**\n     * The time at which this emoji was created. Only present in Archivebot >=v11 archives.\n     * @type {?number}\n     */\n\n    this.createdTimestamp = null;\n    /**\n     * The ID of the guild that this emoji belongs to.\n     * @type {Snowflake}\n     */\n\n    this.guild = null;\n    /**\n     * The emoji ID.\n     * @type {Snowflake}\n     */\n\n    this.id = null;\n    /**\n     * The identifier of this emoji, used for message reactions. Only present in Archivebot >=v11 archives.\n     * @type {?string}\n     */\n\n    this.identifier = null;\n    /**\n     * The emoji name.\n     * @type {string}\n     */\n\n    this.name = null;\n    /**\n     * The emoji URL.\n     * @type {string}\n     */\n\n    this.url = null;\n  }\n\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./deserialization/primitives.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _components_App_App_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/App/App.jsx */ \"./components/App/App.jsx\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_components_App_App_jsx__WEBPACK_IMPORTED_MODULE_0__.default);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9pbmRleC5qcz80MWY1Il0sIm5hbWVzIjpbIkFwcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUVBLGlFQUFlQSw0REFBZiIsImZpbGUiOiIuL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFwcCBmcm9tICcuL2NvbXBvbmVudHMvQXBwL0FwcC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./util/class-names.js":
/*!*****************************!*\
  !*** ./util/class-names.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (classNames => {\n  const activeClasses = [];\n\n  for (const name in classNames) {\n    if (Object.prototype.hasOwnProperty.call(classNames, name) && classNames[name]) {\n      activeClasses.push(name);\n    }\n  }\n\n  return activeClasses.join(' ');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL2NsYXNzLW5hbWVzLmpzPzdjM2IiXSwibmFtZXMiOlsiY2xhc3NOYW1lcyIsImFjdGl2ZUNsYXNzZXMiLCJuYW1lIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicHVzaCIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZUEsVUFBVSxJQUFJO0FBQzVCLFFBQU1DLGFBQWEsR0FBRyxFQUF0Qjs7QUFDQSxPQUFLLE1BQU1DLElBQVgsSUFBbUJGLFVBQW5CLEVBQStCO0FBQzlCLFFBQUlHLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDTixVQUFyQyxFQUFpREUsSUFBakQsS0FDSEYsVUFBVSxDQUFDRSxJQUFELENBRFgsRUFDbUI7QUFDbEJELG1CQUFhLENBQUNNLElBQWQsQ0FBbUJMLElBQW5CO0FBQ0E7QUFDRDs7QUFDRCxTQUFPRCxhQUFhLENBQUNPLElBQWQsQ0FBbUIsR0FBbkIsQ0FBUDtBQUNBLENBVEQiLCJmaWxlIjoiLi91dGlsL2NsYXNzLW5hbWVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3NOYW1lcyA9PiB7XG5cdGNvbnN0IGFjdGl2ZUNsYXNzZXMgPSBbXTtcblx0Zm9yIChjb25zdCBuYW1lIGluIGNsYXNzTmFtZXMpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNsYXNzTmFtZXMsIG5hbWUpICYmXG5cdFx0XHRjbGFzc05hbWVzW25hbWVdKSB7XG5cdFx0XHRhY3RpdmVDbGFzc2VzLnB1c2gobmFtZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhY3RpdmVDbGFzc2VzLmpvaW4oJyAnKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./util/class-names.js\n");

/***/ }),

/***/ "./util/fixup-message-boundaries.js":
/*!******************************************!*\
  !*** ./util/fixup-message-boundaries.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fixupMessageStart\": () => (/* binding */ fixupMessageStart),\n/* harmony export */   \"fixupMessageEnd\": () => (/* binding */ fixupMessageEnd)\n/* harmony export */ });\n/* harmony import */ var _should_split_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./should-split-messages */ \"./util/should-split-messages.js\");\n\n\nconst fixupMessageStart = (start, messages) => {\n  // Clamp within valid message range\n  let fixed = Math.max(0, Math.min(start, messages.length - 1));\n  if (messages.length === 0) return fixed; // Extend so that all messages in \"string\" from that user are visible\n\n  while (fixed > 0 && !(0,_should_split_messages__WEBPACK_IMPORTED_MODULE_0__.default)(messages[fixed - 1], messages[fixed])) {\n    fixed--;\n  }\n\n  return fixed;\n};\n\nconst fixupMessageEnd = (end, messages) => {\n  // Clamp within valid message range\n  let fixed = Math.max(0, Math.min(end, messages.length - 1));\n  if (messages.length === 0) return fixed; // Extend so that all messages in \"string\" from that user are visible\n\n  while (fixed < messages.length - 1 && !(0,_should_split_messages__WEBPACK_IMPORTED_MODULE_0__.default)(messages[fixed], messages[fixed + 1])) {\n    fixed++;\n  }\n\n  return fixed;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL2ZpeHVwLW1lc3NhZ2UtYm91bmRhcmllcy5qcz83MmM5Il0sIm5hbWVzIjpbImZpeHVwTWVzc2FnZVN0YXJ0Iiwic3RhcnQiLCJtZXNzYWdlcyIsImZpeGVkIiwiTWF0aCIsIm1heCIsIm1pbiIsImxlbmd0aCIsInNob3VsZFNwbGl0TWVzc2FnZXMiLCJmaXh1cE1lc3NhZ2VFbmQiLCJlbmQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBLE1BQU1BLGlCQUFpQixHQUFHLENBQUNDLEtBQUQsRUFBUUMsUUFBUixLQUFxQjtBQUM5QztBQUNBLE1BQUlDLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZRCxJQUFJLENBQUNFLEdBQUwsQ0FBU0wsS0FBVCxFQUFnQkMsUUFBUSxDQUFDSyxNQUFULEdBQWtCLENBQWxDLENBQVosQ0FBWjtBQUNBLE1BQUlMLFFBQVEsQ0FBQ0ssTUFBVCxLQUFvQixDQUF4QixFQUEyQixPQUFPSixLQUFQLENBSG1CLENBSzlDOztBQUNBLFNBQU9BLEtBQUssR0FBRyxDQUFSLElBQWEsQ0FBQ0ssK0RBQW1CLENBQUNOLFFBQVEsQ0FBQ0MsS0FBSyxHQUFHLENBQVQsQ0FBVCxFQUFzQkQsUUFBUSxDQUFDQyxLQUFELENBQTlCLENBQXhDLEVBQWdGO0FBQy9FQSxTQUFLO0FBQ0w7O0FBRUQsU0FBT0EsS0FBUDtBQUNBLENBWEQ7O0FBYUEsTUFBTU0sZUFBZSxHQUFHLENBQUNDLEdBQUQsRUFBTVIsUUFBTixLQUFtQjtBQUMxQztBQUNBLE1BQUlDLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZRCxJQUFJLENBQUNFLEdBQUwsQ0FBU0ksR0FBVCxFQUFjUixRQUFRLENBQUNLLE1BQVQsR0FBa0IsQ0FBaEMsQ0FBWixDQUFaO0FBQ0EsTUFBSUwsUUFBUSxDQUFDSyxNQUFULEtBQW9CLENBQXhCLEVBQTJCLE9BQU9KLEtBQVAsQ0FIZSxDQUsxQzs7QUFDQSxTQUFPQSxLQUFLLEdBQUdELFFBQVEsQ0FBQ0ssTUFBVCxHQUFrQixDQUExQixJQUErQixDQUFDQywrREFBbUIsQ0FBQ04sUUFBUSxDQUFDQyxLQUFELENBQVQsRUFBa0JELFFBQVEsQ0FBQ0MsS0FBSyxHQUFHLENBQVQsQ0FBMUIsQ0FBMUQsRUFBa0c7QUFDakdBLFNBQUs7QUFDTDs7QUFFRCxTQUFPQSxLQUFQO0FBQ0EsQ0FYRCIsImZpbGUiOiIuL3V0aWwvZml4dXAtbWVzc2FnZS1ib3VuZGFyaWVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNob3VsZFNwbGl0TWVzc2FnZXMgZnJvbSAnLi9zaG91bGQtc3BsaXQtbWVzc2FnZXMnO1xuXG5jb25zdCBmaXh1cE1lc3NhZ2VTdGFydCA9IChzdGFydCwgbWVzc2FnZXMpID0+IHtcblx0Ly8gQ2xhbXAgd2l0aGluIHZhbGlkIG1lc3NhZ2UgcmFuZ2Vcblx0bGV0IGZpeGVkID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc3RhcnQsIG1lc3NhZ2VzLmxlbmd0aCAtIDEpKTtcblx0aWYgKG1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZpeGVkO1xuXG5cdC8vIEV4dGVuZCBzbyB0aGF0IGFsbCBtZXNzYWdlcyBpbiBcInN0cmluZ1wiIGZyb20gdGhhdCB1c2VyIGFyZSB2aXNpYmxlXG5cdHdoaWxlIChmaXhlZCA+IDAgJiYgIXNob3VsZFNwbGl0TWVzc2FnZXMobWVzc2FnZXNbZml4ZWQgLSAxXSwgbWVzc2FnZXNbZml4ZWRdKSkge1xuXHRcdGZpeGVkLS07XG5cdH1cblxuXHRyZXR1cm4gZml4ZWQ7XG59O1xuXG5jb25zdCBmaXh1cE1lc3NhZ2VFbmQgPSAoZW5kLCBtZXNzYWdlcykgPT4ge1xuXHQvLyBDbGFtcCB3aXRoaW4gdmFsaWQgbWVzc2FnZSByYW5nZVxuXHRsZXQgZml4ZWQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlbmQsIG1lc3NhZ2VzLmxlbmd0aCAtIDEpKTtcblx0aWYgKG1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZpeGVkO1xuXG5cdC8vIEV4dGVuZCBzbyB0aGF0IGFsbCBtZXNzYWdlcyBpbiBcInN0cmluZ1wiIGZyb20gdGhhdCB1c2VyIGFyZSB2aXNpYmxlXG5cdHdoaWxlIChmaXhlZCA8IG1lc3NhZ2VzLmxlbmd0aCAtIDEgJiYgIXNob3VsZFNwbGl0TWVzc2FnZXMobWVzc2FnZXNbZml4ZWRdLCBtZXNzYWdlc1tmaXhlZCArIDFdKSkge1xuXHRcdGZpeGVkKys7XG5cdH1cblxuXHRyZXR1cm4gZml4ZWQ7XG59O1xuXG5leHBvcnQge2ZpeHVwTWVzc2FnZVN0YXJ0LCBmaXh1cE1lc3NhZ2VFbmR9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./util/fixup-message-boundaries.js\n");

/***/ }),

/***/ "./util/format-timestamp.js":
/*!**********************************!*\
  !*** ./util/format-timestamp.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// TODO: something a bit more user friendly than standard ISO formatting\nconst formatTimestamp = timestamp => new Date(timestamp).toISOString();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formatTimestamp);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL2Zvcm1hdC10aW1lc3RhbXAuanM/MjkzMCJdLCJuYW1lcyI6WyJmb3JtYXRUaW1lc3RhbXAiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLE1BQU1BLGVBQWUsR0FBR0MsU0FBUyxJQUFJLElBQUlDLElBQUosQ0FBU0QsU0FBVCxFQUFvQkUsV0FBcEIsRUFBckM7O0FBRUEsaUVBQWVILGVBQWYiLCJmaWxlIjoiLi91dGlsL2Zvcm1hdC10aW1lc3RhbXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPOiBzb21ldGhpbmcgYSBiaXQgbW9yZSB1c2VyIGZyaWVuZGx5IHRoYW4gc3RhbmRhcmQgSVNPIGZvcm1hdHRpbmdcbmNvbnN0IGZvcm1hdFRpbWVzdGFtcCA9IHRpbWVzdGFtcCA9PiBuZXcgRGF0ZSh0aW1lc3RhbXApLnRvSVNPU3RyaW5nKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFRpbWVzdGFtcDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./util/format-timestamp.js\n");

/***/ }),

/***/ "./util/get-emoji-name.js":
/*!********************************!*\
  !*** ./util/get-emoji-name.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _emojis_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emojis.json */ \"./util/emojis.json\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (str => {\n  if (Object.prototype.hasOwnProperty.call(_emojis_json__WEBPACK_IMPORTED_MODULE_0__, str)) return _emojis_json__WEBPACK_IMPORTED_MODULE_0__[str][0];\n  return null;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL2dldC1lbW9qaS1uYW1lLmpzP2JmNDciXSwibmFtZXMiOlsic3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZW1vamlzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBRUEsaUVBQWVBLEdBQUcsSUFBSTtBQUNyQixNQUFJQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ0MseUNBQXJDLEVBQTZDTCxHQUE3QyxDQUFKLEVBQXVELE9BQU9LLHlDQUFNLENBQUNMLEdBQUQsQ0FBTixDQUFZLENBQVosQ0FBUDtBQUN2RCxTQUFPLElBQVA7QUFDQSxDQUhEIiwiZmlsZSI6Ii4vdXRpbC9nZXQtZW1vamktbmFtZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbW9qaXMgZnJvbSAnLi9lbW9qaXMuanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IHN0ciA9PiB7XG5cdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZW1vamlzLCBzdHIpKSByZXR1cm4gZW1vamlzW3N0cl1bMF07XG5cdHJldHVybiBudWxsO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./util/get-emoji-name.js\n");

/***/ }),

/***/ "./util/get-member-name.js":
/*!*********************************!*\
  !*** ./util/get-member-name.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((memberID, archive, prefixWithAt = false) => {\n  const member = archive.type === 'server' && archive.data.members.get(memberID);\n  const prefix = prefixWithAt ? '@' : '';\n  if (member && member.nickname !== null) return prefix + member.nickname;\n  const user = archive.users.get(memberID);\n  if (user && user.username !== 'Deleted User') return prefix + user.username;\n  return `<@${memberID}>`;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL2dldC1tZW1iZXItbmFtZS5qcz85M2Q3Il0sIm5hbWVzIjpbIm1lbWJlcklEIiwiYXJjaGl2ZSIsInByZWZpeFdpdGhBdCIsIm1lbWJlciIsInR5cGUiLCJkYXRhIiwibWVtYmVycyIsImdldCIsInByZWZpeCIsIm5pY2tuYW1lIiwidXNlciIsInVzZXJzIiwidXNlcm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxDQUFDQSxRQUFELEVBQVdDLE9BQVgsRUFBb0JDLFlBQVksR0FBRyxLQUFuQyxLQUE2QztBQUMzRCxRQUFNQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0csSUFBUixLQUFpQixRQUFqQixJQUE2QkgsT0FBTyxDQUFDSSxJQUFSLENBQWFDLE9BQWIsQ0FBcUJDLEdBQXJCLENBQXlCUCxRQUF6QixDQUE1QztBQUNBLFFBQU1RLE1BQU0sR0FBR04sWUFBWSxHQUFHLEdBQUgsR0FBUyxFQUFwQztBQUNBLE1BQUlDLE1BQU0sSUFBSUEsTUFBTSxDQUFDTSxRQUFQLEtBQW9CLElBQWxDLEVBQXdDLE9BQU9ELE1BQU0sR0FBR0wsTUFBTSxDQUFDTSxRQUF2QjtBQUV4QyxRQUFNQyxJQUFJLEdBQUdULE9BQU8sQ0FBQ1UsS0FBUixDQUFjSixHQUFkLENBQWtCUCxRQUFsQixDQUFiO0FBQ0EsTUFBSVUsSUFBSSxJQUFJQSxJQUFJLENBQUNFLFFBQUwsS0FBa0IsY0FBOUIsRUFBOEMsT0FBT0osTUFBTSxHQUFHRSxJQUFJLENBQUNFLFFBQXJCO0FBRTlDLFNBQVEsS0FBSVosUUFBUyxHQUFyQjtBQUNBLENBVEQiLCJmaWxlIjoiLi91dGlsL2dldC1tZW1iZXItbmFtZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IChtZW1iZXJJRCwgYXJjaGl2ZSwgcHJlZml4V2l0aEF0ID0gZmFsc2UpID0+IHtcblx0Y29uc3QgbWVtYmVyID0gYXJjaGl2ZS50eXBlID09PSAnc2VydmVyJyAmJiBhcmNoaXZlLmRhdGEubWVtYmVycy5nZXQobWVtYmVySUQpO1xuXHRjb25zdCBwcmVmaXggPSBwcmVmaXhXaXRoQXQgPyAnQCcgOiAnJztcblx0aWYgKG1lbWJlciAmJiBtZW1iZXIubmlja25hbWUgIT09IG51bGwpIHJldHVybiBwcmVmaXggKyBtZW1iZXIubmlja25hbWU7XG5cblx0Y29uc3QgdXNlciA9IGFyY2hpdmUudXNlcnMuZ2V0KG1lbWJlcklEKTtcblx0aWYgKHVzZXIgJiYgdXNlci51c2VybmFtZSAhPT0gJ0RlbGV0ZWQgVXNlcicpIHJldHVybiBwcmVmaXggKyB1c2VyLnVzZXJuYW1lO1xuXG5cdHJldHVybiBgPEAke21lbWJlcklEfT5gO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./util/get-member-name.js\n");

/***/ }),

/***/ "./util/member-role-color.js":
/*!***********************************!*\
  !*** ./util/member-role-color.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// TODO: return null if there's no color-- such usernames appear white in chat but grey in Discord's user list\nconst getMemberColor = (memberID, archive) => {\n  if (archive.type !== 'server' || !archive.data.members.has(memberID)) return 'white';\n  const member = archive.data.members.get(memberID);\n  let highestRolePosition = -1;\n  let highestRoleColor = 'white';\n\n  for (const role of member.roles) {\n    // Black means \"no color\" for some reason. Fun fact: this is actually how Discord represents it-- try picking\n    // the color black for a role, and it won't work.\n    if (role.color === '#000000') continue;\n\n    if (role.position > highestRolePosition) {\n      highestRolePosition = role.position;\n      highestRoleColor = role.color;\n    }\n  }\n\n  return highestRoleColor;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMemberColor);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL21lbWJlci1yb2xlLWNvbG9yLmpzP2Q4ZTQiXSwibmFtZXMiOlsiZ2V0TWVtYmVyQ29sb3IiLCJtZW1iZXJJRCIsImFyY2hpdmUiLCJ0eXBlIiwiZGF0YSIsIm1lbWJlcnMiLCJoYXMiLCJtZW1iZXIiLCJnZXQiLCJoaWdoZXN0Um9sZVBvc2l0aW9uIiwiaGlnaGVzdFJvbGVDb2xvciIsInJvbGUiLCJyb2xlcyIsImNvbG9yIiwicG9zaXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLE1BQU1BLGNBQWMsR0FBRyxDQUFDQyxRQUFELEVBQVdDLE9BQVgsS0FBdUI7QUFDN0MsTUFBSUEsT0FBTyxDQUFDQyxJQUFSLEtBQWlCLFFBQWpCLElBQTZCLENBQUNELE9BQU8sQ0FBQ0UsSUFBUixDQUFhQyxPQUFiLENBQXFCQyxHQUFyQixDQUF5QkwsUUFBekIsQ0FBbEMsRUFBc0UsT0FBTyxPQUFQO0FBQ3RFLFFBQU1NLE1BQU0sR0FBR0wsT0FBTyxDQUFDRSxJQUFSLENBQWFDLE9BQWIsQ0FBcUJHLEdBQXJCLENBQXlCUCxRQUF6QixDQUFmO0FBRUEsTUFBSVEsbUJBQW1CLEdBQUcsQ0FBQyxDQUEzQjtBQUNBLE1BQUlDLGdCQUFnQixHQUFHLE9BQXZCOztBQUVBLE9BQUssTUFBTUMsSUFBWCxJQUFtQkosTUFBTSxDQUFDSyxLQUExQixFQUFpQztBQUNoQztBQUNBO0FBQ0EsUUFBSUQsSUFBSSxDQUFDRSxLQUFMLEtBQWUsU0FBbkIsRUFBOEI7O0FBQzlCLFFBQUlGLElBQUksQ0FBQ0csUUFBTCxHQUFnQkwsbUJBQXBCLEVBQXlDO0FBQ3hDQSx5QkFBbUIsR0FBR0UsSUFBSSxDQUFDRyxRQUEzQjtBQUNBSixzQkFBZ0IsR0FBR0MsSUFBSSxDQUFDRSxLQUF4QjtBQUNBO0FBQ0Q7O0FBRUQsU0FBT0gsZ0JBQVA7QUFDQSxDQWxCRDs7QUFvQkEsaUVBQWVWLGNBQWYiLCJmaWxlIjoiLi91dGlsL21lbWJlci1yb2xlLWNvbG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETzogcmV0dXJuIG51bGwgaWYgdGhlcmUncyBubyBjb2xvci0tIHN1Y2ggdXNlcm5hbWVzIGFwcGVhciB3aGl0ZSBpbiBjaGF0IGJ1dCBncmV5IGluIERpc2NvcmQncyB1c2VyIGxpc3RcbmNvbnN0IGdldE1lbWJlckNvbG9yID0gKG1lbWJlcklELCBhcmNoaXZlKSA9PiB7XG5cdGlmIChhcmNoaXZlLnR5cGUgIT09ICdzZXJ2ZXInIHx8ICFhcmNoaXZlLmRhdGEubWVtYmVycy5oYXMobWVtYmVySUQpKSByZXR1cm4gJ3doaXRlJztcblx0Y29uc3QgbWVtYmVyID0gYXJjaGl2ZS5kYXRhLm1lbWJlcnMuZ2V0KG1lbWJlcklEKTtcblxuXHRsZXQgaGlnaGVzdFJvbGVQb3NpdGlvbiA9IC0xO1xuXHRsZXQgaGlnaGVzdFJvbGVDb2xvciA9ICd3aGl0ZSc7XG5cblx0Zm9yIChjb25zdCByb2xlIG9mIG1lbWJlci5yb2xlcykge1xuXHRcdC8vIEJsYWNrIG1lYW5zIFwibm8gY29sb3JcIiBmb3Igc29tZSByZWFzb24uIEZ1biBmYWN0OiB0aGlzIGlzIGFjdHVhbGx5IGhvdyBEaXNjb3JkIHJlcHJlc2VudHMgaXQtLSB0cnkgcGlja2luZ1xuXHRcdC8vIHRoZSBjb2xvciBibGFjayBmb3IgYSByb2xlLCBhbmQgaXQgd29uJ3Qgd29yay5cblx0XHRpZiAocm9sZS5jb2xvciA9PT0gJyMwMDAwMDAnKSBjb250aW51ZTtcblx0XHRpZiAocm9sZS5wb3NpdGlvbiA+IGhpZ2hlc3RSb2xlUG9zaXRpb24pIHtcblx0XHRcdGhpZ2hlc3RSb2xlUG9zaXRpb24gPSByb2xlLnBvc2l0aW9uO1xuXHRcdFx0aGlnaGVzdFJvbGVDb2xvciA9IHJvbGUuY29sb3I7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGhpZ2hlc3RSb2xlQ29sb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRNZW1iZXJDb2xvcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./util/member-role-color.js\n");

/***/ }),

/***/ "./util/should-split-messages.js":
/*!***************************************!*\
  !*** ./util/should-split-messages.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst shouldSplitMessages = (first, second) => {\n  return first.authorID !== second.authorID || second.referencedMessage !== null;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (shouldSplitMessages);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL3Nob3VsZC1zcGxpdC1tZXNzYWdlcy5qcz81MjRmIl0sIm5hbWVzIjpbInNob3VsZFNwbGl0TWVzc2FnZXMiLCJmaXJzdCIsInNlY29uZCIsImF1dGhvcklEIiwicmVmZXJlbmNlZE1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxtQkFBbUIsR0FBRyxDQUFDQyxLQUFELEVBQVFDLE1BQVIsS0FBbUI7QUFDOUMsU0FBT0QsS0FBSyxDQUFDRSxRQUFOLEtBQW1CRCxNQUFNLENBQUNDLFFBQTFCLElBQXNDRCxNQUFNLENBQUNFLGlCQUFQLEtBQTZCLElBQTFFO0FBQ0EsQ0FGRDs7QUFJQSxpRUFBZUosbUJBQWYiLCJmaWxlIjoiLi91dGlsL3Nob3VsZC1zcGxpdC1tZXNzYWdlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNob3VsZFNwbGl0TWVzc2FnZXMgPSAoZmlyc3QsIHNlY29uZCkgPT4ge1xuXHRyZXR1cm4gZmlyc3QuYXV0aG9ySUQgIT09IHNlY29uZC5hdXRob3JJRCB8fCBzZWNvbmQucmVmZXJlbmNlZE1lc3NhZ2UgIT09IG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzaG91bGRTcGxpdE1lc3NhZ2VzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./util/should-split-messages.js\n");

/***/ }),

/***/ "./components/App/style.scss":
/*!***********************************!*\
  !*** ./components/App/style.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"app\":\"style_app_3v5cP\",\"channels-and-messages\":\"style_channels-and-messages_127by\",\"channel-list-panel\":\"style_channel-list-panel_FYZ7i\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0FwcC9zdHlsZS5zY3NzPzViMmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsaUVBQWUsQ0FBQywwSUFBMEkiLCJmaWxlIjoiLi9jb21wb25lbnRzL0FwcC9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJhcHBcIjpcInN0eWxlX2FwcF8zdjVjUFwiLFwiY2hhbm5lbHMtYW5kLW1lc3NhZ2VzXCI6XCJzdHlsZV9jaGFubmVscy1hbmQtbWVzc2FnZXNfMTI3YnlcIixcImNoYW5uZWwtbGlzdC1wYW5lbFwiOlwic3R5bGVfY2hhbm5lbC1saXN0LXBhbmVsX0ZZWjdpXCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/App/style.scss\n");

/***/ }),

/***/ "./components/Attachment/style.scss":
/*!******************************************!*\
  !*** ./components/Attachment/style.scss ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"attachment\":\"style_attachment_1waLy\",\"attachment-file\":\"style_attachment-file_1ckYT\",\"attachment-image\":\"style_attachment-image_1rWXy\",\"attachment-size\":\"style_attachment-size_l19XM\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0F0dGFjaG1lbnQvc3R5bGUuc2Nzcz9mOTUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGlFQUFlLENBQUMsd0xBQXdMIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9BdHRhY2htZW50L3N0eWxlLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcImF0dGFjaG1lbnRcIjpcInN0eWxlX2F0dGFjaG1lbnRfMXdhTHlcIixcImF0dGFjaG1lbnQtZmlsZVwiOlwic3R5bGVfYXR0YWNobWVudC1maWxlXzFja1lUXCIsXCJhdHRhY2htZW50LWltYWdlXCI6XCJzdHlsZV9hdHRhY2htZW50LWltYWdlXzFyV1h5XCIsXCJhdHRhY2htZW50LXNpemVcIjpcInN0eWxlX2F0dGFjaG1lbnQtc2l6ZV9sMTlYTVwifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Attachment/style.scss\n");

/***/ }),

/***/ "./components/Avatar/style.scss":
/*!**************************************!*\
  !*** ./components/Avatar/style.scss ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"avatar\":\"style_avatar_3GO5K\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0F2YXRhci9zdHlsZS5zY3NzP2IxMmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsaUVBQWUsQ0FBQyw4QkFBOEIiLCJmaWxlIjoiLi9jb21wb25lbnRzL0F2YXRhci9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJhdmF0YXJcIjpcInN0eWxlX2F2YXRhcl8zR081S1wifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Avatar/style.scss\n");

/***/ }),

/***/ "./components/ChannelList/style.scss":
/*!*******************************************!*\
  !*** ./components/ChannelList/style.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"channel-list\":\"style_channel-list_1Y6TS\",\"collapsed\":\"style_collapsed_PB3Xs\",\"channel\":\"style_channel_1SJ-Q\",\"selected\":\"style_selected_7pzso\",\"text-channel\":\"style_text-channel_QVsHK\",\"voice-channel\":\"style_voice-channel_xWp4A\",\"category-channel\":\"style_category-channel_3rQRf\",\"channel-icon\":\"style_channel-icon_3mJlI\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0NoYW5uZWxMaXN0L3N0eWxlLnNjc3M/ZTg4MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLGtVQUFrVSIsImZpbGUiOiIuL2NvbXBvbmVudHMvQ2hhbm5lbExpc3Qvc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiY2hhbm5lbC1saXN0XCI6XCJzdHlsZV9jaGFubmVsLWxpc3RfMVk2VFNcIixcImNvbGxhcHNlZFwiOlwic3R5bGVfY29sbGFwc2VkX1BCM1hzXCIsXCJjaGFubmVsXCI6XCJzdHlsZV9jaGFubmVsXzFTSi1RXCIsXCJzZWxlY3RlZFwiOlwic3R5bGVfc2VsZWN0ZWRfN3B6c29cIixcInRleHQtY2hhbm5lbFwiOlwic3R5bGVfdGV4dC1jaGFubmVsX1FWc0hLXCIsXCJ2b2ljZS1jaGFubmVsXCI6XCJzdHlsZV92b2ljZS1jaGFubmVsX3hXcDRBXCIsXCJjYXRlZ29yeS1jaGFubmVsXCI6XCJzdHlsZV9jYXRlZ29yeS1jaGFubmVsXzNyUVJmXCIsXCJjaGFubmVsLWljb25cIjpcInN0eWxlX2NoYW5uZWwtaWNvbl8zbUpsSVwifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/ChannelList/style.scss\n");

/***/ }),

/***/ "./components/ChannelView/style.scss":
/*!*******************************************!*\
  !*** ./components/ChannelView/style.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"channel-view\":\"style_channel-view_12bWD\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0NoYW5uZWxWaWV3L3N0eWxlLnNjc3M/NzVhOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLDBDQUEwQyIsImZpbGUiOiIuL2NvbXBvbmVudHMvQ2hhbm5lbFZpZXcvc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiY2hhbm5lbC12aWV3XCI6XCJzdHlsZV9jaGFubmVsLXZpZXdfMTJiV0RcIn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/ChannelView/style.scss\n");

/***/ }),

/***/ "./components/Emoji/style.scss":
/*!*************************************!*\
  !*** ./components/Emoji/style.scss ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"emoji-container\":\"style_emoji-container_4nMgj\",\"emoji\":\"style_emoji_2D18y\",\"reaction-emoji\":\"style_reaction-emoji_22uC9\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0Vtb2ppL3N0eWxlLnNjc3M/MjI2OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLDBIQUEwSCIsImZpbGUiOiIuL2NvbXBvbmVudHMvRW1vamkvc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiZW1vamktY29udGFpbmVyXCI6XCJzdHlsZV9lbW9qaS1jb250YWluZXJfNG5NZ2pcIixcImVtb2ppXCI6XCJzdHlsZV9lbW9qaV8yRDE4eVwiLFwicmVhY3Rpb24tZW1vamlcIjpcInN0eWxlX3JlYWN0aW9uLWVtb2ppXzIydUM5XCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Emoji/style.scss\n");

/***/ }),

/***/ "./components/ErrorBoundary/style.scss":
/*!*********************************************!*\
  !*** ./components/ErrorBoundary/style.scss ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"crash-wrapper\":\"style_crash-wrapper_2tIN8\",\"crash-header\":\"style_crash-header_3Ca9S\",\"error\":\"style_error_aHCrq\",\"stack\":\"style_stack_1ZqZo\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0Vycm9yQm91bmRhcnkvc3R5bGUuc2Nzcz9iMzYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGlFQUFlLENBQUMsOElBQThJIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9FcnJvckJvdW5kYXJ5L3N0eWxlLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcImNyYXNoLXdyYXBwZXJcIjpcInN0eWxlX2NyYXNoLXdyYXBwZXJfMnRJTjhcIixcImNyYXNoLWhlYWRlclwiOlwic3R5bGVfY3Jhc2gtaGVhZGVyXzNDYTlTXCIsXCJlcnJvclwiOlwic3R5bGVfZXJyb3JfYUhDcnFcIixcInN0YWNrXCI6XCJzdHlsZV9zdGFja18xWnFab1wifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/ErrorBoundary/style.scss\n");

/***/ }),

/***/ "./components/Header/style.scss":
/*!**************************************!*\
  !*** ./components/Header/style.scss ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"header\":\"style_header_C501l\",\"channel-info\":\"style_channel-info_i1gwW\",\"channel-topic\":\"style_channel-topic_2OnvJ\",\"buttons\":\"style_buttons_1i6F6\",\"button\":\"style_button_3OMqy\",\"active\":\"style_active_vKRfM\",\"disabled\":\"style_disabled_38jIT\",\"sidebar-open\":\"style_sidebar-open_1Kaeb\",\"sidebar-close\":\"style_sidebar-close_2xEcj\",\"icon-pinned-messages\":\"style_icon-pinned-messages_2mwv4\",\"pinned-messages\":\"style_pinned-messages__MheB\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0hlYWRlci9zdHlsZS5zY3NzPzE2OTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsaUVBQWUsQ0FBQyxrYkFBa2IiLCJmaWxlIjoiLi9jb21wb25lbnRzL0hlYWRlci9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJoZWFkZXJcIjpcInN0eWxlX2hlYWRlcl9DNTAxbFwiLFwiY2hhbm5lbC1pbmZvXCI6XCJzdHlsZV9jaGFubmVsLWluZm9faTFnd1dcIixcImNoYW5uZWwtdG9waWNcIjpcInN0eWxlX2NoYW5uZWwtdG9waWNfMk9udkpcIixcImJ1dHRvbnNcIjpcInN0eWxlX2J1dHRvbnNfMWk2RjZcIixcImJ1dHRvblwiOlwic3R5bGVfYnV0dG9uXzNPTXF5XCIsXCJhY3RpdmVcIjpcInN0eWxlX2FjdGl2ZV92S1JmTVwiLFwiZGlzYWJsZWRcIjpcInN0eWxlX2Rpc2FibGVkXzM4aklUXCIsXCJzaWRlYmFyLW9wZW5cIjpcInN0eWxlX3NpZGViYXItb3Blbl8xS2FlYlwiLFwic2lkZWJhci1jbG9zZVwiOlwic3R5bGVfc2lkZWJhci1jbG9zZV8yeEVjalwiLFwiaWNvbi1waW5uZWQtbWVzc2FnZXNcIjpcInN0eWxlX2ljb24tcGlubmVkLW1lc3NhZ2VzXzJtd3Y0XCIsXCJwaW5uZWQtbWVzc2FnZXNcIjpcInN0eWxlX3Bpbm5lZC1tZXNzYWdlc19fTWhlQlwifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Header/style.scss\n");

/***/ }),

/***/ "./components/JumpableMessage/style.scss":
/*!***********************************************!*\
  !*** ./components/JumpableMessage/style.scss ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"jumpable-message\":\"style_jumpable-message_1JL8E\",\"jump\":\"style_jump_278lq\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0p1bXBhYmxlTWVzc2FnZS9zdHlsZS5zY3NzP2FmYmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsaUVBQWUsQ0FBQyw0RUFBNEUiLCJmaWxlIjoiLi9jb21wb25lbnRzL0p1bXBhYmxlTWVzc2FnZS9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJqdW1wYWJsZS1tZXNzYWdlXCI6XCJzdHlsZV9qdW1wYWJsZS1tZXNzYWdlXzFKTDhFXCIsXCJqdW1wXCI6XCJzdHlsZV9qdW1wXzI3OGxxXCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/JumpableMessage/style.scss\n");

/***/ }),

/***/ "./components/Markdown/style.scss":
/*!****************************************!*\
  !*** ./components/Markdown/style.scss ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"spoiler\":\"style_spoiler_1rLLL\",\"open\":\"style_open_20oRy\",\"code\":\"style_code_h5FTs\",\"block-quote\":\"style_block-quote_2QLNt\",\"mention\":\"style_mention_2WGwn\",\"user\":\"style_user_1vyd5\",\"channel\":\"style_channel_3e4zx\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL01hcmtkb3duL3N0eWxlLnNjc3M/YTMwNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLHNOQUFzTiIsImZpbGUiOiIuL2NvbXBvbmVudHMvTWFya2Rvd24vc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wic3BvaWxlclwiOlwic3R5bGVfc3BvaWxlcl8xckxMTFwiLFwib3BlblwiOlwic3R5bGVfb3Blbl8yMG9SeVwiLFwiY29kZVwiOlwic3R5bGVfY29kZV9oNUZUc1wiLFwiYmxvY2stcXVvdGVcIjpcInN0eWxlX2Jsb2NrLXF1b3RlXzJRTE50XCIsXCJtZW50aW9uXCI6XCJzdHlsZV9tZW50aW9uXzJXR3duXCIsXCJ1c2VyXCI6XCJzdHlsZV91c2VyXzF2eWQ1XCIsXCJjaGFubmVsXCI6XCJzdHlsZV9jaGFubmVsXzNlNHp4XCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Markdown/style.scss\n");

/***/ }),

/***/ "./components/MessageList/style.scss":
/*!*******************************************!*\
  !*** ./components/MessageList/style.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"message-list\":\"style_message-list_2ffo_\",\"message-inner\":\"style_message-inner_2qJrw\",\"message-avatar\":\"style_message-avatar_2vkGe\",\"message-header\":\"style_message-header_3ESV_\",\"message-poster\":\"style_message-poster_ogIL0\",\"message-timestamp\":\"style_message-timestamp_RrFB-\",\"message-id\":\"style_message-id_2ZpJB\",\"edited\":\"style_edited_1mfMK\",\"open\":\"style_open_28BzO\",\"closed\":\"style_closed_1sqtJ\",\"edited-date\":\"style_edited-date_tUzYB\",\"message-content\":\"style_message-content_biUSg\",\"message-reactions\":\"style_message-reactions_1FIr3\",\"reaction\":\"style_reaction_3AnQl\",\"reaction-count\":\"style_reaction-count_3N04A\",\"replied-message\":\"style_replied-message_15W6G\",\"replied-poster\":\"style_replied-poster_hhNAK\",\"replied-content\":\"style_replied-content_2i9f9\",\"replied-attachments-icon\":\"style_replied-attachments-icon_2HHI2\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL01lc3NhZ2VMaXN0L3N0eWxlLnNjc3M/NTk3MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLDR6QkFBNHpCIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9NZXNzYWdlTGlzdC9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJtZXNzYWdlLWxpc3RcIjpcInN0eWxlX21lc3NhZ2UtbGlzdF8yZmZvX1wiLFwibWVzc2FnZS1pbm5lclwiOlwic3R5bGVfbWVzc2FnZS1pbm5lcl8ycUpyd1wiLFwibWVzc2FnZS1hdmF0YXJcIjpcInN0eWxlX21lc3NhZ2UtYXZhdGFyXzJ2a0dlXCIsXCJtZXNzYWdlLWhlYWRlclwiOlwic3R5bGVfbWVzc2FnZS1oZWFkZXJfM0VTVl9cIixcIm1lc3NhZ2UtcG9zdGVyXCI6XCJzdHlsZV9tZXNzYWdlLXBvc3Rlcl9vZ0lMMFwiLFwibWVzc2FnZS10aW1lc3RhbXBcIjpcInN0eWxlX21lc3NhZ2UtdGltZXN0YW1wX1JyRkItXCIsXCJtZXNzYWdlLWlkXCI6XCJzdHlsZV9tZXNzYWdlLWlkXzJacEpCXCIsXCJlZGl0ZWRcIjpcInN0eWxlX2VkaXRlZF8xbWZNS1wiLFwib3BlblwiOlwic3R5bGVfb3Blbl8yOEJ6T1wiLFwiY2xvc2VkXCI6XCJzdHlsZV9jbG9zZWRfMXNxdEpcIixcImVkaXRlZC1kYXRlXCI6XCJzdHlsZV9lZGl0ZWQtZGF0ZV90VXpZQlwiLFwibWVzc2FnZS1jb250ZW50XCI6XCJzdHlsZV9tZXNzYWdlLWNvbnRlbnRfYmlVU2dcIixcIm1lc3NhZ2UtcmVhY3Rpb25zXCI6XCJzdHlsZV9tZXNzYWdlLXJlYWN0aW9uc18xRklyM1wiLFwicmVhY3Rpb25cIjpcInN0eWxlX3JlYWN0aW9uXzNBblFsXCIsXCJyZWFjdGlvbi1jb3VudFwiOlwic3R5bGVfcmVhY3Rpb24tY291bnRfM04wNEFcIixcInJlcGxpZWQtbWVzc2FnZVwiOlwic3R5bGVfcmVwbGllZC1tZXNzYWdlXzE1VzZHXCIsXCJyZXBsaWVkLXBvc3RlclwiOlwic3R5bGVfcmVwbGllZC1wb3N0ZXJfaGhOQUtcIixcInJlcGxpZWQtY29udGVudFwiOlwic3R5bGVfcmVwbGllZC1jb250ZW50XzJpOWY5XCIsXCJyZXBsaWVkLWF0dGFjaG1lbnRzLWljb25cIjpcInN0eWxlX3JlcGxpZWQtYXR0YWNobWVudHMtaWNvbl8ySEhJMlwifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/MessageList/style.scss\n");

/***/ }),

/***/ "./components/MessageView/style.scss":
/*!*******************************************!*\
  !*** ./components/MessageView/style.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"messages-container\":\"style_messages-container_3MmvW\",\"messages\":\"style_messages_3ilye\",\"scrollbar\":\"style_scrollbar_xvuj6\",\"scrollbar-indicator\":\"style_scrollbar-indicator_bMP-G\",\"scrollbar-indicator-wrapper\":\"style_scrollbar-indicator-wrapper_IwaQJ\",\"scrollbar-range-wrapper\":\"style_scrollbar-range-wrapper_1uBe-\",\"scrollbar-range-top-wrapper\":\"style_scrollbar-range-top-wrapper_3JoNf\",\"scrollbar-range-bottom-wrapper\":\"style_scrollbar-range-bottom-wrapper_1K54D\",\"scrollbar-range-indicator\":\"style_scrollbar-range-indicator_2Y7Hm\",\"scrollbar-range-top\":\"style_scrollbar-range-top_OE9DP\",\"scrollbar-range-bottom\":\"style_scrollbar-range-bottom_3tbw_\",\"scrollbar-range-input\":\"style_scrollbar-range-input_2uLOb\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL01lc3NhZ2VWaWV3L3N0eWxlLnNjc3M/ZGY3OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLHdzQkFBd3NCIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9NZXNzYWdlVmlldy9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJtZXNzYWdlcy1jb250YWluZXJcIjpcInN0eWxlX21lc3NhZ2VzLWNvbnRhaW5lcl8zTW12V1wiLFwibWVzc2FnZXNcIjpcInN0eWxlX21lc3NhZ2VzXzNpbHllXCIsXCJzY3JvbGxiYXJcIjpcInN0eWxlX3Njcm9sbGJhcl94dnVqNlwiLFwic2Nyb2xsYmFyLWluZGljYXRvclwiOlwic3R5bGVfc2Nyb2xsYmFyLWluZGljYXRvcl9iTVAtR1wiLFwic2Nyb2xsYmFyLWluZGljYXRvci13cmFwcGVyXCI6XCJzdHlsZV9zY3JvbGxiYXItaW5kaWNhdG9yLXdyYXBwZXJfSXdhUUpcIixcInNjcm9sbGJhci1yYW5nZS13cmFwcGVyXCI6XCJzdHlsZV9zY3JvbGxiYXItcmFuZ2Utd3JhcHBlcl8xdUJlLVwiLFwic2Nyb2xsYmFyLXJhbmdlLXRvcC13cmFwcGVyXCI6XCJzdHlsZV9zY3JvbGxiYXItcmFuZ2UtdG9wLXdyYXBwZXJfM0pvTmZcIixcInNjcm9sbGJhci1yYW5nZS1ib3R0b20td3JhcHBlclwiOlwic3R5bGVfc2Nyb2xsYmFyLXJhbmdlLWJvdHRvbS13cmFwcGVyXzFLNTREXCIsXCJzY3JvbGxiYXItcmFuZ2UtaW5kaWNhdG9yXCI6XCJzdHlsZV9zY3JvbGxiYXItcmFuZ2UtaW5kaWNhdG9yXzJZN0htXCIsXCJzY3JvbGxiYXItcmFuZ2UtdG9wXCI6XCJzdHlsZV9zY3JvbGxiYXItcmFuZ2UtdG9wX09FOURQXCIsXCJzY3JvbGxiYXItcmFuZ2UtYm90dG9tXCI6XCJzdHlsZV9zY3JvbGxiYXItcmFuZ2UtYm90dG9tXzN0YndfXCIsXCJzY3JvbGxiYXItcmFuZ2UtaW5wdXRcIjpcInN0eWxlX3Njcm9sbGJhci1yYW5nZS1pbnB1dF8ydUxPYlwifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/MessageView/style.scss\n");

/***/ }),

/***/ "./components/Modal/style.scss":
/*!*************************************!*\
  !*** ./components/Modal/style.scss ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"modal-bg\":\"style_modal-bg_2cJDI\",\"fade\":\"style_fade_1w0KX\",\"modal-positioner\":\"style_modal-positioner_F8P48\",\"modal\":\"style_modal_LYvZS\",\"popup\":\"style_popup_1XomI\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL01vZGFsL3N0eWxlLnNjc3M/YTg1NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLHNLQUFzSyIsImZpbGUiOiIuL2NvbXBvbmVudHMvTW9kYWwvc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wibW9kYWwtYmdcIjpcInN0eWxlX21vZGFsLWJnXzJjSkRJXCIsXCJmYWRlXCI6XCJzdHlsZV9mYWRlXzF3MEtYXCIsXCJtb2RhbC1wb3NpdGlvbmVyXCI6XCJzdHlsZV9tb2RhbC1wb3NpdGlvbmVyX0Y4UDQ4XCIsXCJtb2RhbFwiOlwic3R5bGVfbW9kYWxfTFl2WlNcIixcInBvcHVwXCI6XCJzdHlsZV9wb3B1cF8xWG9tSVwifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Modal/style.scss\n");

/***/ }),

/***/ "./components/ReactionInfo/style.scss":
/*!********************************************!*\
  !*** ./components/ReactionInfo/style.scss ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"reaction-info\":\"style_reaction-info_kZjUx\",\"reactions\":\"style_reactions_1F-5T\",\"reaction\":\"style_reaction_PUcYj\",\"selected\":\"style_selected_1RHX6\",\"count\":\"style_count_3RD36\",\"reaction-users\":\"style_reaction-users_mft_4\",\"reaction-user\":\"style_reaction-user_1zDAM\",\"user-nickname\":\"style_user-nickname_2YFc3\",\"username\":\"style_username_3Q85t\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1JlYWN0aW9uSW5mby9zdHlsZS5zY3NzP2IwOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsaUVBQWUsQ0FBQyx3VkFBd1YiLCJmaWxlIjoiLi9jb21wb25lbnRzL1JlYWN0aW9uSW5mby9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJyZWFjdGlvbi1pbmZvXCI6XCJzdHlsZV9yZWFjdGlvbi1pbmZvX2taalV4XCIsXCJyZWFjdGlvbnNcIjpcInN0eWxlX3JlYWN0aW9uc18xRi01VFwiLFwicmVhY3Rpb25cIjpcInN0eWxlX3JlYWN0aW9uX1BVY1lqXCIsXCJzZWxlY3RlZFwiOlwic3R5bGVfc2VsZWN0ZWRfMVJIWDZcIixcImNvdW50XCI6XCJzdHlsZV9jb3VudF8zUkQzNlwiLFwicmVhY3Rpb24tdXNlcnNcIjpcInN0eWxlX3JlYWN0aW9uLXVzZXJzX21mdF80XCIsXCJyZWFjdGlvbi11c2VyXCI6XCJzdHlsZV9yZWFjdGlvbi11c2VyXzF6REFNXCIsXCJ1c2VyLW5pY2tuYW1lXCI6XCJzdHlsZV91c2VyLW5pY2tuYW1lXzJZRmMzXCIsXCJ1c2VybmFtZVwiOlwic3R5bGVfdXNlcm5hbWVfM1E4NXRcIn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/ReactionInfo/style.scss\n");

/***/ }),

/***/ "./components/Sidebar/FindPanel/style.scss":
/*!*************************************************!*\
  !*** ./components/Sidebar/FindPanel/style.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"find-inner\":\"style_find-inner_1s_Jq\",\"find-controls\":\"style_find-controls_1FJRp\",\"form-row\":\"style_form-row_gW3xp\",\"form-label\":\"style_form-label_1X74A\",\"found-messages\":\"style_found-messages_22yuz\",\"paginator\":\"style_paginator_2gIo7\",\"page-button\":\"style_page-button_oV5pd\",\"active\":\"style_active_3A-9-\",\"disabled\":\"style_disabled_2XXCW\",\"prev\":\"style_prev_2RL7g\",\"next\":\"style_next_3T9NK\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1NpZGViYXIvRmluZFBhbmVsL3N0eWxlLnNjc3M/M2NiZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLHdZQUF3WSIsImZpbGUiOiIuL2NvbXBvbmVudHMvU2lkZWJhci9GaW5kUGFuZWwvc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiZmluZC1pbm5lclwiOlwic3R5bGVfZmluZC1pbm5lcl8xc19KcVwiLFwiZmluZC1jb250cm9sc1wiOlwic3R5bGVfZmluZC1jb250cm9sc18xRkpScFwiLFwiZm9ybS1yb3dcIjpcInN0eWxlX2Zvcm0tcm93X2dXM3hwXCIsXCJmb3JtLWxhYmVsXCI6XCJzdHlsZV9mb3JtLWxhYmVsXzFYNzRBXCIsXCJmb3VuZC1tZXNzYWdlc1wiOlwic3R5bGVfZm91bmQtbWVzc2FnZXNfMjJ5dXpcIixcInBhZ2luYXRvclwiOlwic3R5bGVfcGFnaW5hdG9yXzJnSW83XCIsXCJwYWdlLWJ1dHRvblwiOlwic3R5bGVfcGFnZS1idXR0b25fb1Y1cGRcIixcImFjdGl2ZVwiOlwic3R5bGVfYWN0aXZlXzNBLTktXCIsXCJkaXNhYmxlZFwiOlwic3R5bGVfZGlzYWJsZWRfMlhYQ1dcIixcInByZXZcIjpcInN0eWxlX3ByZXZfMlJMN2dcIixcIm5leHRcIjpcInN0eWxlX25leHRfM1Q5TktcIn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Sidebar/FindPanel/style.scss\n");

/***/ }),

/***/ "./components/Sidebar/UsersPanel/style.scss":
/*!**************************************************!*\
  !*** ./components/Sidebar/UsersPanel/style.scss ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"users-list\":\"style_users-list_2BZP5\",\"user\":\"style_user_ezzR0\",\"user-avatar\":\"style_user-avatar_konq_\",\"role-group\":\"style_role-group_2lxdf\",\"role-header\":\"style_role-header_2l1hT\",\"icon-owner\":\"style_icon-owner_1aO-t\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1NpZGViYXIvVXNlcnNQYW5lbC9zdHlsZS5zY3NzP2MxYjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsaUVBQWUsQ0FBQyw0TkFBNE4iLCJmaWxlIjoiLi9jb21wb25lbnRzL1NpZGViYXIvVXNlcnNQYW5lbC9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJ1c2Vycy1saXN0XCI6XCJzdHlsZV91c2Vycy1saXN0XzJCWlA1XCIsXCJ1c2VyXCI6XCJzdHlsZV91c2VyX2V6elIwXCIsXCJ1c2VyLWF2YXRhclwiOlwic3R5bGVfdXNlci1hdmF0YXJfa29ucV9cIixcInJvbGUtZ3JvdXBcIjpcInN0eWxlX3JvbGUtZ3JvdXBfMmx4ZGZcIixcInJvbGUtaGVhZGVyXCI6XCJzdHlsZV9yb2xlLWhlYWRlcl8ybDFoVFwiLFwiaWNvbi1vd25lclwiOlwic3R5bGVfaWNvbi1vd25lcl8xYU8tdFwifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Sidebar/UsersPanel/style.scss\n");

/***/ }),

/***/ "./components/Sidebar/style.scss":
/*!***************************************!*\
  !*** ./components/Sidebar/style.scss ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"sidebar\":\"style_sidebar_3Abiu\",\"collapsed\":\"style_collapsed_9fOr0\",\"sidebar-toggle\":\"style_sidebar-toggle_xNrxz\",\"tabs\":\"style_tabs_zwqzB\",\"tab\":\"style_tab_ed0f1\",\"selected\":\"style_selected_rA6my\",\"icon\":\"style_icon_1tc1R\",\"icon-find\":\"style_icon-find_cu6-I\",\"icon-users\":\"style_icon-users_1xt78\",\"panel\":\"style_panel_2biBc\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1NpZGViYXIvc3R5bGUuc2Nzcz8yNjJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGlFQUFlLENBQUMsc1VBQXNVIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9TaWRlYmFyL3N0eWxlLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcInNpZGViYXJcIjpcInN0eWxlX3NpZGViYXJfM0FiaXVcIixcImNvbGxhcHNlZFwiOlwic3R5bGVfY29sbGFwc2VkXzlmT3IwXCIsXCJzaWRlYmFyLXRvZ2dsZVwiOlwic3R5bGVfc2lkZWJhci10b2dnbGVfeE5yeHpcIixcInRhYnNcIjpcInN0eWxlX3RhYnNfendxekJcIixcInRhYlwiOlwic3R5bGVfdGFiX2VkMGYxXCIsXCJzZWxlY3RlZFwiOlwic3R5bGVfc2VsZWN0ZWRfckE2bXlcIixcImljb25cIjpcInN0eWxlX2ljb25fMXRjMVJcIixcImljb24tZmluZFwiOlwic3R5bGVfaWNvbi1maW5kX2N1Ni1JXCIsXCJpY29uLXVzZXJzXCI6XCJzdHlsZV9pY29uLXVzZXJzXzF4dDc4XCIsXCJwYW5lbFwiOlwic3R5bGVfcGFuZWxfMmJpQmNcIn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Sidebar/style.scss\n");

/***/ }),

/***/ "./components/Toggle/style.scss":
/*!**************************************!*\
  !*** ./components/Toggle/style.scss ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"hidden-checkbox\":\"style_hidden-checkbox_1VAKv\",\"toggle\":\"style_toggle_1TxiF\",\"checked\":\"style_checked_1eHQ1\",\"slider\":\"style_slider_2Ui3P\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1RvZ2dsZS9zdHlsZS5zY3NzPzRiZWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsaUVBQWUsQ0FBQyw0SUFBNEkiLCJmaWxlIjoiLi9jb21wb25lbnRzL1RvZ2dsZS9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJoaWRkZW4tY2hlY2tib3hcIjpcInN0eWxlX2hpZGRlbi1jaGVja2JveF8xVkFLdlwiLFwidG9nZ2xlXCI6XCJzdHlsZV90b2dnbGVfMVR4aUZcIixcImNoZWNrZWRcIjpcInN0eWxlX2NoZWNrZWRfMWVIUTFcIixcInNsaWRlclwiOlwic3R5bGVfc2xpZGVyXzJVaTNQXCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Toggle/style.scss\n");

/***/ }),

/***/ "./components/Tooltip/style.scss":
/*!***************************************!*\
  !*** ./components/Tooltip/style.scss ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"tooltip\":\"style_tooltip_M75t2\",\"right\":\"style_right_39NJc\",\"left\":\"style_left_neK2R\",\"top\":\"style_top_L4fN9\",\"bottom\":\"style_bottom_2qaLt\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1Rvb2x0aXAvc3R5bGUuc2Nzcz9hMWRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGlFQUFlLENBQUMsNElBQTRJIiwiZmlsZSI6Ii4vY29tcG9uZW50cy9Ub29sdGlwL3N0eWxlLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcInRvb2x0aXBcIjpcInN0eWxlX3Rvb2x0aXBfTTc1dDJcIixcInJpZ2h0XCI6XCJzdHlsZV9yaWdodF8zOU5KY1wiLFwibGVmdFwiOlwic3R5bGVfbGVmdF9uZUsyUlwiLFwidG9wXCI6XCJzdHlsZV90b3BfTDRmTjlcIixcImJvdHRvbVwiOlwic3R5bGVfYm90dG9tXzJxYUx0XCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Tooltip/style.scss\n");

/***/ }),

/***/ "./components/UserInfo/style.scss":
/*!****************************************!*\
  !*** ./components/UserInfo/style.scss ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"user-infobox\":\"style_user-infobox_3u14T\",\"avatar\":\"style_avatar_16X10\",\"user-discriminator\":\"style_user-discriminator_1JjQG\",\"user-nickname\":\"style_user-nickname_28T4k\",\"user-id\":\"style_user-id_2hhl9\",\"user-joined-timestamp\":\"style_user-joined-timestamp_1trJL\",\"role\":\"style_role_1YXSJ\",\"role-color\":\"style_role-color_3lHMB\",\"role-name\":\"style_role-name_1tDhO\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1VzZXJJbmZvL3N0eWxlLnNjc3M/MTQ4OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLDBXQUEwVyIsImZpbGUiOiIuL2NvbXBvbmVudHMvVXNlckluZm8vc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1widXNlci1pbmZvYm94XCI6XCJzdHlsZV91c2VyLWluZm9ib3hfM3UxNFRcIixcImF2YXRhclwiOlwic3R5bGVfYXZhdGFyXzE2WDEwXCIsXCJ1c2VyLWRpc2NyaW1pbmF0b3JcIjpcInN0eWxlX3VzZXItZGlzY3JpbWluYXRvcl8xSmpRR1wiLFwidXNlci1uaWNrbmFtZVwiOlwic3R5bGVfdXNlci1uaWNrbmFtZV8yOFQ0a1wiLFwidXNlci1pZFwiOlwic3R5bGVfdXNlci1pZF8yaGhsOVwiLFwidXNlci1qb2luZWQtdGltZXN0YW1wXCI6XCJzdHlsZV91c2VyLWpvaW5lZC10aW1lc3RhbXBfMXRySkxcIixcInJvbGVcIjpcInN0eWxlX3JvbGVfMVlYU0pcIixcInJvbGUtY29sb3JcIjpcInN0eWxlX3JvbGUtY29sb3JfM2xITUJcIixcInJvbGUtbmFtZVwiOlwic3R5bGVfcm9sZS1uYW1lXzF0RGhPXCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/UserInfo/style.scss\n");

/***/ }),

/***/ "../vendor/normalize.css":
/*!*******************************!*\
  !*** ../vendor/normalize.css ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vdmVuZG9yL25vcm1hbGl6ZS5jc3M/MjVjNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJmaWxlIjoiLi4vdmVuZG9yL25vcm1hbGl6ZS5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../vendor/normalize.css\n");

/***/ }),

/***/ "./util/emojis.json":
/*!**************************!*\
  !*** ./util/emojis.json ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"😀":["grinning"],"😃":["smiley"],"😄":["smile"],"😁":["grin"],"😆":["laughing","satisfied"],"😅":["sweat_smile"],"😂":["joy"],"🤣":["rofl","rolling_on_the_floor_laughing"],"☺️":["relaxed"],"😊":["blush"],"😇":["innocent"],"🙂":["slight_smile","slightly_smiling_face"],"🙃":["upside_down","upside_down_face"],"😉":["wink"],"😌":["relieved"],"🥲":["smiling_face_with_tear"],"😍":["heart_eyes"],"🥰":["smiling_face_with_3_hearts"],"😘":["kissing_heart"],"😗":["kissing"],"😙":["kissing_smiling_eyes"],"😚":["kissing_closed_eyes"],"😋":["yum"],"😛":["stuck_out_tongue"],"😝":["stuck_out_tongue_closed_eyes"],"😜":["stuck_out_tongue_winking_eye"],"🤪":["zany_face"],"🤨":["face_with_raised_eyebrow"],"🧐":["face_with_monocle"],"🤓":["nerd","nerd_face"],"😎":["sunglasses"],"🤩":["star_struck"],"🥳":["partying_face"],"😏":["smirk"],"😒":["unamused"],"😞":["disappointed"],"😔":["pensive"],"😟":["worried"],"😕":["confused"],"🙁":["slight_frown","slightly_frowning_face"],"☹️":["frowning2","white_frowning_face"],"😣":["persevere"],"😖":["confounded"],"😫":["tired_face"],"😩":["weary"],"🥺":["pleading_face"],"😢":["cry"],"😭":["sob"],"😤":["triumph"],"😠":["angry"],"😡":["rage"],"🤬":["face_with_symbols_over_mouth"],"🤯":["exploding_head"],"😳":["flushed"],"🥵":["hot_face"],"🥶":["cold_face"],"😱":["scream"],"😨":["fearful"],"😰":["cold_sweat"],"😥":["disappointed_relieved"],"😓":["sweat"],"🤗":["hugging","hugging_face"],"🤔":["thinking","thinking_face"],"🤭":["face_with_hand_over_mouth"],"🥱":["yawning_face"],"🤫":["shushing_face"],"🤥":["lying_face","liar"],"😶":["no_mouth"],"😐":["neutral_face"],"😑":["expressionless"],"😬":["grimacing"],"🙄":["rolling_eyes","face_with_rolling_eyes"],"😯":["hushed"],"😦":["frowning"],"😧":["anguished"],"😮":["open_mouth"],"😲":["astonished"],"😴":["sleeping"],"🤤":["drooling_face","drool"],"😪":["sleepy"],"😵":["dizzy_face"],"🤐":["zipper_mouth","zipper_mouth_face"],"🥴":["woozy_face"],"🤢":["nauseated_face","sick"],"🤮":["face_vomiting"],"🤧":["sneezing_face","sneeze"],"😷":["mask"],"🤒":["thermometer_face","face_with_thermometer"],"🤕":["head_bandage","face_with_head_bandage"],"🤑":["money_mouth","money_mouth_face"],"🤠":["cowboy","face_with_cowboy_hat"],"🥸":["disguised_face"],"😈":["smiling_imp"],"👿":["imp"],"👹":["japanese_ogre"],"👺":["japanese_goblin"],"🤡":["clown","clown_face"],"💩":["poop","shit","hankey","poo"],"👻":["ghost"],"💀":["skull","skeleton"],"☠️":["skull_crossbones","skull_and_crossbones"],"👽":["alien"],"👾":["space_invader"],"🤖":["robot","robot_face"],"🎃":["jack_o_lantern"],"😺":["smiley_cat"],"😸":["smile_cat"],"😹":["joy_cat"],"😻":["heart_eyes_cat"],"😼":["smirk_cat"],"😽":["kissing_cat"],"🙀":["scream_cat"],"😿":["crying_cat_face"],"😾":["pouting_cat"],"🤲":["palms_up_together"],"👐":["open_hands"],"🙌":["raised_hands"],"👏":["clap"],"🤝":["handshake","shaking_hands"],"👍":["thumbsup","+1","thumbup"],"👎":["thumbsdown","-1","thumbdown"],"👊":["punch"],"✊":["fist"],"🤛":["left_facing_fist","left_fist"],"🤜":["right_facing_fist","right_fist"],"🤞":["fingers_crossed","hand_with_index_and_middle_finger_crossed"],"✌️":["v"],"🤟":["love_you_gesture"],"🤘":["metal","sign_of_the_horns"],"👌":["ok_hand"],"🤏":["pinching_hand"],"🤌":["pinched_fingers"],"👈":["point_left"],"👉":["point_right"],"👆":["point_up_2"],"👇":["point_down"],"☝️":["point_up"],"✋":["raised_hand"],"🤚":["raised_back_of_hand","back_of_hand"],"🖐️":["hand_splayed","raised_hand_with_fingers_splayed"],"🖖":["vulcan","raised_hand_with_part_between_middle_and_ring_fingers"],"👋":["wave"],"🤙":["call_me","call_me_hand"],"💪":["muscle"],"🦾":["mechanical_arm"],"🖕":["middle_finger","reversed_hand_with_middle_finger_extended"],"✍️":["writing_hand"],"🙏":["pray"],"🦶":["foot"],"🦵":["leg"],"🦿":["mechanical_leg"],"💄":["lipstick"],"💋":["kiss"],"👄":["lips"],"🦷":["tooth"],"🦴":["bone"],"👅":["tongue"],"👂":["ear"],"🦻":["ear_with_hearing_aid"],"👃":["nose"],"👣":["footprints"],"👁️":["eye"],"👀":["eyes"],"🧠":["brain"],"🫀":["anatomical_heart"],"🫁":["lungs"],"🗣️":["speaking_head","speaking_head_in_silhouette"],"👤":["bust_in_silhouette"],"👥":["busts_in_silhouette"],"🫂":["people_hugging"],"👶":["baby"],"👧":["girl"],"🧒":["child"],"👦":["boy"],"👩":["woman"],"🧑":["adult"],"👨":["man"],"🧑‍🦱":["person_curly_hair"],"👩‍🦱":["woman_curly_haired"],"👨‍🦱":["man_curly_haired"],"🧑‍🦰":["person_red_hair"],"👩‍🦰":["woman_red_haired"],"👨‍🦰":["man_red_haired"],"👱‍♀️":["blond_haired_woman"],"👱":["blond_haired_person","person_with_blond_hair"],"👱‍♂️":["blond_haired_man"],"🧑‍🦳":["person_white_hair"],"👩‍🦳":["woman_white_haired"],"👨‍🦳":["man_white_haired"],"🧑‍🦲":["person_bald"],"👩‍🦲":["woman_bald"],"👨‍🦲":["man_bald"],"🧔":["bearded_person"],"👵":["older_woman","grandma"],"🧓":["older_adult"],"👴":["older_man"],"👲":["man_with_chinese_cap","man_with_gua_pi_mao"],"👳":["person_wearing_turban","man_with_turban"],"👳‍♀️":["woman_wearing_turban"],"👳‍♂️":["man_wearing_turban"],"🧕":["woman_with_headscarf"],"👮":["police_officer","cop"],"👮‍♀️":["woman_police_officer"],"👮‍♂️":["man_police_officer"],"👷":["construction_worker"],"👷‍♀️":["woman_construction_worker"],"👷‍♂️":["man_construction_worker"],"💂":["guard","guardsman"],"💂‍♀️":["woman_guard"],"💂‍♂️":["man_guard"],"🕵️":["detective","spy","sleuth_or_spy"],"🕵️‍♀️":["woman_detective"],"🕵️‍♂️":["man_detective"],"🧑‍⚕️":["health_worker"],"👩‍⚕️":["woman_health_worker"],"👨‍⚕️":["man_health_worker"],"🧑‍🌾":["farmer"],"👩‍🌾":["woman_farmer"],"👨‍🌾":["man_farmer"],"🧑‍🍳":["cook"],"👩‍🍳":["woman_cook"],"👨‍🍳":["man_cook"],"🧑‍🎓":["student"],"👩‍🎓":["woman_student"],"👨‍🎓":["man_student"],"🧑‍🎤":["singer"],"👩‍🎤":["woman_singer"],"👨‍🎤":["man_singer"],"🧑‍🏫":["teacher"],"👩‍🏫":["woman_teacher"],"👨‍🏫":["man_teacher"],"🧑‍🏭":["factory_worker"],"👩‍🏭":["woman_factory_worker"],"👨‍🏭":["man_factory_worker"],"🧑‍💻":["technologist"],"👩‍💻":["woman_technologist"],"👨‍💻":["man_technologist"],"🧑‍💼":["office_worker"],"👩‍💼":["woman_office_worker"],"👨‍💼":["man_office_worker"],"🧑‍🔧":["mechanic"],"👩‍🔧":["woman_mechanic"],"👨‍🔧":["man_mechanic"],"🧑‍🔬":["scientist"],"👩‍🔬":["woman_scientist"],"👨‍🔬":["man_scientist"],"🧑‍🎨":["artist"],"👩‍🎨":["woman_artist"],"👨‍🎨":["man_artist"],"🧑‍🚒":["firefighter"],"👩‍🚒":["woman_firefighter"],"👨‍🚒":["man_firefighter"],"🧑‍✈️":["pilot"],"👩‍✈️":["woman_pilot"],"👨‍✈️":["man_pilot"],"🧑‍🚀":["astronaut"],"👩‍🚀":["woman_astronaut"],"👨‍🚀":["man_astronaut"],"🧑‍⚖️":["judge"],"👩‍⚖️":["woman_judge"],"👨‍⚖️":["man_judge"],"👰":["person_with_veil"],"👰‍♀️":["woman_with_veil","bride_with_veil"],"👰‍♂️":["man_with_veil"],"🤵":["person_in_tuxedo"],"🤵‍♀️":["woman_in_tuxedo"],"🤵‍♂️":["man_in_tuxedo"],"👸":["princess"],"🤴":["prince"],"🦸":["superhero"],"🦸‍♀️":["woman_superhero"],"🦸‍♂️":["man_superhero"],"🦹":["supervillain"],"🦹‍♀️":["woman_supervillain"],"🦹‍♂️":["man_supervillain"],"🥷":["ninja"],"🧑‍🎄":["mx_claus"],"🤶":["mrs_claus","mother_christmas"],"🎅":["santa"],"🧙":["mage"],"🧙‍♀️":["woman_mage"],"🧙‍♂️":["man_mage"],"🧝":["elf"],"🧝‍♀️":["woman_elf"],"🧝‍♂️":["man_elf"],"🧛":["vampire"],"🧛‍♀️":["woman_vampire"],"🧛‍♂️":["man_vampire"],"🧟":["zombie"],"🧟‍♀️":["woman_zombie"],"🧟‍♂️":["man_zombie"],"🧞":["genie"],"🧞‍♀️":["woman_genie"],"🧞‍♂️":["man_genie"],"🧜":["merperson"],"🧜‍♀️":["mermaid"],"🧜‍♂️":["merman"],"🧚":["fairy"],"🧚‍♀️":["woman_fairy"],"🧚‍♂️":["man_fairy"],"👼":["angel"],"🤰":["pregnant_woman","expecting_woman"],"🤱":["breast_feeding"],"🧑‍🍼":["person_feeding_baby"],"👩‍🍼":["woman_feeding_baby"],"👨‍🍼":["man_feeding_baby"],"🙇":["person_bowing","bow"],"🙇‍♀️":["woman_bowing"],"🙇‍♂️":["man_bowing"],"💁":["person_tipping_hand","information_desk_person"],"💁‍♀️":["woman_tipping_hand"],"💁‍♂️":["man_tipping_hand"],"🙅":["person_gesturing_no","no_good"],"🙅‍♀️":["woman_gesturing_no"],"🙅‍♂️":["man_gesturing_no"],"🙆":["person_gesturing_ok","ok_woman"],"🙆‍♀️":["woman_gesturing_ok"],"🙆‍♂️":["man_gesturing_ok"],"🙋":["person_raising_hand","raising_hand"],"🙋‍♀️":["woman_raising_hand"],"🙋‍♂️":["man_raising_hand"],"🧏":["deaf_person"],"🧏‍♀️":["deaf_woman"],"🧏‍♂️":["deaf_man"],"🤦":["person_facepalming","face_palm","facepalm"],"🤦‍♀️":["woman_facepalming"],"🤦‍♂️":["man_facepalming"],"🤷":["person_shrugging","shrug"],"🤷‍♀️":["woman_shrugging"],"🤷‍♂️":["man_shrugging"],"🙎":["person_pouting","person_with_pouting_face"],"🙎‍♀️":["woman_pouting"],"🙎‍♂️":["man_pouting"],"🙍":["person_frowning"],"🙍‍♀️":["woman_frowning"],"🙍‍♂️":["man_frowning"],"💇":["person_getting_haircut","haircut"],"💇‍♀️":["woman_getting_haircut"],"💇‍♂️":["man_getting_haircut"],"💆":["person_getting_massage","massage"],"💆‍♀️":["woman_getting_face_massage"],"💆‍♂️":["man_getting_face_massage"],"🧖":["person_in_steamy_room"],"🧖‍♀️":["woman_in_steamy_room"],"🧖‍♂️":["man_in_steamy_room"],"💅":["nail_care"],"🤳":["selfie"],"💃":["dancer"],"🕺":["man_dancing","male_dancer"],"👯":["people_with_bunny_ears_partying","dancers"],"👯‍♀️":["women_with_bunny_ears_partying"],"👯‍♂️":["men_with_bunny_ears_partying"],"🕴️":["levitate","man_in_business_suit_levitating"],"🧑‍🦽":["person_in_manual_wheelchair"],"👩‍🦽":["woman_in_manual_wheelchair"],"👨‍🦽":["man_in_manual_wheelchair"],"🧑‍🦼":["person_in_motorized_wheelchair"],"👩‍🦼":["woman_in_motorized_wheelchair"],"👨‍🦼":["man_in_motorized_wheelchair"],"🚶":["person_walking","walking"],"🚶‍♀️":["woman_walking"],"🚶‍♂️":["man_walking"],"🧑‍🦯":["person_with_probing_cane"],"👩‍🦯":["woman_with_probing_cane"],"👨‍🦯":["man_with_probing_cane"],"🧎":["person_kneeling"],"🧎‍♀️":["woman_kneeling"],"🧎‍♂️":["man_kneeling"],"🏃":["person_running","runner"],"🏃‍♀️":["woman_running"],"🏃‍♂️":["man_running"],"🧍":["person_standing"],"🧍‍♀️":["woman_standing"],"🧍‍♂️":["man_standing"],"🧑‍🤝‍🧑":["people_holding_hands"],"👫":["couple"],"👭":["two_women_holding_hands"],"👬":["two_men_holding_hands"],"💑":["couple_with_heart"],"👩‍❤️‍👨":["couple_with_heart_woman_man"],"👩‍❤️‍👩":["couple_ww","couple_with_heart_ww"],"👨‍❤️‍👨":["couple_mm","couple_with_heart_mm"],"💏":["couplekiss"],"👩‍❤️‍💋‍👨":["kiss_woman_man"],"👩‍❤️‍💋‍👩":["kiss_ww","couplekiss_ww"],"👨‍❤️‍💋‍👨":["kiss_mm","couplekiss_mm"],"👪":["family"],"👨‍👩‍👦":["family_man_woman_boy"],"👨‍👩‍👧":["family_mwg"],"👨‍👩‍👧‍👦":["family_mwgb"],"👨‍👩‍👦‍👦":["family_mwbb"],"👨‍👩‍👧‍👧":["family_mwgg"],"👩‍👩‍👦":["family_wwb"],"👩‍👩‍👧":["family_wwg"],"👩‍👩‍👧‍👦":["family_wwgb"],"👩‍👩‍👦‍👦":["family_wwbb"],"👩‍👩‍👧‍👧":["family_wwgg"],"👨‍👨‍👦":["family_mmb"],"👨‍👨‍👧":["family_mmg"],"👨‍👨‍👧‍👦":["family_mmgb"],"👨‍👨‍👦‍👦":["family_mmbb"],"👨‍👨‍👧‍👧":["family_mmgg"],"👩‍👦":["family_woman_boy"],"👩‍👧":["family_woman_girl"],"👩‍👧‍👦":["family_woman_girl_boy"],"👩‍👦‍👦":["family_woman_boy_boy"],"👩‍👧‍👧":["family_woman_girl_girl"],"👨‍👦":["family_man_boy"],"👨‍👧":["family_man_girl"],"👨‍👧‍👦":["family_man_girl_boy"],"👨‍👦‍👦":["family_man_boy_boy"],"👨‍👧‍👧":["family_man_girl_girl"],"🧶":["yarn"],"🧵":["thread"],"🧥":["coat"],"🥼":["lab_coat"],"🦺":["safety_vest"],"👚":["womans_clothes"],"👕":["shirt"],"👖":["jeans"],"🩲":["briefs"],"🩳":["shorts"],"👔":["necktie"],"👗":["dress"],"👙":["bikini"],"🩱":["one_piece_swimsuit"],"👘":["kimono"],"🥻":["sari"],"🥿":["womans_flat_shoe"],"👠":["high_heel"],"👡":["sandal"],"👢":["boot"],"👞":["mans_shoe"],"👟":["athletic_shoe"],"🥾":["hiking_boot"],"🩴":["thong_sandal"],"🧦":["socks"],"🧤":["gloves"],"🧣":["scarf"],"🎩":["tophat"],"🧢":["billed_cap"],"👒":["womans_hat"],"🎓":["mortar_board"],"⛑️":["helmet_with_cross","helmet_with_white_cross"],"🪖":["military_helmet"],"👑":["crown"],"💍":["ring"],"👝":["pouch"],"👛":["purse"],"👜":["handbag"],"💼":["briefcase"],"🎒":["school_satchel"],"🧳":["luggage"],"👓":["eyeglasses"],"🕶️":["dark_sunglasses"],"🥽":["goggles"],"🌂":["closed_umbrella"],"🐶":["dog"],"🐱":["cat"],"🐭":["mouse"],"🐹":["hamster"],"🐰":["rabbit"],"🦊":["fox","fox_face"],"🐻":["bear"],"🐼":["panda_face"],"🐻‍❄️":["polar_bear"],"🐨":["koala"],"🐯":["tiger"],"🦁":["lion_face","lion"],"🐮":["cow"],"🐷":["pig"],"🐽":["pig_nose"],"🐸":["frog"],"🐵":["monkey_face"],"🙈":["see_no_evil"],"🙉":["hear_no_evil"],"🙊":["speak_no_evil"],"🐒":["monkey"],"🐔":["chicken"],"🐧":["penguin"],"🐦":["bird"],"🐤":["baby_chick"],"🐣":["hatching_chick"],"🐥":["hatched_chick"],"🦆":["duck"],"🦤":["dodo"],"🦅":["eagle"],"🦉":["owl"],"🦇":["bat"],"🐺":["wolf"],"🐗":["boar"],"🐴":["horse"],"🦄":["unicorn","unicorn_face"],"🐝":["bee"],"🐛":["bug"],"🦋":["butterfly"],"🐌":["snail"],"🪱":["worm"],"🐞":["lady_beetle"],"🐜":["ant"],"🪰":["fly"],"🦟":["mosquito"],"🪳":["cockroach"],"🪲":["beetle"],"🦗":["cricket"],"🕷️":["spider"],"🕸️":["spider_web"],"🦂":["scorpion"],"🐢":["turtle"],"🐍":["snake"],"🦎":["lizard"],"🦖":["t_rex"],"🦕":["sauropod"],"🐙":["octopus"],"🦑":["squid"],"🦐":["shrimp"],"🦞":["lobster"],"🦀":["crab"],"🐡":["blowfish"],"🐠":["tropical_fish"],"🐟":["fish"],"🦭":["seal"],"🐬":["dolphin"],"🐳":["whale"],"🐋":["whale2"],"🦈":["shark"],"🐊":["crocodile"],"🐅":["tiger2"],"🐆":["leopard"],"🦓":["zebra"],"🦍":["gorilla"],"🦧":["orangutan"],"🐘":["elephant"],"🦣":["mammoth"],"🦬":["bison"],"🦛":["hippopotamus"],"🦏":["rhino","rhinoceros"],"🐪":["dromedary_camel"],"🐫":["camel"],"🦒":["giraffe"],"🦘":["kangaroo"],"🐃":["water_buffalo"],"🐂":["ox"],"🐄":["cow2"],"🐎":["racehorse"],"🐖":["pig2"],"🐏":["ram"],"🐑":["sheep"],"🦙":["llama"],"🐐":["goat"],"🦌":["deer"],"🐕":["dog2"],"🐩":["poodle"],"🦮":["guide_dog"],"🐕‍🦺":["service_dog"],"🐈":["cat2"],"🐈‍⬛":["black_cat"],"🐓":["rooster"],"🦃":["turkey"],"🦚":["peacock"],"🦜":["parrot"],"🦢":["swan"],"🦩":["flamingo"],"🕊️":["dove","dove_of_peace"],"🐇":["rabbit2"],"🦝":["raccoon"],"🦨":["skunk"],"🦡":["badger"],"🦫":["beaver"],"🦦":["otter"],"🦥":["sloth"],"🐁":["mouse2"],"🐀":["rat"],"🐿️":["chipmunk"],"🦔":["hedgehog"],"🐾":["feet","paw_prints"],"🐉":["dragon"],"🐲":["dragon_face"],"🌵":["cactus"],"🎄":["christmas_tree"],"🌲":["evergreen_tree"],"🌳":["deciduous_tree"],"🌴":["palm_tree"],"🌱":["seedling"],"🌿":["herb"],"☘️":["shamrock"],"🍀":["four_leaf_clover"],"🎍":["bamboo"],"🎋":["tanabata_tree"],"🍃":["leaves"],"🍂":["fallen_leaf"],"🍁":["maple_leaf"],"🪶":["feather"],"🍄":["mushroom"],"🐚":["shell"],"🪨":["rock"],"🪵":["wood"],"🌾":["ear_of_rice"],"🪴":["potted_plant"],"💐":["bouquet"],"🌷":["tulip"],"🌹":["rose"],"🥀":["wilted_rose","wilted_flower"],"🌺":["hibiscus"],"🌸":["cherry_blossom"],"🌼":["blossom"],"🌻":["sunflower"],"🌞":["sun_with_face"],"🌝":["full_moon_with_face"],"🌛":["first_quarter_moon_with_face"],"🌜":["last_quarter_moon_with_face"],"🌚":["new_moon_with_face"],"🌕":["full_moon"],"🌖":["waning_gibbous_moon"],"🌗":["last_quarter_moon"],"🌘":["waning_crescent_moon"],"🌑":["new_moon"],"🌒":["waxing_crescent_moon"],"🌓":["first_quarter_moon"],"🌔":["waxing_gibbous_moon"],"🌙":["crescent_moon"],"🌎":["earth_americas"],"🌍":["earth_africa"],"🌏":["earth_asia"],"🪐":["ringed_planet"],"💫":["dizzy"],"⭐":["star"],"🌟":["star2"],"✨":["sparkles"],"⚡":["zap"],"☄️":["comet"],"💥":["boom"],"🔥":["fire","flame"],"🌪️":["cloud_tornado","cloud_with_tornado"],"🌈":["rainbow"],"☀️":["sunny"],"🌤️":["white_sun_small_cloud","white_sun_with_small_cloud"],"⛅":["partly_sunny"],"🌥️":["white_sun_cloud","white_sun_behind_cloud"],"☁️":["cloud"],"🌦️":["white_sun_rain_cloud","white_sun_behind_cloud_with_rain"],"🌧️":["cloud_rain","cloud_with_rain"],"⛈️":["thunder_cloud_rain","thunder_cloud_and_rain"],"🌩️":["cloud_lightning","cloud_with_lightning"],"🌨️":["cloud_snow","cloud_with_snow"],"❄️":["snowflake"],"☃️":["snowman2"],"⛄":["snowman"],"🌬️":["wind_blowing_face"],"💨":["dash"],"💧":["droplet"],"💦":["sweat_drops"],"☔":["umbrella"],"☂️":["umbrella2"],"🌊":["ocean"],"🌫️":["fog"],"🍏":["green_apple"],"🍎":["apple"],"🍐":["pear"],"🍊":["tangerine"],"🍋":["lemon"],"🍌":["banana"],"🍉":["watermelon"],"🍇":["grapes"],"🫐":["blueberries"],"🍓":["strawberry"],"🍈":["melon"],"🍒":["cherries"],"🍑":["peach"],"🥭":["mango"],"🍍":["pineapple"],"🥥":["coconut"],"🥝":["kiwi","kiwifruit"],"🍅":["tomato"],"🍆":["eggplant"],"🥑":["avocado"],"🫒":["olive"],"🥦":["broccoli"],"🥬":["leafy_green"],"🫑":["bell_pepper"],"🥒":["cucumber"],"🌶️":["hot_pepper"],"🌽":["corn"],"🥕":["carrot"],"🧄":["garlic"],"🧅":["onion"],"🥔":["potato"],"🍠":["sweet_potato"],"🥐":["croissant"],"🥯":["bagel"],"🍞":["bread"],"🥖":["french_bread","baguette_bread"],"🫓":["flatbread"],"🥨":["pretzel"],"🧀":["cheese","cheese_wedge"],"🥚":["egg"],"🍳":["cooking"],"🧈":["butter"],"🥞":["pancakes"],"🧇":["waffle"],"🥓":["bacon"],"🥩":["cut_of_meat"],"🍗":["poultry_leg"],"🍖":["meat_on_bone"],"🌭":["hotdog","hot_dog"],"🍔":["hamburger"],"🍟":["fries"],"🍕":["pizza"],"🥪":["sandwich"],"🥙":["stuffed_flatbread","stuffed_pita"],"🧆":["falafel"],"🌮":["taco"],"🌯":["burrito"],"🫔":["tamale"],"🥗":["salad","green_salad"],"🥘":["shallow_pan_of_food","paella"],"🫕":["fondue"],"🥫":["canned_food"],"🍝":["spaghetti"],"🍜":["ramen"],"🍲":["stew"],"🍛":["curry"],"🍣":["sushi"],"🍱":["bento"],"🥟":["dumpling"],"🦪":["oyster"],"🍤":["fried_shrimp"],"🍙":["rice_ball"],"🍚":["rice"],"🍘":["rice_cracker"],"🍥":["fish_cake"],"🥠":["fortune_cookie"],"🥮":["moon_cake"],"🍢":["oden"],"🍡":["dango"],"🍧":["shaved_ice"],"🍨":["ice_cream"],"🍦":["icecream"],"🥧":["pie"],"🧁":["cupcake"],"🍰":["cake"],"🎂":["birthday"],"🍮":["custard","pudding","flan"],"🍭":["lollipop"],"🍬":["candy"],"🍫":["chocolate_bar"],"🍿":["popcorn"],"🍩":["doughnut"],"🍪":["cookie"],"🌰":["chestnut"],"🥜":["peanuts","shelled_peanut"],"🍯":["honey_pot"],"🥛":["milk","glass_of_milk"],"🍼":["baby_bottle"],"☕":["coffee"],"🍵":["tea"],"🫖":["teapot"],"🧉":["mate"],"🧋":["bubble_tea"],"🧃":["beverage_box"],"🥤":["cup_with_straw"],"🍶":["sake"],"🍺":["beer"],"🍻":["beers"],"🥂":["champagne_glass","clinking_glass"],"🍷":["wine_glass"],"🥃":["tumbler_glass","whisky"],"🍸":["cocktail"],"🍹":["tropical_drink"],"🍾":["champagne","bottle_with_popping_cork"],"🧊":["ice_cube"],"🥄":["spoon"],"🍴":["fork_and_knife"],"🍽️":["fork_knife_plate","fork_and_knife_with_plate"],"🥣":["bowl_with_spoon"],"🥡":["takeout_box"],"🥢":["chopsticks"],"🧂":["salt"],"⚽":["soccer"],"🏀":["basketball"],"🏈":["football"],"⚾":["baseball"],"🥎":["softball"],"🎾":["tennis"],"🏐":["volleyball"],"🏉":["rugby_football"],"🥏":["flying_disc"],"🪃":["boomerang"],"🎱":["8ball"],"🪀":["yo_yo"],"🏓":["ping_pong","table_tennis"],"🏸":["badminton"],"🏒":["hockey"],"🏑":["field_hockey"],"🥍":["lacrosse"],"🏏":["cricket_game","cricket_bat_ball"],"🥅":["goal","goal_net"],"⛳":["golf"],"🪁":["kite"],"🏹":["bow_and_arrow","archery"],"🎣":["fishing_pole_and_fish"],"🤿":["diving_mask"],"🥊":["boxing_glove","boxing_gloves"],"🥋":["martial_arts_uniform","karate_uniform"],"🎽":["running_shirt_with_sash"],"🛹":["skateboard"],"🛼":["roller_skate"],"🛷":["sled"],"⛸️":["ice_skate"],"🥌":["curling_stone"],"🎿":["ski"],"⛷️":["skier"],"🏂":["snowboarder"],"🪂":["parachute"],"🏋️":["person_lifting_weights","lifter","weight_lifter"],"🏋️‍♀️":["woman_lifting_weights"],"🏋️‍♂️":["man_lifting_weights"],"🤼":["people_wrestling","wrestlers","wrestling"],"🤼‍♀️":["women_wrestling"],"🤼‍♂️":["men_wrestling"],"🤸":["person_doing_cartwheel","cartwheel"],"🤸‍♀️":["woman_cartwheeling"],"🤸‍♂️":["man_cartwheeling"],"⛹️":["person_bouncing_ball","basketball_player","person_with_ball"],"⛹️‍♀️":["woman_bouncing_ball"],"⛹️‍♂️":["man_bouncing_ball"],"🤺":["person_fencing","fencer","fencing"],"🤾":["person_playing_handball","handball"],"🤾‍♀️":["woman_playing_handball"],"🤾‍♂️":["man_playing_handball"],"🏌️":["person_golfing","golfer"],"🏌️‍♀️":["woman_golfing"],"🏌️‍♂️":["man_golfing"],"🏇":["horse_racing"],"🧘":["person_in_lotus_position"],"🧘‍♀️":["woman_in_lotus_position"],"🧘‍♂️":["man_in_lotus_position"],"🏄":["person_surfing","surfer"],"🏄‍♀️":["woman_surfing"],"🏄‍♂️":["man_surfing"],"🏊":["person_swimming","swimmer"],"🏊‍♀️":["woman_swimming"],"🏊‍♂️":["man_swimming"],"🤽":["person_playing_water_polo","water_polo"],"🤽‍♀️":["woman_playing_water_polo"],"🤽‍♂️":["man_playing_water_polo"],"🚣":["person_rowing_boat","rowboat"],"🚣‍♀️":["woman_rowing_boat"],"🚣‍♂️":["man_rowing_boat"],"🧗":["person_climbing"],"🧗‍♀️":["woman_climbing"],"🧗‍♂️":["man_climbing"],"🚵":["person_mountain_biking","mountain_bicyclist"],"🚵‍♀️":["woman_mountain_biking"],"🚵‍♂️":["man_mountain_biking"],"🚴":["person_biking","bicyclist"],"🚴‍♀️":["woman_biking"],"🚴‍♂️":["man_biking"],"🏆":["trophy"],"🥇":["first_place","first_place_medal"],"🥈":["second_place","second_place_medal"],"🥉":["third_place","third_place_medal"],"🏅":["medal","sports_medal"],"🎖️":["military_medal"],"🏵️":["rosette"],"🎗️":["reminder_ribbon"],"🎫":["ticket"],"🎟️":["tickets","admission_tickets"],"🎪":["circus_tent"],"🤹":["person_juggling","juggling","juggler"],"🤹‍♀️":["woman_juggling"],"🤹‍♂️":["man_juggling"],"🎭":["performing_arts"],"🩰":["ballet_shoes"],"🎨":["art"],"🎬":["clapper"],"🎤":["microphone"],"🎧":["headphones"],"🎼":["musical_score"],"🎹":["musical_keyboard"],"🥁":["drum","drum_with_drumsticks"],"🪘":["long_drum"],"🎷":["saxophone"],"🎺":["trumpet"],"🎸":["guitar"],"🪕":["banjo"],"🎻":["violin"],"🪗":["accordion"],"🎲":["game_die"],"♟️":["chess_pawn"],"🎯":["dart"],"🎳":["bowling"],"🎮":["video_game"],"🎰":["slot_machine"],"🧩":["jigsaw"],"🚗":["red_car"],"🚕":["taxi"],"🚙":["blue_car"],"🛻":["pickup_truck"],"🚌":["bus"],"🚎":["trolleybus"],"🏎️":["race_car","racing_car"],"🚓":["police_car"],"🚑":["ambulance"],"🚒":["fire_engine"],"🚐":["minibus"],"🚚":["truck"],"🚛":["articulated_lorry"],"🚜":["tractor"],"🦯":["probing_cane"],"🦽":["manual_wheelchair"],"🦼":["motorized_wheelchair"],"🛴":["scooter"],"🚲":["bike"],"🛵":["motor_scooter","motorbike"],"🏍️":["motorcycle","racing_motorcycle"],"🛺":["auto_rickshaw"],"🚨":["rotating_light"],"🚔":["oncoming_police_car"],"🚍":["oncoming_bus"],"🚘":["oncoming_automobile"],"🚖":["oncoming_taxi"],"🚡":["aerial_tramway"],"🚠":["mountain_cableway"],"🚟":["suspension_railway"],"🚃":["railway_car"],"🚋":["train"],"🚞":["mountain_railway"],"🚝":["monorail"],"🚄":["bullettrain_side"],"🚅":["bullettrain_front"],"🚈":["light_rail"],"🚂":["steam_locomotive"],"🚆":["train2"],"🚇":["metro"],"🚊":["tram"],"🚉":["station"],"✈️":["airplane"],"🛫":["airplane_departure"],"🛬":["airplane_arriving"],"🛩️":["airplane_small","small_airplane"],"💺":["seat"],"🛰️":["satellite_orbital"],"🚀":["rocket"],"🛸":["flying_saucer"],"🚁":["helicopter"],"🛶":["canoe","kayak"],"⛵":["sailboat"],"🚤":["speedboat"],"🛥️":["motorboat"],"🛳️":["cruise_ship","passenger_ship"],"⛴️":["ferry"],"🚢":["ship"],"⚓":["anchor"],"⛽":["fuelpump"],"🚧":["construction"],"🚦":["vertical_traffic_light"],"🚥":["traffic_light"],"🚏":["busstop"],"🗺️":["map","world_map"],"🗿":["moyai"],"🗽":["statue_of_liberty"],"🗼":["tokyo_tower"],"🏰":["european_castle"],"🏯":["japanese_castle"],"🏟️":["stadium"],"🎡":["ferris_wheel"],"🎢":["roller_coaster"],"🎠":["carousel_horse"],"⛲":["fountain"],"⛱️":["beach_umbrella","umbrella_on_ground"],"🏖️":["beach","beach_with_umbrella"],"🏝️":["island","desert_island"],"🏜️":["desert"],"🌋":["volcano"],"⛰️":["mountain"],"🏔️":["mountain_snow","snow_capped_mountain"],"🗻":["mount_fuji"],"🏕️":["camping"],"⛺":["tent"],"🏠":["house"],"🏡":["house_with_garden"],"🏘️":["homes","house_buildings"],"🏚️":["house_abandoned","derelict_house_building"],"🛖":["hut"],"🏗️":["construction_site","building_construction"],"🏭":["factory"],"🏢":["office"],"🏬":["department_store"],"🏣":["post_office"],"🏤":["european_post_office"],"🏥":["hospital"],"🏦":["bank"],"🏨":["hotel"],"🏪":["convenience_store"],"🏫":["school"],"🏩":["love_hotel"],"💒":["wedding"],"🏛️":["classical_building"],"⛪":["church"],"🕌":["mosque"],"🕍":["synagogue"],"🛕":["hindu_temple"],"🕋":["kaaba"],"⛩️":["shinto_shrine"],"🛤️":["railway_track","railroad_track"],"🛣️":["motorway"],"🗾":["japan"],"🎑":["rice_scene"],"🏞️":["park","national_park"],"🌅":["sunrise"],"🌄":["sunrise_over_mountains"],"🌠":["stars"],"🎇":["sparkler"],"🎆":["fireworks"],"🌇":["city_sunset","city_sunrise"],"🌆":["city_dusk"],"🏙️":["cityscape"],"🌃":["night_with_stars"],"🌌":["milky_way"],"🌉":["bridge_at_night"],"🌁":["foggy"],"⌚":["watch"],"📱":["mobile_phone","iphone"],"📲":["calling"],"💻":["computer"],"⌨️":["keyboard"],"🖥️":["desktop","desktop_computer"],"🖨️":["printer"],"🖱️":["mouse_three_button","three_button_mouse"],"🖲️":["trackball"],"🕹️":["joystick"],"🗜️":["compression"],"💽":["minidisc"],"💾":["floppy_disk"],"💿":["cd"],"📀":["dvd"],"📼":["vhs"],"📷":["camera"],"📸":["camera_with_flash"],"📹":["video_camera"],"🎥":["movie_camera"],"📽️":["projector","film_projector"],"🎞️":["film_frames"],"📞":["telephone_receiver"],"☎️":["telephone"],"📟":["pager"],"📠":["fax"],"📺":["tv"],"📻":["radio"],"🎙️":["microphone2","studio_microphone"],"🎚️":["level_slider"],"🎛️":["control_knobs"],"🧭":["compass"],"⏱️":["stopwatch"],"⏲️":["timer","timer_clock"],"⏰":["alarm_clock"],"🕰️":["clock","mantlepiece_clock"],"⌛":["hourglass"],"⏳":["hourglass_flowing_sand"],"📡":["satellite"],"🔋":["battery"],"🔌":["electric_plug"],"💡":["bulb"],"🔦":["flashlight"],"🕯️":["candle"],"🪔":["diya_lamp"],"🧯":["fire_extinguisher"],"🛢️":["oil","oil_drum"],"💸":["money_with_wings"],"💵":["dollar"],"💴":["yen"],"💶":["euro"],"💷":["pound"],"🪙":["coin"],"💰":["moneybag"],"💳":["credit_card"],"💎":["gem"],"⚖️":["scales"],"🪜":["ladder"],"🧰":["toolbox"],"🪛":["screwdriver"],"🔧":["wrench"],"🔨":["hammer"],"⚒️":["hammer_pick","hammer_and_pick"],"🛠️":["tools","hammer_and_wrench"],"⛏️":["pick"],"🔩":["nut_and_bolt"],"⚙️":["gear"],"🧱":["bricks"],"⛓️":["chains"],"🪝":["hook"],"🪢":["knot"],"🧲":["magnet"],"🔫":["gun"],"💣":["bomb"],"🧨":["firecracker"],"🪓":["axe"],"🪚":["carpentry_saw"],"🔪":["knife"],"🗡️":["dagger","dagger_knife"],"⚔️":["crossed_swords"],"🛡️":["shield"],"🚬":["smoking"],"⚰️":["coffin"],"🪦":["headstone"],"⚱️":["urn","funeral_urn"],"🏺":["amphora"],"🪄":["magic_wand"],"🔮":["crystal_ball"],"📿":["prayer_beads"],"🧿":["nazar_amulet"],"💈":["barber"],"⚗️":["alembic"],"🔭":["telescope"],"🔬":["microscope"],"🕳️":["hole"],"🪟":["window"],"🩹":["adhesive_bandage"],"🩺":["stethoscope"],"💊":["pill"],"💉":["syringe"],"🩸":["drop_of_blood"],"🧬":["dna"],"🦠":["microbe"],"🧫":["petri_dish"],"🧪":["test_tube"],"🌡️":["thermometer"],"🪤":["mouse_trap"],"🧹":["broom"],"🧺":["basket"],"🪡":["sewing_needle"],"🧻":["roll_of_paper"],"🚽":["toilet"],"🪠":["plunger"],"🪣":["bucket"],"🚰":["potable_water"],"🚿":["shower"],"🛁":["bathtub"],"🛀":["bath"],"🪥":["toothbrush"],"🧼":["soap"],"🪒":["razor"],"🧽":["sponge"],"🧴":["squeeze_bottle"],"🛎️":["bellhop","bellhop_bell"],"🔑":["key"],"🗝️":["key2","old_key"],"🚪":["door"],"🪑":["chair"],"🪞":["mirror"],"🛋️":["couch","couch_and_lamp"],"🛏️":["bed"],"🛌":["sleeping_accommodation"],"🧸":["teddy_bear"],"🖼️":["frame_photo","frame_with_picture"],"🛍️":["shopping_bags"],"🛒":["shopping_cart","shopping_trolley"],"🎁":["gift"],"🎈":["balloon"],"🎏":["flags"],"🎀":["ribbon"],"🎊":["confetti_ball"],"🎉":["tada"],"🪅":["piñata"],"🪆":["nesting_dolls"],"🎎":["dolls"],"🏮":["izakaya_lantern"],"🎐":["wind_chime"],"🧧":["red_envelope"],"✉️":["envelope"],"📩":["envelope_with_arrow"],"📨":["incoming_envelope"],"📧":["e_mail","email"],"💌":["love_letter"],"📥":["inbox_tray"],"📤":["outbox_tray"],"📦":["package"],"🏷️":["label"],"📪":["mailbox_closed"],"📫":["mailbox"],"📬":["mailbox_with_mail"],"📭":["mailbox_with_no_mail"],"📮":["postbox"],"📯":["postal_horn"],"🪧":["placard"],"📜":["scroll"],"📃":["page_with_curl"],"📄":["page_facing_up"],"📑":["bookmark_tabs"],"🧾":["receipt"],"📊":["bar_chart"],"📈":["chart_with_upwards_trend"],"📉":["chart_with_downwards_trend"],"🗒️":["notepad_spiral","spiral_note_pad"],"🗓️":["calendar_spiral","spiral_calendar_pad"],"📆":["calendar"],"📅":["date"],"🗑️":["wastebasket"],"📇":["card_index"],"🗃️":["card_box","card_file_box"],"🗳️":["ballot_box","ballot_box_with_ballot"],"🗄️":["file_cabinet"],"📋":["clipboard"],"📁":["file_folder"],"📂":["open_file_folder"],"🗂️":["dividers","card_index_dividers"],"🗞️":["newspaper2","rolled_up_newspaper"],"📰":["newspaper"],"📓":["notebook"],"📔":["notebook_with_decorative_cover"],"📒":["ledger"],"📕":["closed_book"],"📗":["green_book"],"📘":["blue_book"],"📙":["orange_book"],"📚":["books"],"📖":["book"],"🔖":["bookmark"],"🧷":["safety_pin"],"🔗":["link"],"📎":["paperclip"],"🖇️":["paperclips","linked_paperclips"],"📐":["triangular_ruler"],"📏":["straight_ruler"],"🧮":["abacus"],"📌":["pushpin"],"📍":["round_pushpin"],"✂️":["scissors"],"🖊️":["pen_ballpoint","lower_left_ballpoint_pen"],"🖋️":["pen_fountain","lower_left_fountain_pen"],"✒️":["black_nib"],"🖌️":["paintbrush","lower_left_paintbrush"],"🖍️":["crayon","lower_left_crayon"],"📝":["pencil","memo"],"✏️":["pencil2"],"🔍":["mag"],"🔎":["mag_right"],"🔏":["lock_with_ink_pen"],"🔐":["closed_lock_with_key"],"🔒":["lock"],"🔓":["unlock"],"❤️":["heart"],"🧡":["orange_heart"],"💛":["yellow_heart"],"💚":["green_heart"],"💙":["blue_heart"],"💜":["purple_heart"],"🖤":["black_heart"],"🤎":["brown_heart"],"🤍":["white_heart"],"💔":["broken_heart"],"❣️":["heart_exclamation","heavy_heart_exclamation_mark_ornament"],"💕":["two_hearts"],"💞":["revolving_hearts"],"💓":["heartbeat"],"💗":["heartpulse"],"💖":["sparkling_heart"],"💘":["cupid"],"💝":["gift_heart"],"💟":["heart_decoration"],"☮️":["peace","peace_symbol"],"✝️":["cross","latin_cross"],"☪️":["star_and_crescent"],"🕉️":["om_symbol"],"☸️":["wheel_of_dharma"],"✡️":["star_of_david"],"🔯":["six_pointed_star"],"🕎":["menorah"],"☯️":["yin_yang"],"☦️":["orthodox_cross"],"🛐":["place_of_worship","worship_symbol"],"⛎":["ophiuchus"],"♈":["aries"],"♉":["taurus"],"♊":["gemini"],"♋":["cancer"],"♌":["leo"],"♍":["virgo"],"♎":["libra"],"♏":["scorpius"],"♐":["sagittarius"],"♑":["capricorn"],"♒":["aquarius"],"♓":["pisces"],"🆔":["id"],"⚛️":["atom","atom_symbol"],"🉑":["accept"],"☢️":["radioactive","radioactive_sign"],"☣️":["biohazard","biohazard_sign"],"📴":["mobile_phone_off"],"📳":["vibration_mode"],"🈶":["u6709"],"🈚":["u7121"],"🈸":["u7533"],"🈺":["u55b6"],"🈷️":["u6708"],"✴️":["eight_pointed_black_star"],"🆚":["vs"],"💮":["white_flower"],"🉐":["ideograph_advantage"],"㊙️":["secret"],"㊗️":["congratulations"],"🈴":["u5408"],"🈵":["u6e80"],"🈹":["u5272"],"🈲":["u7981"],"🅰️":["a"],"🅱️":["b"],"🆎":["ab"],"🆑":["cl"],"🅾️":["o2"],"🆘":["sos"],"❌":["x"],"⭕":["o"],"🛑":["octagonal_sign","stop_sign"],"⛔":["no_entry"],"📛":["name_badge"],"🚫":["no_entry_sign"],"💯":["100"],"💢":["anger"],"♨️":["hotsprings"],"🚷":["no_pedestrians"],"🚯":["do_not_litter"],"🚳":["no_bicycles"],"🚱":["non_potable_water"],"🔞":["underage"],"📵":["no_mobile_phones"],"🚭":["no_smoking"],"❗":["exclamation"],"❕":["grey_exclamation"],"❓":["question"],"❔":["grey_question"],"‼️":["bangbang"],"⁉️":["interrobang"],"🔅":["low_brightness"],"🔆":["high_brightness"],"〽️":["part_alternation_mark"],"⚠️":["warning"],"🚸":["children_crossing"],"🔱":["trident"],"⚜️":["fleur_de_lis"],"🔰":["beginner"],"♻️":["recycle"],"✅":["white_check_mark"],"🈯":["u6307"],"💹":["chart"],"❇️":["sparkle"],"✳️":["eight_spoked_asterisk"],"❎":["negative_squared_cross_mark"],"🌐":["globe_with_meridians"],"💠":["diamond_shape_with_a_dot_inside"],"Ⓜ️":["m"],"🌀":["cyclone"],"💤":["zzz"],"🏧":["atm"],"🚾":["wc"],"♿":["wheelchair"],"🅿️":["parking"],"🈳":["u7a7a"],"🈂️":["sa"],"🛂":["passport_control"],"🛃":["customs"],"🛄":["baggage_claim"],"🛅":["left_luggage"],"🛗":["elevator"],"🚹":["mens"],"🚺":["womens"],"🚼":["baby_symbol"],"🚻":["restroom"],"🚮":["put_litter_in_its_place"],"🎦":["cinema"],"📶":["signal_strength"],"🈁":["koko"],"🔣":["symbols"],"ℹ️":["information_source"],"🔤":["abc"],"🔡":["abcd"],"🔠":["capital_abcd"],"🆖":["ng"],"🆗":["ok"],"🆙":["up"],"🆒":["cool"],"🆕":["new"],"🆓":["free"],"0️⃣":["zero"],"1️⃣":["one"],"2️⃣":["two"],"3️⃣":["three"],"4️⃣":["four"],"5️⃣":["five"],"6️⃣":["six"],"7️⃣":["seven"],"8️⃣":["eight"],"9️⃣":["nine"],"🔟":["keycap_ten"],"🔢":["1234"],"#️⃣":["hash"],"*️⃣":["asterisk","keycap_asterisk"],"⏏️":["eject","eject_symbol"],"▶️":["arrow_forward"],"⏸️":["pause_button","double_vertical_bar"],"⏯️":["play_pause"],"⏹️":["stop_button"],"⏺️":["record_button"],"⏭️":["track_next","next_track"],"⏮️":["track_previous","previous_track"],"⏩":["fast_forward"],"⏪":["rewind"],"⏫":["arrow_double_up"],"⏬":["arrow_double_down"],"◀️":["arrow_backward"],"🔼":["arrow_up_small"],"🔽":["arrow_down_small"],"➡️":["arrow_right"],"⬅️":["arrow_left"],"⬆️":["arrow_up"],"⬇️":["arrow_down"],"↗️":["arrow_upper_right"],"↘️":["arrow_lower_right"],"↙️":["arrow_lower_left"],"↖️":["arrow_upper_left"],"↕️":["arrow_up_down"],"↔️":["left_right_arrow"],"↪️":["arrow_right_hook"],"↩️":["leftwards_arrow_with_hook"],"⤴️":["arrow_heading_up"],"⤵️":["arrow_heading_down"],"🔀":["twisted_rightwards_arrows"],"🔁":["repeat"],"🔂":["repeat_one"],"🔄":["arrows_counterclockwise"],"🔃":["arrows_clockwise"],"🎵":["musical_note"],"🎶":["notes"],"➕":["heavy_plus_sign"],"➖":["heavy_minus_sign"],"➗":["heavy_division_sign"],"✖️":["heavy_multiplication_x"],"♾️":["infinity"],"💲":["heavy_dollar_sign"],"💱":["currency_exchange"],"™️":["tm"],"©️":["copyright"],"®️":["registered"],"〰️":["wavy_dash"],"➰":["curly_loop"],"➿":["loop"],"🔚":["end"],"🔙":["back"],"🔛":["on"],"🔝":["top"],"🔜":["soon"],"✔️":["heavy_check_mark"],"☑️":["ballot_box_with_check"],"🔘":["radio_button"],"⚪":["white_circle"],"⚫":["black_circle"],"🔴":["red_circle"],"🔵":["blue_circle"],"🟤":["brown_circle"],"🟣":["purple_circle"],"🟢":["green_circle"],"🟡":["yellow_circle"],"🟠":["orange_circle"],"🔺":["small_red_triangle"],"🔻":["small_red_triangle_down"],"🔸":["small_orange_diamond"],"🔹":["small_blue_diamond"],"🔶":["large_orange_diamond"],"🔷":["large_blue_diamond"],"🔳":["white_square_button"],"🔲":["black_square_button"],"▪️":["black_small_square"],"▫️":["white_small_square"],"◾":["black_medium_small_square"],"◽":["white_medium_small_square"],"◼️":["black_medium_square"],"◻️":["white_medium_square"],"⬛":["black_large_square"],"⬜":["white_large_square"],"🟧":["orange_square"],"🟦":["blue_square"],"🟥":["red_square"],"🟫":["brown_square"],"🟪":["purple_square"],"🟩":["green_square"],"🟨":["yellow_square"],"🔈":["speaker"],"🔇":["mute"],"🔉":["sound"],"🔊":["loud_sound"],"🔔":["bell"],"🔕":["no_bell"],"📣":["mega"],"📢":["loudspeaker"],"🗨️":["speech_left","left_speech_bubble"],"👁‍🗨":["eye_in_speech_bubble"],"💬":["speech_balloon"],"💭":["thought_balloon"],"🗯️":["anger_right","right_anger_bubble"],"♠️":["spades"],"♣️":["clubs"],"♥️":["hearts"],"♦️":["diamonds"],"🃏":["black_joker"],"🎴":["flower_playing_cards"],"🀄":["mahjong"],"🕐":["clock1"],"🕑":["clock2"],"🕒":["clock3"],"🕓":["clock4"],"🕔":["clock5"],"🕕":["clock6"],"🕖":["clock7"],"🕗":["clock8"],"🕘":["clock9"],"🕙":["clock10"],"🕚":["clock11"],"🕛":["clock12"],"🕜":["clock130"],"🕝":["clock230"],"🕞":["clock330"],"🕟":["clock430"],"🕠":["clock530"],"🕡":["clock630"],"🕢":["clock730"],"🕣":["clock830"],"🕤":["clock930"],"🕥":["clock1030"],"🕦":["clock1130"],"🕧":["clock1230"],"♀️":["female_sign"],"♂️":["male_sign"],"⚧":["transgender_symbol"],"⚕️":["medical_symbol"],"🇿":["regional_indicator_z"],"🇾":["regional_indicator_y"],"🇽":["regional_indicator_x"],"🇼":["regional_indicator_w"],"🇻":["regional_indicator_v"],"🇺":["regional_indicator_u"],"🇹":["regional_indicator_t"],"🇸":["regional_indicator_s"],"🇷":["regional_indicator_r"],"🇶":["regional_indicator_q"],"🇵":["regional_indicator_p"],"🇴":["regional_indicator_o"],"🇳":["regional_indicator_n"],"🇲":["regional_indicator_m"],"🇱":["regional_indicator_l"],"🇰":["regional_indicator_k"],"🇯":["regional_indicator_j"],"🇮":["regional_indicator_i"],"🇭":["regional_indicator_h"],"🇬":["regional_indicator_g"],"🇫":["regional_indicator_f"],"🇪":["regional_indicator_e"],"🇩":["regional_indicator_d"],"🇨":["regional_indicator_c"],"🇧":["regional_indicator_b"],"🇦":["regional_indicator_a"],"🏳️":["flag_white"],"🏴":["flag_black"],"🏁":["checkered_flag"],"🚩":["triangular_flag_on_post"],"🏳️‍🌈":["rainbow_flag","gay_pride_flag"],"🏳️‍⚧️":["transgender_flag"],"🏴‍☠️":["pirate_flag"],"🇦🇫":["flag_af"],"🇦🇽":["flag_ax"],"🇦🇱":["flag_al"],"🇩🇿":["flag_dz"],"🇦🇸":["flag_as"],"🇦🇩":["flag_ad"],"🇦🇴":["flag_ao"],"🇦🇮":["flag_ai"],"🇦🇶":["flag_aq"],"🇦🇬":["flag_ag"],"🇦🇷":["flag_ar"],"🇦🇲":["flag_am"],"🇦🇼":["flag_aw"],"🇦🇺":["flag_au"],"🇦🇹":["flag_at"],"🇦🇿":["flag_az"],"🇧🇸":["flag_bs"],"🇧🇭":["flag_bh"],"🇧🇩":["flag_bd"],"🇧🇧":["flag_bb"],"🇧🇾":["flag_by"],"🇧🇪":["flag_be"],"🇧🇿":["flag_bz"],"🇧🇯":["flag_bj"],"🇧🇲":["flag_bm"],"🇧🇹":["flag_bt"],"🇧🇴":["flag_bo"],"🇧🇦":["flag_ba"],"🇧🇼":["flag_bw"],"🇧🇷":["flag_br"],"🇮🇴":["flag_io"],"🇻🇬":["flag_vg"],"🇧🇳":["flag_bn"],"🇧🇬":["flag_bg"],"🇧🇫":["flag_bf"],"🇧🇮":["flag_bi"],"🇰🇭":["flag_kh"],"🇨🇲":["flag_cm"],"🇨🇦":["flag_ca"],"🇮🇨":["flag_ic"],"🇨🇻":["flag_cv"],"🇧🇶":["flag_bq"],"🇰🇾":["flag_ky"],"🇨🇫":["flag_cf"],"🇹🇩":["flag_td"],"🇨🇱":["flag_cl"],"🇨🇳":["flag_cn"],"🇨🇽":["flag_cx"],"🇨🇨":["flag_cc"],"🇨🇴":["flag_co"],"🇰🇲":["flag_km"],"🇨🇬":["flag_cg"],"🇨🇩":["flag_cd"],"🇨🇰":["flag_ck"],"🇨🇷":["flag_cr"],"🇨🇮":["flag_ci"],"🇭🇷":["flag_hr"],"🇨🇺":["flag_cu"],"🇨🇼":["flag_cw"],"🇨🇾":["flag_cy"],"🇨🇿":["flag_cz"],"🇩🇰":["flag_dk"],"🇩🇯":["flag_dj"],"🇩🇲":["flag_dm"],"🇩🇴":["flag_do"],"🇪🇨":["flag_ec"],"🇪🇬":["flag_eg"],"🇸🇻":["flag_sv"],"🇬🇶":["flag_gq"],"🇪🇷":["flag_er"],"🇪🇪":["flag_ee"],"🇪🇹":["flag_et"],"🇪🇺":["flag_eu"],"🇫🇰":["flag_fk"],"🇫🇴":["flag_fo"],"🇫🇯":["flag_fj"],"🇫🇮":["flag_fi"],"🇫🇷":["flag_fr"],"🇬🇫":["flag_gf"],"🇵🇫":["flag_pf"],"🇹🇫":["flag_tf"],"🇬🇦":["flag_ga"],"🇬🇲":["flag_gm"],"🇬🇪":["flag_ge"],"🇩🇪":["flag_de"],"🇬🇭":["flag_gh"],"🇬🇮":["flag_gi"],"🇬🇷":["flag_gr"],"🇬🇱":["flag_gl"],"🇬🇩":["flag_gd"],"🇬🇵":["flag_gp"],"🇬🇺":["flag_gu"],"🇬🇹":["flag_gt"],"🇬🇬":["flag_gg"],"🇬🇳":["flag_gn"],"🇬🇼":["flag_gw"],"🇬🇾":["flag_gy"],"🇭🇹":["flag_ht"],"🇭🇳":["flag_hn"],"🇭🇰":["flag_hk"],"🇭🇺":["flag_hu"],"🇮🇸":["flag_is"],"🇮🇳":["flag_in"],"🇮🇩":["flag_id"],"🇮🇷":["flag_ir"],"🇮🇶":["flag_iq"],"🇮🇪":["flag_ie"],"🇮🇲":["flag_im"],"🇮🇱":["flag_il"],"🇮🇹":["flag_it"],"🇯🇲":["flag_jm"],"🇯🇵":["flag_jp"],"🎌":["crossed_flags"],"🇯🇪":["flag_je"],"🇯🇴":["flag_jo"],"🇰🇿":["flag_kz"],"🇰🇪":["flag_ke"],"🇰🇮":["flag_ki"],"🇽🇰":["flag_xk"],"🇰🇼":["flag_kw"],"🇰🇬":["flag_kg"],"🇱🇦":["flag_la"],"🇱🇻":["flag_lv"],"🇱🇧":["flag_lb"],"🇱🇸":["flag_ls"],"🇱🇷":["flag_lr"],"🇱🇾":["flag_ly"],"🇱🇮":["flag_li"],"🇱🇹":["flag_lt"],"🇱🇺":["flag_lu"],"🇲🇴":["flag_mo"],"🇲🇰":["flag_mk"],"🇲🇬":["flag_mg"],"🇲🇼":["flag_mw"],"🇲🇾":["flag_my"],"🇲🇻":["flag_mv"],"🇲🇱":["flag_ml"],"🇲🇹":["flag_mt"],"🇲🇭":["flag_mh"],"🇲🇶":["flag_mq"],"🇲🇷":["flag_mr"],"🇲🇺":["flag_mu"],"🇾🇹":["flag_yt"],"🇲🇽":["flag_mx"],"🇫🇲":["flag_fm"],"🇲🇩":["flag_md"],"🇲🇨":["flag_mc"],"🇲🇳":["flag_mn"],"🇲🇪":["flag_me"],"🇲🇸":["flag_ms"],"🇲🇦":["flag_ma"],"🇲🇿":["flag_mz"],"🇲🇲":["flag_mm"],"🇳🇦":["flag_na"],"🇳🇷":["flag_nr"],"🇳🇵":["flag_np"],"🇳🇱":["flag_nl"],"🇳🇨":["flag_nc"],"🇳🇿":["flag_nz"],"🇳🇮":["flag_ni"],"🇳🇪":["flag_ne"],"🇳🇬":["flag_ng"],"🇳🇺":["flag_nu"],"🇳🇫":["flag_nf"],"🇰🇵":["flag_kp"],"🇲🇵":["flag_mp"],"🇳🇴":["flag_no"],"🇴🇲":["flag_om"],"🇵🇰":["flag_pk"],"🇵🇼":["flag_pw"],"🇵🇸":["flag_ps"],"🇵🇦":["flag_pa"],"🇵🇬":["flag_pg"],"🇵🇾":["flag_py"],"🇵🇪":["flag_pe"],"🇵🇭":["flag_ph"],"🇵🇳":["flag_pn"],"🇵🇱":["flag_pl"],"🇵🇹":["flag_pt"],"🇵🇷":["flag_pr"],"🇶🇦":["flag_qa"],"🇷🇪":["flag_re"],"🇷🇴":["flag_ro"],"🇷🇺":["flag_ru"],"🇷🇼":["flag_rw"],"🇼🇸":["flag_ws"],"🇸🇲":["flag_sm"],"🇸🇹":["flag_st"],"🇸🇦":["flag_sa"],"🇸🇳":["flag_sn"],"🇷🇸":["flag_rs"],"🇸🇨":["flag_sc"],"🇸🇱":["flag_sl"],"🇸🇬":["flag_sg"],"🇸🇽":["flag_sx"],"🇸🇰":["flag_sk"],"🇸🇮":["flag_si"],"🇬🇸":["flag_gs"],"🇸🇧":["flag_sb"],"🇸🇴":["flag_so"],"🇿🇦":["flag_za"],"🇰🇷":["flag_kr"],"🇸🇸":["flag_ss"],"🇪🇸":["flag_es"],"🇱🇰":["flag_lk"],"🇧🇱":["flag_bl"],"🇸🇭":["flag_sh"],"🇰🇳":["flag_kn"],"🇱🇨":["flag_lc"],"🇵🇲":["flag_pm"],"🇻🇨":["flag_vc"],"🇸🇩":["flag_sd"],"🇸🇷":["flag_sr"],"🇸🇿":["flag_sz"],"🇸🇪":["flag_se"],"🇨🇭":["flag_ch"],"🇸🇾":["flag_sy"],"🇹🇼":["flag_tw"],"🇹🇯":["flag_tj"],"🇹🇿":["flag_tz"],"🇹🇭":["flag_th"],"🇹🇱":["flag_tl"],"🇹🇬":["flag_tg"],"🇹🇰":["flag_tk"],"🇹🇴":["flag_to"],"🇹🇹":["flag_tt"],"🇹🇳":["flag_tn"],"🇹🇷":["flag_tr"],"🇹🇲":["flag_tm"],"🇹🇨":["flag_tc"],"🇻🇮":["flag_vi"],"🇹🇻":["flag_tv"],"🇺🇬":["flag_ug"],"🇺🇦":["flag_ua"],"🇦🇪":["flag_ae"],"🇬🇧":["flag_gb"],"🏴󠁧󠁢󠁥󠁮󠁧󠁿":["england"],"🏴󠁧󠁢󠁳󠁣󠁴󠁿":["scotland"],"🏴󠁧󠁢󠁷󠁬󠁳󠁿":["wales"],"🇺🇸":["flag_us"],"🇺🇾":["flag_uy"],"🇺🇿":["flag_uz"],"🇻🇺":["flag_vu"],"🇻🇦":["flag_va"],"🇻🇪":["flag_ve"],"🇻🇳":["flag_vn"],"🇼🇫":["flag_wf"],"🇪🇭":["flag_eh"],"🇾🇪":["flag_ye"],"🇿🇲":["flag_zm"],"🇿🇼":["flag_zw"],"🇦🇨":["flag_ac"],"🇧🇻":["flag_bv"],"🇨🇵":["flag_cp"],"🇪🇦":["flag_ea"],"🇩🇬":["flag_dg"],"🇭🇲":["flag_hm"],"🇲🇫":["flag_mf"],"🇸🇯":["flag_sj"],"🇹🇦":["flag_ta"],"🇺🇲":["flag_um"],"🇺🇳":["united_nations"]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;